// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/service/s3/s3manager"
	"github.com/segmentio/ctlstore/pkg/supervisor"
)

type FakeS3Uploader struct {
	UploadStub        func(*s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)
	uploadMutex       sync.RWMutex
	uploadArgsForCall []struct {
		arg1 *s3manager.UploadInput
		arg2 []func(*s3manager.Uploader)
	}
	uploadReturns struct {
		result1 *s3manager.UploadOutput
		result2 error
	}
	uploadReturnsOnCall map[int]struct {
		result1 *s3manager.UploadOutput
		result2 error
	}
	UploadWithContextStub        func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)
	uploadWithContextMutex       sync.RWMutex
	uploadWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *s3manager.UploadInput
		arg3 []func(*s3manager.Uploader)
	}
	uploadWithContextReturns struct {
		result1 *s3manager.UploadOutput
		result2 error
	}
	uploadWithContextReturnsOnCall map[int]struct {
		result1 *s3manager.UploadOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeS3Uploader) Upload(arg1 *s3manager.UploadInput, arg2 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	fake.uploadMutex.Lock()
	ret, specificReturn := fake.uploadReturnsOnCall[len(fake.uploadArgsForCall)]
	fake.uploadArgsForCall = append(fake.uploadArgsForCall, struct {
		arg1 *s3manager.UploadInput
		arg2 []func(*s3manager.Uploader)
	}{arg1, arg2})
	stub := fake.UploadStub
	fakeReturns := fake.uploadReturns
	fake.recordInvocation("Upload", []interface{}{arg1, arg2})
	fake.uploadMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Uploader) UploadCallCount() int {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	return len(fake.uploadArgsForCall)
}

func (fake *FakeS3Uploader) UploadCalls(stub func(*s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = stub
}

func (fake *FakeS3Uploader) UploadArgsForCall(i int) (*s3manager.UploadInput, []func(*s3manager.Uploader)) {
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	argsForCall := fake.uploadArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeS3Uploader) UploadReturns(result1 *s3manager.UploadOutput, result2 error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = nil
	fake.uploadReturns = struct {
		result1 *s3manager.UploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Uploader) UploadReturnsOnCall(i int, result1 *s3manager.UploadOutput, result2 error) {
	fake.uploadMutex.Lock()
	defer fake.uploadMutex.Unlock()
	fake.UploadStub = nil
	if fake.uploadReturnsOnCall == nil {
		fake.uploadReturnsOnCall = make(map[int]struct {
			result1 *s3manager.UploadOutput
			result2 error
		})
	}
	fake.uploadReturnsOnCall[i] = struct {
		result1 *s3manager.UploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Uploader) UploadWithContext(arg1 context.Context, arg2 *s3manager.UploadInput, arg3 ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error) {
	fake.uploadWithContextMutex.Lock()
	ret, specificReturn := fake.uploadWithContextReturnsOnCall[len(fake.uploadWithContextArgsForCall)]
	fake.uploadWithContextArgsForCall = append(fake.uploadWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *s3manager.UploadInput
		arg3 []func(*s3manager.Uploader)
	}{arg1, arg2, arg3})
	stub := fake.UploadWithContextStub
	fakeReturns := fake.uploadWithContextReturns
	fake.recordInvocation("UploadWithContext", []interface{}{arg1, arg2, arg3})
	fake.uploadWithContextMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeS3Uploader) UploadWithContextCallCount() int {
	fake.uploadWithContextMutex.RLock()
	defer fake.uploadWithContextMutex.RUnlock()
	return len(fake.uploadWithContextArgsForCall)
}

func (fake *FakeS3Uploader) UploadWithContextCalls(stub func(context.Context, *s3manager.UploadInput, ...func(*s3manager.Uploader)) (*s3manager.UploadOutput, error)) {
	fake.uploadWithContextMutex.Lock()
	defer fake.uploadWithContextMutex.Unlock()
	fake.UploadWithContextStub = stub
}

func (fake *FakeS3Uploader) UploadWithContextArgsForCall(i int) (context.Context, *s3manager.UploadInput, []func(*s3manager.Uploader)) {
	fake.uploadWithContextMutex.RLock()
	defer fake.uploadWithContextMutex.RUnlock()
	argsForCall := fake.uploadWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeS3Uploader) UploadWithContextReturns(result1 *s3manager.UploadOutput, result2 error) {
	fake.uploadWithContextMutex.Lock()
	defer fake.uploadWithContextMutex.Unlock()
	fake.UploadWithContextStub = nil
	fake.uploadWithContextReturns = struct {
		result1 *s3manager.UploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Uploader) UploadWithContextReturnsOnCall(i int, result1 *s3manager.UploadOutput, result2 error) {
	fake.uploadWithContextMutex.Lock()
	defer fake.uploadWithContextMutex.Unlock()
	fake.UploadWithContextStub = nil
	if fake.uploadWithContextReturnsOnCall == nil {
		fake.uploadWithContextReturnsOnCall = make(map[int]struct {
			result1 *s3manager.UploadOutput
			result2 error
		})
	}
	fake.uploadWithContextReturnsOnCall[i] = struct {
		result1 *s3manager.UploadOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeS3Uploader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.uploadMutex.RLock()
	defer fake.uploadMutex.RUnlock()
	fake.uploadWithContextMutex.RLock()
	defer fake.uploadWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeS3Uploader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ supervisor.S3Uploader = new(FakeS3Uploader)
