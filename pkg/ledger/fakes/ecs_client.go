// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/aws/aws-sdk-go/aws/request"
	"github.com/aws/aws-sdk-go/service/ecs"
	"github.com/segmentio/ctlstore/pkg/ledger"
)

type FakeECSClient struct {
	CreateCapacityProviderStub        func(*ecs.CreateCapacityProviderInput) (*ecs.CreateCapacityProviderOutput, error)
	createCapacityProviderMutex       sync.RWMutex
	createCapacityProviderArgsForCall []struct {
		arg1 *ecs.CreateCapacityProviderInput
	}
	createCapacityProviderReturns struct {
		result1 *ecs.CreateCapacityProviderOutput
		result2 error
	}
	createCapacityProviderReturnsOnCall map[int]struct {
		result1 *ecs.CreateCapacityProviderOutput
		result2 error
	}
	CreateCapacityProviderRequestStub        func(*ecs.CreateCapacityProviderInput) (*request.Request, *ecs.CreateCapacityProviderOutput)
	createCapacityProviderRequestMutex       sync.RWMutex
	createCapacityProviderRequestArgsForCall []struct {
		arg1 *ecs.CreateCapacityProviderInput
	}
	createCapacityProviderRequestReturns struct {
		result1 *request.Request
		result2 *ecs.CreateCapacityProviderOutput
	}
	createCapacityProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.CreateCapacityProviderOutput
	}
	CreateCapacityProviderWithContextStub        func(context.Context, *ecs.CreateCapacityProviderInput, ...request.Option) (*ecs.CreateCapacityProviderOutput, error)
	createCapacityProviderWithContextMutex       sync.RWMutex
	createCapacityProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.CreateCapacityProviderInput
		arg3 []request.Option
	}
	createCapacityProviderWithContextReturns struct {
		result1 *ecs.CreateCapacityProviderOutput
		result2 error
	}
	createCapacityProviderWithContextReturnsOnCall map[int]struct {
		result1 *ecs.CreateCapacityProviderOutput
		result2 error
	}
	CreateClusterStub        func(*ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error)
	createClusterMutex       sync.RWMutex
	createClusterArgsForCall []struct {
		arg1 *ecs.CreateClusterInput
	}
	createClusterReturns struct {
		result1 *ecs.CreateClusterOutput
		result2 error
	}
	createClusterReturnsOnCall map[int]struct {
		result1 *ecs.CreateClusterOutput
		result2 error
	}
	CreateClusterRequestStub        func(*ecs.CreateClusterInput) (*request.Request, *ecs.CreateClusterOutput)
	createClusterRequestMutex       sync.RWMutex
	createClusterRequestArgsForCall []struct {
		arg1 *ecs.CreateClusterInput
	}
	createClusterRequestReturns struct {
		result1 *request.Request
		result2 *ecs.CreateClusterOutput
	}
	createClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.CreateClusterOutput
	}
	CreateClusterWithContextStub        func(context.Context, *ecs.CreateClusterInput, ...request.Option) (*ecs.CreateClusterOutput, error)
	createClusterWithContextMutex       sync.RWMutex
	createClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.CreateClusterInput
		arg3 []request.Option
	}
	createClusterWithContextReturns struct {
		result1 *ecs.CreateClusterOutput
		result2 error
	}
	createClusterWithContextReturnsOnCall map[int]struct {
		result1 *ecs.CreateClusterOutput
		result2 error
	}
	CreateServiceStub        func(*ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error)
	createServiceMutex       sync.RWMutex
	createServiceArgsForCall []struct {
		arg1 *ecs.CreateServiceInput
	}
	createServiceReturns struct {
		result1 *ecs.CreateServiceOutput
		result2 error
	}
	createServiceReturnsOnCall map[int]struct {
		result1 *ecs.CreateServiceOutput
		result2 error
	}
	CreateServiceRequestStub        func(*ecs.CreateServiceInput) (*request.Request, *ecs.CreateServiceOutput)
	createServiceRequestMutex       sync.RWMutex
	createServiceRequestArgsForCall []struct {
		arg1 *ecs.CreateServiceInput
	}
	createServiceRequestReturns struct {
		result1 *request.Request
		result2 *ecs.CreateServiceOutput
	}
	createServiceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.CreateServiceOutput
	}
	CreateServiceWithContextStub        func(context.Context, *ecs.CreateServiceInput, ...request.Option) (*ecs.CreateServiceOutput, error)
	createServiceWithContextMutex       sync.RWMutex
	createServiceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.CreateServiceInput
		arg3 []request.Option
	}
	createServiceWithContextReturns struct {
		result1 *ecs.CreateServiceOutput
		result2 error
	}
	createServiceWithContextReturnsOnCall map[int]struct {
		result1 *ecs.CreateServiceOutput
		result2 error
	}
	CreateTaskSetStub        func(*ecs.CreateTaskSetInput) (*ecs.CreateTaskSetOutput, error)
	createTaskSetMutex       sync.RWMutex
	createTaskSetArgsForCall []struct {
		arg1 *ecs.CreateTaskSetInput
	}
	createTaskSetReturns struct {
		result1 *ecs.CreateTaskSetOutput
		result2 error
	}
	createTaskSetReturnsOnCall map[int]struct {
		result1 *ecs.CreateTaskSetOutput
		result2 error
	}
	CreateTaskSetRequestStub        func(*ecs.CreateTaskSetInput) (*request.Request, *ecs.CreateTaskSetOutput)
	createTaskSetRequestMutex       sync.RWMutex
	createTaskSetRequestArgsForCall []struct {
		arg1 *ecs.CreateTaskSetInput
	}
	createTaskSetRequestReturns struct {
		result1 *request.Request
		result2 *ecs.CreateTaskSetOutput
	}
	createTaskSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.CreateTaskSetOutput
	}
	CreateTaskSetWithContextStub        func(context.Context, *ecs.CreateTaskSetInput, ...request.Option) (*ecs.CreateTaskSetOutput, error)
	createTaskSetWithContextMutex       sync.RWMutex
	createTaskSetWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.CreateTaskSetInput
		arg3 []request.Option
	}
	createTaskSetWithContextReturns struct {
		result1 *ecs.CreateTaskSetOutput
		result2 error
	}
	createTaskSetWithContextReturnsOnCall map[int]struct {
		result1 *ecs.CreateTaskSetOutput
		result2 error
	}
	DeleteAccountSettingStub        func(*ecs.DeleteAccountSettingInput) (*ecs.DeleteAccountSettingOutput, error)
	deleteAccountSettingMutex       sync.RWMutex
	deleteAccountSettingArgsForCall []struct {
		arg1 *ecs.DeleteAccountSettingInput
	}
	deleteAccountSettingReturns struct {
		result1 *ecs.DeleteAccountSettingOutput
		result2 error
	}
	deleteAccountSettingReturnsOnCall map[int]struct {
		result1 *ecs.DeleteAccountSettingOutput
		result2 error
	}
	DeleteAccountSettingRequestStub        func(*ecs.DeleteAccountSettingInput) (*request.Request, *ecs.DeleteAccountSettingOutput)
	deleteAccountSettingRequestMutex       sync.RWMutex
	deleteAccountSettingRequestArgsForCall []struct {
		arg1 *ecs.DeleteAccountSettingInput
	}
	deleteAccountSettingRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DeleteAccountSettingOutput
	}
	deleteAccountSettingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DeleteAccountSettingOutput
	}
	DeleteAccountSettingWithContextStub        func(context.Context, *ecs.DeleteAccountSettingInput, ...request.Option) (*ecs.DeleteAccountSettingOutput, error)
	deleteAccountSettingWithContextMutex       sync.RWMutex
	deleteAccountSettingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DeleteAccountSettingInput
		arg3 []request.Option
	}
	deleteAccountSettingWithContextReturns struct {
		result1 *ecs.DeleteAccountSettingOutput
		result2 error
	}
	deleteAccountSettingWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DeleteAccountSettingOutput
		result2 error
	}
	DeleteAttributesStub        func(*ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error)
	deleteAttributesMutex       sync.RWMutex
	deleteAttributesArgsForCall []struct {
		arg1 *ecs.DeleteAttributesInput
	}
	deleteAttributesReturns struct {
		result1 *ecs.DeleteAttributesOutput
		result2 error
	}
	deleteAttributesReturnsOnCall map[int]struct {
		result1 *ecs.DeleteAttributesOutput
		result2 error
	}
	DeleteAttributesRequestStub        func(*ecs.DeleteAttributesInput) (*request.Request, *ecs.DeleteAttributesOutput)
	deleteAttributesRequestMutex       sync.RWMutex
	deleteAttributesRequestArgsForCall []struct {
		arg1 *ecs.DeleteAttributesInput
	}
	deleteAttributesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DeleteAttributesOutput
	}
	deleteAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DeleteAttributesOutput
	}
	DeleteAttributesWithContextStub        func(context.Context, *ecs.DeleteAttributesInput, ...request.Option) (*ecs.DeleteAttributesOutput, error)
	deleteAttributesWithContextMutex       sync.RWMutex
	deleteAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DeleteAttributesInput
		arg3 []request.Option
	}
	deleteAttributesWithContextReturns struct {
		result1 *ecs.DeleteAttributesOutput
		result2 error
	}
	deleteAttributesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DeleteAttributesOutput
		result2 error
	}
	DeleteCapacityProviderStub        func(*ecs.DeleteCapacityProviderInput) (*ecs.DeleteCapacityProviderOutput, error)
	deleteCapacityProviderMutex       sync.RWMutex
	deleteCapacityProviderArgsForCall []struct {
		arg1 *ecs.DeleteCapacityProviderInput
	}
	deleteCapacityProviderReturns struct {
		result1 *ecs.DeleteCapacityProviderOutput
		result2 error
	}
	deleteCapacityProviderReturnsOnCall map[int]struct {
		result1 *ecs.DeleteCapacityProviderOutput
		result2 error
	}
	DeleteCapacityProviderRequestStub        func(*ecs.DeleteCapacityProviderInput) (*request.Request, *ecs.DeleteCapacityProviderOutput)
	deleteCapacityProviderRequestMutex       sync.RWMutex
	deleteCapacityProviderRequestArgsForCall []struct {
		arg1 *ecs.DeleteCapacityProviderInput
	}
	deleteCapacityProviderRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DeleteCapacityProviderOutput
	}
	deleteCapacityProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DeleteCapacityProviderOutput
	}
	DeleteCapacityProviderWithContextStub        func(context.Context, *ecs.DeleteCapacityProviderInput, ...request.Option) (*ecs.DeleteCapacityProviderOutput, error)
	deleteCapacityProviderWithContextMutex       sync.RWMutex
	deleteCapacityProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DeleteCapacityProviderInput
		arg3 []request.Option
	}
	deleteCapacityProviderWithContextReturns struct {
		result1 *ecs.DeleteCapacityProviderOutput
		result2 error
	}
	deleteCapacityProviderWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DeleteCapacityProviderOutput
		result2 error
	}
	DeleteClusterStub        func(*ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error)
	deleteClusterMutex       sync.RWMutex
	deleteClusterArgsForCall []struct {
		arg1 *ecs.DeleteClusterInput
	}
	deleteClusterReturns struct {
		result1 *ecs.DeleteClusterOutput
		result2 error
	}
	deleteClusterReturnsOnCall map[int]struct {
		result1 *ecs.DeleteClusterOutput
		result2 error
	}
	DeleteClusterRequestStub        func(*ecs.DeleteClusterInput) (*request.Request, *ecs.DeleteClusterOutput)
	deleteClusterRequestMutex       sync.RWMutex
	deleteClusterRequestArgsForCall []struct {
		arg1 *ecs.DeleteClusterInput
	}
	deleteClusterRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DeleteClusterOutput
	}
	deleteClusterRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DeleteClusterOutput
	}
	DeleteClusterWithContextStub        func(context.Context, *ecs.DeleteClusterInput, ...request.Option) (*ecs.DeleteClusterOutput, error)
	deleteClusterWithContextMutex       sync.RWMutex
	deleteClusterWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DeleteClusterInput
		arg3 []request.Option
	}
	deleteClusterWithContextReturns struct {
		result1 *ecs.DeleteClusterOutput
		result2 error
	}
	deleteClusterWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DeleteClusterOutput
		result2 error
	}
	DeleteServiceStub        func(*ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error)
	deleteServiceMutex       sync.RWMutex
	deleteServiceArgsForCall []struct {
		arg1 *ecs.DeleteServiceInput
	}
	deleteServiceReturns struct {
		result1 *ecs.DeleteServiceOutput
		result2 error
	}
	deleteServiceReturnsOnCall map[int]struct {
		result1 *ecs.DeleteServiceOutput
		result2 error
	}
	DeleteServiceRequestStub        func(*ecs.DeleteServiceInput) (*request.Request, *ecs.DeleteServiceOutput)
	deleteServiceRequestMutex       sync.RWMutex
	deleteServiceRequestArgsForCall []struct {
		arg1 *ecs.DeleteServiceInput
	}
	deleteServiceRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DeleteServiceOutput
	}
	deleteServiceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DeleteServiceOutput
	}
	DeleteServiceWithContextStub        func(context.Context, *ecs.DeleteServiceInput, ...request.Option) (*ecs.DeleteServiceOutput, error)
	deleteServiceWithContextMutex       sync.RWMutex
	deleteServiceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DeleteServiceInput
		arg3 []request.Option
	}
	deleteServiceWithContextReturns struct {
		result1 *ecs.DeleteServiceOutput
		result2 error
	}
	deleteServiceWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DeleteServiceOutput
		result2 error
	}
	DeleteTaskSetStub        func(*ecs.DeleteTaskSetInput) (*ecs.DeleteTaskSetOutput, error)
	deleteTaskSetMutex       sync.RWMutex
	deleteTaskSetArgsForCall []struct {
		arg1 *ecs.DeleteTaskSetInput
	}
	deleteTaskSetReturns struct {
		result1 *ecs.DeleteTaskSetOutput
		result2 error
	}
	deleteTaskSetReturnsOnCall map[int]struct {
		result1 *ecs.DeleteTaskSetOutput
		result2 error
	}
	DeleteTaskSetRequestStub        func(*ecs.DeleteTaskSetInput) (*request.Request, *ecs.DeleteTaskSetOutput)
	deleteTaskSetRequestMutex       sync.RWMutex
	deleteTaskSetRequestArgsForCall []struct {
		arg1 *ecs.DeleteTaskSetInput
	}
	deleteTaskSetRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DeleteTaskSetOutput
	}
	deleteTaskSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DeleteTaskSetOutput
	}
	DeleteTaskSetWithContextStub        func(context.Context, *ecs.DeleteTaskSetInput, ...request.Option) (*ecs.DeleteTaskSetOutput, error)
	deleteTaskSetWithContextMutex       sync.RWMutex
	deleteTaskSetWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DeleteTaskSetInput
		arg3 []request.Option
	}
	deleteTaskSetWithContextReturns struct {
		result1 *ecs.DeleteTaskSetOutput
		result2 error
	}
	deleteTaskSetWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DeleteTaskSetOutput
		result2 error
	}
	DeregisterContainerInstanceStub        func(*ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error)
	deregisterContainerInstanceMutex       sync.RWMutex
	deregisterContainerInstanceArgsForCall []struct {
		arg1 *ecs.DeregisterContainerInstanceInput
	}
	deregisterContainerInstanceReturns struct {
		result1 *ecs.DeregisterContainerInstanceOutput
		result2 error
	}
	deregisterContainerInstanceReturnsOnCall map[int]struct {
		result1 *ecs.DeregisterContainerInstanceOutput
		result2 error
	}
	DeregisterContainerInstanceRequestStub        func(*ecs.DeregisterContainerInstanceInput) (*request.Request, *ecs.DeregisterContainerInstanceOutput)
	deregisterContainerInstanceRequestMutex       sync.RWMutex
	deregisterContainerInstanceRequestArgsForCall []struct {
		arg1 *ecs.DeregisterContainerInstanceInput
	}
	deregisterContainerInstanceRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DeregisterContainerInstanceOutput
	}
	deregisterContainerInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DeregisterContainerInstanceOutput
	}
	DeregisterContainerInstanceWithContextStub        func(context.Context, *ecs.DeregisterContainerInstanceInput, ...request.Option) (*ecs.DeregisterContainerInstanceOutput, error)
	deregisterContainerInstanceWithContextMutex       sync.RWMutex
	deregisterContainerInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DeregisterContainerInstanceInput
		arg3 []request.Option
	}
	deregisterContainerInstanceWithContextReturns struct {
		result1 *ecs.DeregisterContainerInstanceOutput
		result2 error
	}
	deregisterContainerInstanceWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DeregisterContainerInstanceOutput
		result2 error
	}
	DeregisterTaskDefinitionStub        func(*ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error)
	deregisterTaskDefinitionMutex       sync.RWMutex
	deregisterTaskDefinitionArgsForCall []struct {
		arg1 *ecs.DeregisterTaskDefinitionInput
	}
	deregisterTaskDefinitionReturns struct {
		result1 *ecs.DeregisterTaskDefinitionOutput
		result2 error
	}
	deregisterTaskDefinitionReturnsOnCall map[int]struct {
		result1 *ecs.DeregisterTaskDefinitionOutput
		result2 error
	}
	DeregisterTaskDefinitionRequestStub        func(*ecs.DeregisterTaskDefinitionInput) (*request.Request, *ecs.DeregisterTaskDefinitionOutput)
	deregisterTaskDefinitionRequestMutex       sync.RWMutex
	deregisterTaskDefinitionRequestArgsForCall []struct {
		arg1 *ecs.DeregisterTaskDefinitionInput
	}
	deregisterTaskDefinitionRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DeregisterTaskDefinitionOutput
	}
	deregisterTaskDefinitionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DeregisterTaskDefinitionOutput
	}
	DeregisterTaskDefinitionWithContextStub        func(context.Context, *ecs.DeregisterTaskDefinitionInput, ...request.Option) (*ecs.DeregisterTaskDefinitionOutput, error)
	deregisterTaskDefinitionWithContextMutex       sync.RWMutex
	deregisterTaskDefinitionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DeregisterTaskDefinitionInput
		arg3 []request.Option
	}
	deregisterTaskDefinitionWithContextReturns struct {
		result1 *ecs.DeregisterTaskDefinitionOutput
		result2 error
	}
	deregisterTaskDefinitionWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DeregisterTaskDefinitionOutput
		result2 error
	}
	DescribeCapacityProvidersStub        func(*ecs.DescribeCapacityProvidersInput) (*ecs.DescribeCapacityProvidersOutput, error)
	describeCapacityProvidersMutex       sync.RWMutex
	describeCapacityProvidersArgsForCall []struct {
		arg1 *ecs.DescribeCapacityProvidersInput
	}
	describeCapacityProvidersReturns struct {
		result1 *ecs.DescribeCapacityProvidersOutput
		result2 error
	}
	describeCapacityProvidersReturnsOnCall map[int]struct {
		result1 *ecs.DescribeCapacityProvidersOutput
		result2 error
	}
	DescribeCapacityProvidersRequestStub        func(*ecs.DescribeCapacityProvidersInput) (*request.Request, *ecs.DescribeCapacityProvidersOutput)
	describeCapacityProvidersRequestMutex       sync.RWMutex
	describeCapacityProvidersRequestArgsForCall []struct {
		arg1 *ecs.DescribeCapacityProvidersInput
	}
	describeCapacityProvidersRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DescribeCapacityProvidersOutput
	}
	describeCapacityProvidersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DescribeCapacityProvidersOutput
	}
	DescribeCapacityProvidersWithContextStub        func(context.Context, *ecs.DescribeCapacityProvidersInput, ...request.Option) (*ecs.DescribeCapacityProvidersOutput, error)
	describeCapacityProvidersWithContextMutex       sync.RWMutex
	describeCapacityProvidersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeCapacityProvidersInput
		arg3 []request.Option
	}
	describeCapacityProvidersWithContextReturns struct {
		result1 *ecs.DescribeCapacityProvidersOutput
		result2 error
	}
	describeCapacityProvidersWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DescribeCapacityProvidersOutput
		result2 error
	}
	DescribeClustersStub        func(*ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error)
	describeClustersMutex       sync.RWMutex
	describeClustersArgsForCall []struct {
		arg1 *ecs.DescribeClustersInput
	}
	describeClustersReturns struct {
		result1 *ecs.DescribeClustersOutput
		result2 error
	}
	describeClustersReturnsOnCall map[int]struct {
		result1 *ecs.DescribeClustersOutput
		result2 error
	}
	DescribeClustersRequestStub        func(*ecs.DescribeClustersInput) (*request.Request, *ecs.DescribeClustersOutput)
	describeClustersRequestMutex       sync.RWMutex
	describeClustersRequestArgsForCall []struct {
		arg1 *ecs.DescribeClustersInput
	}
	describeClustersRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DescribeClustersOutput
	}
	describeClustersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DescribeClustersOutput
	}
	DescribeClustersWithContextStub        func(context.Context, *ecs.DescribeClustersInput, ...request.Option) (*ecs.DescribeClustersOutput, error)
	describeClustersWithContextMutex       sync.RWMutex
	describeClustersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeClustersInput
		arg3 []request.Option
	}
	describeClustersWithContextReturns struct {
		result1 *ecs.DescribeClustersOutput
		result2 error
	}
	describeClustersWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DescribeClustersOutput
		result2 error
	}
	DescribeContainerInstancesStub        func(*ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error)
	describeContainerInstancesMutex       sync.RWMutex
	describeContainerInstancesArgsForCall []struct {
		arg1 *ecs.DescribeContainerInstancesInput
	}
	describeContainerInstancesReturns struct {
		result1 *ecs.DescribeContainerInstancesOutput
		result2 error
	}
	describeContainerInstancesReturnsOnCall map[int]struct {
		result1 *ecs.DescribeContainerInstancesOutput
		result2 error
	}
	DescribeContainerInstancesRequestStub        func(*ecs.DescribeContainerInstancesInput) (*request.Request, *ecs.DescribeContainerInstancesOutput)
	describeContainerInstancesRequestMutex       sync.RWMutex
	describeContainerInstancesRequestArgsForCall []struct {
		arg1 *ecs.DescribeContainerInstancesInput
	}
	describeContainerInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DescribeContainerInstancesOutput
	}
	describeContainerInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DescribeContainerInstancesOutput
	}
	DescribeContainerInstancesWithContextStub        func(context.Context, *ecs.DescribeContainerInstancesInput, ...request.Option) (*ecs.DescribeContainerInstancesOutput, error)
	describeContainerInstancesWithContextMutex       sync.RWMutex
	describeContainerInstancesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeContainerInstancesInput
		arg3 []request.Option
	}
	describeContainerInstancesWithContextReturns struct {
		result1 *ecs.DescribeContainerInstancesOutput
		result2 error
	}
	describeContainerInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DescribeContainerInstancesOutput
		result2 error
	}
	DescribeServicesStub        func(*ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error)
	describeServicesMutex       sync.RWMutex
	describeServicesArgsForCall []struct {
		arg1 *ecs.DescribeServicesInput
	}
	describeServicesReturns struct {
		result1 *ecs.DescribeServicesOutput
		result2 error
	}
	describeServicesReturnsOnCall map[int]struct {
		result1 *ecs.DescribeServicesOutput
		result2 error
	}
	DescribeServicesRequestStub        func(*ecs.DescribeServicesInput) (*request.Request, *ecs.DescribeServicesOutput)
	describeServicesRequestMutex       sync.RWMutex
	describeServicesRequestArgsForCall []struct {
		arg1 *ecs.DescribeServicesInput
	}
	describeServicesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DescribeServicesOutput
	}
	describeServicesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DescribeServicesOutput
	}
	DescribeServicesWithContextStub        func(context.Context, *ecs.DescribeServicesInput, ...request.Option) (*ecs.DescribeServicesOutput, error)
	describeServicesWithContextMutex       sync.RWMutex
	describeServicesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeServicesInput
		arg3 []request.Option
	}
	describeServicesWithContextReturns struct {
		result1 *ecs.DescribeServicesOutput
		result2 error
	}
	describeServicesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DescribeServicesOutput
		result2 error
	}
	DescribeTaskDefinitionStub        func(*ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error)
	describeTaskDefinitionMutex       sync.RWMutex
	describeTaskDefinitionArgsForCall []struct {
		arg1 *ecs.DescribeTaskDefinitionInput
	}
	describeTaskDefinitionReturns struct {
		result1 *ecs.DescribeTaskDefinitionOutput
		result2 error
	}
	describeTaskDefinitionReturnsOnCall map[int]struct {
		result1 *ecs.DescribeTaskDefinitionOutput
		result2 error
	}
	DescribeTaskDefinitionRequestStub        func(*ecs.DescribeTaskDefinitionInput) (*request.Request, *ecs.DescribeTaskDefinitionOutput)
	describeTaskDefinitionRequestMutex       sync.RWMutex
	describeTaskDefinitionRequestArgsForCall []struct {
		arg1 *ecs.DescribeTaskDefinitionInput
	}
	describeTaskDefinitionRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DescribeTaskDefinitionOutput
	}
	describeTaskDefinitionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DescribeTaskDefinitionOutput
	}
	DescribeTaskDefinitionWithContextStub        func(context.Context, *ecs.DescribeTaskDefinitionInput, ...request.Option) (*ecs.DescribeTaskDefinitionOutput, error)
	describeTaskDefinitionWithContextMutex       sync.RWMutex
	describeTaskDefinitionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeTaskDefinitionInput
		arg3 []request.Option
	}
	describeTaskDefinitionWithContextReturns struct {
		result1 *ecs.DescribeTaskDefinitionOutput
		result2 error
	}
	describeTaskDefinitionWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DescribeTaskDefinitionOutput
		result2 error
	}
	DescribeTaskSetsStub        func(*ecs.DescribeTaskSetsInput) (*ecs.DescribeTaskSetsOutput, error)
	describeTaskSetsMutex       sync.RWMutex
	describeTaskSetsArgsForCall []struct {
		arg1 *ecs.DescribeTaskSetsInput
	}
	describeTaskSetsReturns struct {
		result1 *ecs.DescribeTaskSetsOutput
		result2 error
	}
	describeTaskSetsReturnsOnCall map[int]struct {
		result1 *ecs.DescribeTaskSetsOutput
		result2 error
	}
	DescribeTaskSetsRequestStub        func(*ecs.DescribeTaskSetsInput) (*request.Request, *ecs.DescribeTaskSetsOutput)
	describeTaskSetsRequestMutex       sync.RWMutex
	describeTaskSetsRequestArgsForCall []struct {
		arg1 *ecs.DescribeTaskSetsInput
	}
	describeTaskSetsRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DescribeTaskSetsOutput
	}
	describeTaskSetsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DescribeTaskSetsOutput
	}
	DescribeTaskSetsWithContextStub        func(context.Context, *ecs.DescribeTaskSetsInput, ...request.Option) (*ecs.DescribeTaskSetsOutput, error)
	describeTaskSetsWithContextMutex       sync.RWMutex
	describeTaskSetsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeTaskSetsInput
		arg3 []request.Option
	}
	describeTaskSetsWithContextReturns struct {
		result1 *ecs.DescribeTaskSetsOutput
		result2 error
	}
	describeTaskSetsWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DescribeTaskSetsOutput
		result2 error
	}
	DescribeTasksStub        func(*ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error)
	describeTasksMutex       sync.RWMutex
	describeTasksArgsForCall []struct {
		arg1 *ecs.DescribeTasksInput
	}
	describeTasksReturns struct {
		result1 *ecs.DescribeTasksOutput
		result2 error
	}
	describeTasksReturnsOnCall map[int]struct {
		result1 *ecs.DescribeTasksOutput
		result2 error
	}
	DescribeTasksRequestStub        func(*ecs.DescribeTasksInput) (*request.Request, *ecs.DescribeTasksOutput)
	describeTasksRequestMutex       sync.RWMutex
	describeTasksRequestArgsForCall []struct {
		arg1 *ecs.DescribeTasksInput
	}
	describeTasksRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DescribeTasksOutput
	}
	describeTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DescribeTasksOutput
	}
	DescribeTasksWithContextStub        func(context.Context, *ecs.DescribeTasksInput, ...request.Option) (*ecs.DescribeTasksOutput, error)
	describeTasksWithContextMutex       sync.RWMutex
	describeTasksWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeTasksInput
		arg3 []request.Option
	}
	describeTasksWithContextReturns struct {
		result1 *ecs.DescribeTasksOutput
		result2 error
	}
	describeTasksWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DescribeTasksOutput
		result2 error
	}
	DiscoverPollEndpointStub        func(*ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error)
	discoverPollEndpointMutex       sync.RWMutex
	discoverPollEndpointArgsForCall []struct {
		arg1 *ecs.DiscoverPollEndpointInput
	}
	discoverPollEndpointReturns struct {
		result1 *ecs.DiscoverPollEndpointOutput
		result2 error
	}
	discoverPollEndpointReturnsOnCall map[int]struct {
		result1 *ecs.DiscoverPollEndpointOutput
		result2 error
	}
	DiscoverPollEndpointRequestStub        func(*ecs.DiscoverPollEndpointInput) (*request.Request, *ecs.DiscoverPollEndpointOutput)
	discoverPollEndpointRequestMutex       sync.RWMutex
	discoverPollEndpointRequestArgsForCall []struct {
		arg1 *ecs.DiscoverPollEndpointInput
	}
	discoverPollEndpointRequestReturns struct {
		result1 *request.Request
		result2 *ecs.DiscoverPollEndpointOutput
	}
	discoverPollEndpointRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.DiscoverPollEndpointOutput
	}
	DiscoverPollEndpointWithContextStub        func(context.Context, *ecs.DiscoverPollEndpointInput, ...request.Option) (*ecs.DiscoverPollEndpointOutput, error)
	discoverPollEndpointWithContextMutex       sync.RWMutex
	discoverPollEndpointWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DiscoverPollEndpointInput
		arg3 []request.Option
	}
	discoverPollEndpointWithContextReturns struct {
		result1 *ecs.DiscoverPollEndpointOutput
		result2 error
	}
	discoverPollEndpointWithContextReturnsOnCall map[int]struct {
		result1 *ecs.DiscoverPollEndpointOutput
		result2 error
	}
	ListAccountSettingsStub        func(*ecs.ListAccountSettingsInput) (*ecs.ListAccountSettingsOutput, error)
	listAccountSettingsMutex       sync.RWMutex
	listAccountSettingsArgsForCall []struct {
		arg1 *ecs.ListAccountSettingsInput
	}
	listAccountSettingsReturns struct {
		result1 *ecs.ListAccountSettingsOutput
		result2 error
	}
	listAccountSettingsReturnsOnCall map[int]struct {
		result1 *ecs.ListAccountSettingsOutput
		result2 error
	}
	ListAccountSettingsPagesStub        func(*ecs.ListAccountSettingsInput, func(*ecs.ListAccountSettingsOutput, bool) bool) error
	listAccountSettingsPagesMutex       sync.RWMutex
	listAccountSettingsPagesArgsForCall []struct {
		arg1 *ecs.ListAccountSettingsInput
		arg2 func(*ecs.ListAccountSettingsOutput, bool) bool
	}
	listAccountSettingsPagesReturns struct {
		result1 error
	}
	listAccountSettingsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAccountSettingsPagesWithContextStub        func(context.Context, *ecs.ListAccountSettingsInput, func(*ecs.ListAccountSettingsOutput, bool) bool, ...request.Option) error
	listAccountSettingsPagesWithContextMutex       sync.RWMutex
	listAccountSettingsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListAccountSettingsInput
		arg3 func(*ecs.ListAccountSettingsOutput, bool) bool
		arg4 []request.Option
	}
	listAccountSettingsPagesWithContextReturns struct {
		result1 error
	}
	listAccountSettingsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAccountSettingsRequestStub        func(*ecs.ListAccountSettingsInput) (*request.Request, *ecs.ListAccountSettingsOutput)
	listAccountSettingsRequestMutex       sync.RWMutex
	listAccountSettingsRequestArgsForCall []struct {
		arg1 *ecs.ListAccountSettingsInput
	}
	listAccountSettingsRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListAccountSettingsOutput
	}
	listAccountSettingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListAccountSettingsOutput
	}
	ListAccountSettingsWithContextStub        func(context.Context, *ecs.ListAccountSettingsInput, ...request.Option) (*ecs.ListAccountSettingsOutput, error)
	listAccountSettingsWithContextMutex       sync.RWMutex
	listAccountSettingsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListAccountSettingsInput
		arg3 []request.Option
	}
	listAccountSettingsWithContextReturns struct {
		result1 *ecs.ListAccountSettingsOutput
		result2 error
	}
	listAccountSettingsWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListAccountSettingsOutput
		result2 error
	}
	ListAttributesStub        func(*ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error)
	listAttributesMutex       sync.RWMutex
	listAttributesArgsForCall []struct {
		arg1 *ecs.ListAttributesInput
	}
	listAttributesReturns struct {
		result1 *ecs.ListAttributesOutput
		result2 error
	}
	listAttributesReturnsOnCall map[int]struct {
		result1 *ecs.ListAttributesOutput
		result2 error
	}
	ListAttributesPagesStub        func(*ecs.ListAttributesInput, func(*ecs.ListAttributesOutput, bool) bool) error
	listAttributesPagesMutex       sync.RWMutex
	listAttributesPagesArgsForCall []struct {
		arg1 *ecs.ListAttributesInput
		arg2 func(*ecs.ListAttributesOutput, bool) bool
	}
	listAttributesPagesReturns struct {
		result1 error
	}
	listAttributesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttributesPagesWithContextStub        func(context.Context, *ecs.ListAttributesInput, func(*ecs.ListAttributesOutput, bool) bool, ...request.Option) error
	listAttributesPagesWithContextMutex       sync.RWMutex
	listAttributesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListAttributesInput
		arg3 func(*ecs.ListAttributesOutput, bool) bool
		arg4 []request.Option
	}
	listAttributesPagesWithContextReturns struct {
		result1 error
	}
	listAttributesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListAttributesRequestStub        func(*ecs.ListAttributesInput) (*request.Request, *ecs.ListAttributesOutput)
	listAttributesRequestMutex       sync.RWMutex
	listAttributesRequestArgsForCall []struct {
		arg1 *ecs.ListAttributesInput
	}
	listAttributesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListAttributesOutput
	}
	listAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListAttributesOutput
	}
	ListAttributesWithContextStub        func(context.Context, *ecs.ListAttributesInput, ...request.Option) (*ecs.ListAttributesOutput, error)
	listAttributesWithContextMutex       sync.RWMutex
	listAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListAttributesInput
		arg3 []request.Option
	}
	listAttributesWithContextReturns struct {
		result1 *ecs.ListAttributesOutput
		result2 error
	}
	listAttributesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListAttributesOutput
		result2 error
	}
	ListClustersStub        func(*ecs.ListClustersInput) (*ecs.ListClustersOutput, error)
	listClustersMutex       sync.RWMutex
	listClustersArgsForCall []struct {
		arg1 *ecs.ListClustersInput
	}
	listClustersReturns struct {
		result1 *ecs.ListClustersOutput
		result2 error
	}
	listClustersReturnsOnCall map[int]struct {
		result1 *ecs.ListClustersOutput
		result2 error
	}
	ListClustersPagesStub        func(*ecs.ListClustersInput, func(*ecs.ListClustersOutput, bool) bool) error
	listClustersPagesMutex       sync.RWMutex
	listClustersPagesArgsForCall []struct {
		arg1 *ecs.ListClustersInput
		arg2 func(*ecs.ListClustersOutput, bool) bool
	}
	listClustersPagesReturns struct {
		result1 error
	}
	listClustersPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListClustersPagesWithContextStub        func(context.Context, *ecs.ListClustersInput, func(*ecs.ListClustersOutput, bool) bool, ...request.Option) error
	listClustersPagesWithContextMutex       sync.RWMutex
	listClustersPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListClustersInput
		arg3 func(*ecs.ListClustersOutput, bool) bool
		arg4 []request.Option
	}
	listClustersPagesWithContextReturns struct {
		result1 error
	}
	listClustersPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListClustersRequestStub        func(*ecs.ListClustersInput) (*request.Request, *ecs.ListClustersOutput)
	listClustersRequestMutex       sync.RWMutex
	listClustersRequestArgsForCall []struct {
		arg1 *ecs.ListClustersInput
	}
	listClustersRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListClustersOutput
	}
	listClustersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListClustersOutput
	}
	ListClustersWithContextStub        func(context.Context, *ecs.ListClustersInput, ...request.Option) (*ecs.ListClustersOutput, error)
	listClustersWithContextMutex       sync.RWMutex
	listClustersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListClustersInput
		arg3 []request.Option
	}
	listClustersWithContextReturns struct {
		result1 *ecs.ListClustersOutput
		result2 error
	}
	listClustersWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListClustersOutput
		result2 error
	}
	ListContainerInstancesStub        func(*ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error)
	listContainerInstancesMutex       sync.RWMutex
	listContainerInstancesArgsForCall []struct {
		arg1 *ecs.ListContainerInstancesInput
	}
	listContainerInstancesReturns struct {
		result1 *ecs.ListContainerInstancesOutput
		result2 error
	}
	listContainerInstancesReturnsOnCall map[int]struct {
		result1 *ecs.ListContainerInstancesOutput
		result2 error
	}
	ListContainerInstancesPagesStub        func(*ecs.ListContainerInstancesInput, func(*ecs.ListContainerInstancesOutput, bool) bool) error
	listContainerInstancesPagesMutex       sync.RWMutex
	listContainerInstancesPagesArgsForCall []struct {
		arg1 *ecs.ListContainerInstancesInput
		arg2 func(*ecs.ListContainerInstancesOutput, bool) bool
	}
	listContainerInstancesPagesReturns struct {
		result1 error
	}
	listContainerInstancesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListContainerInstancesPagesWithContextStub        func(context.Context, *ecs.ListContainerInstancesInput, func(*ecs.ListContainerInstancesOutput, bool) bool, ...request.Option) error
	listContainerInstancesPagesWithContextMutex       sync.RWMutex
	listContainerInstancesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListContainerInstancesInput
		arg3 func(*ecs.ListContainerInstancesOutput, bool) bool
		arg4 []request.Option
	}
	listContainerInstancesPagesWithContextReturns struct {
		result1 error
	}
	listContainerInstancesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListContainerInstancesRequestStub        func(*ecs.ListContainerInstancesInput) (*request.Request, *ecs.ListContainerInstancesOutput)
	listContainerInstancesRequestMutex       sync.RWMutex
	listContainerInstancesRequestArgsForCall []struct {
		arg1 *ecs.ListContainerInstancesInput
	}
	listContainerInstancesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListContainerInstancesOutput
	}
	listContainerInstancesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListContainerInstancesOutput
	}
	ListContainerInstancesWithContextStub        func(context.Context, *ecs.ListContainerInstancesInput, ...request.Option) (*ecs.ListContainerInstancesOutput, error)
	listContainerInstancesWithContextMutex       sync.RWMutex
	listContainerInstancesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListContainerInstancesInput
		arg3 []request.Option
	}
	listContainerInstancesWithContextReturns struct {
		result1 *ecs.ListContainerInstancesOutput
		result2 error
	}
	listContainerInstancesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListContainerInstancesOutput
		result2 error
	}
	ListServicesStub        func(*ecs.ListServicesInput) (*ecs.ListServicesOutput, error)
	listServicesMutex       sync.RWMutex
	listServicesArgsForCall []struct {
		arg1 *ecs.ListServicesInput
	}
	listServicesReturns struct {
		result1 *ecs.ListServicesOutput
		result2 error
	}
	listServicesReturnsOnCall map[int]struct {
		result1 *ecs.ListServicesOutput
		result2 error
	}
	ListServicesPagesStub        func(*ecs.ListServicesInput, func(*ecs.ListServicesOutput, bool) bool) error
	listServicesPagesMutex       sync.RWMutex
	listServicesPagesArgsForCall []struct {
		arg1 *ecs.ListServicesInput
		arg2 func(*ecs.ListServicesOutput, bool) bool
	}
	listServicesPagesReturns struct {
		result1 error
	}
	listServicesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListServicesPagesWithContextStub        func(context.Context, *ecs.ListServicesInput, func(*ecs.ListServicesOutput, bool) bool, ...request.Option) error
	listServicesPagesWithContextMutex       sync.RWMutex
	listServicesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListServicesInput
		arg3 func(*ecs.ListServicesOutput, bool) bool
		arg4 []request.Option
	}
	listServicesPagesWithContextReturns struct {
		result1 error
	}
	listServicesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListServicesRequestStub        func(*ecs.ListServicesInput) (*request.Request, *ecs.ListServicesOutput)
	listServicesRequestMutex       sync.RWMutex
	listServicesRequestArgsForCall []struct {
		arg1 *ecs.ListServicesInput
	}
	listServicesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListServicesOutput
	}
	listServicesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListServicesOutput
	}
	ListServicesWithContextStub        func(context.Context, *ecs.ListServicesInput, ...request.Option) (*ecs.ListServicesOutput, error)
	listServicesWithContextMutex       sync.RWMutex
	listServicesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListServicesInput
		arg3 []request.Option
	}
	listServicesWithContextReturns struct {
		result1 *ecs.ListServicesOutput
		result2 error
	}
	listServicesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListServicesOutput
		result2 error
	}
	ListTagsForResourceStub        func(*ecs.ListTagsForResourceInput) (*ecs.ListTagsForResourceOutput, error)
	listTagsForResourceMutex       sync.RWMutex
	listTagsForResourceArgsForCall []struct {
		arg1 *ecs.ListTagsForResourceInput
	}
	listTagsForResourceReturns struct {
		result1 *ecs.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceReturnsOnCall map[int]struct {
		result1 *ecs.ListTagsForResourceOutput
		result2 error
	}
	ListTagsForResourceRequestStub        func(*ecs.ListTagsForResourceInput) (*request.Request, *ecs.ListTagsForResourceOutput)
	listTagsForResourceRequestMutex       sync.RWMutex
	listTagsForResourceRequestArgsForCall []struct {
		arg1 *ecs.ListTagsForResourceInput
	}
	listTagsForResourceRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListTagsForResourceOutput
	}
	listTagsForResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListTagsForResourceOutput
	}
	ListTagsForResourceWithContextStub        func(context.Context, *ecs.ListTagsForResourceInput, ...request.Option) (*ecs.ListTagsForResourceOutput, error)
	listTagsForResourceWithContextMutex       sync.RWMutex
	listTagsForResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListTagsForResourceInput
		arg3 []request.Option
	}
	listTagsForResourceWithContextReturns struct {
		result1 *ecs.ListTagsForResourceOutput
		result2 error
	}
	listTagsForResourceWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListTagsForResourceOutput
		result2 error
	}
	ListTaskDefinitionFamiliesStub        func(*ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error)
	listTaskDefinitionFamiliesMutex       sync.RWMutex
	listTaskDefinitionFamiliesArgsForCall []struct {
		arg1 *ecs.ListTaskDefinitionFamiliesInput
	}
	listTaskDefinitionFamiliesReturns struct {
		result1 *ecs.ListTaskDefinitionFamiliesOutput
		result2 error
	}
	listTaskDefinitionFamiliesReturnsOnCall map[int]struct {
		result1 *ecs.ListTaskDefinitionFamiliesOutput
		result2 error
	}
	ListTaskDefinitionFamiliesPagesStub        func(*ecs.ListTaskDefinitionFamiliesInput, func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool) error
	listTaskDefinitionFamiliesPagesMutex       sync.RWMutex
	listTaskDefinitionFamiliesPagesArgsForCall []struct {
		arg1 *ecs.ListTaskDefinitionFamiliesInput
		arg2 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool
	}
	listTaskDefinitionFamiliesPagesReturns struct {
		result1 error
	}
	listTaskDefinitionFamiliesPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListTaskDefinitionFamiliesPagesWithContextStub        func(context.Context, *ecs.ListTaskDefinitionFamiliesInput, func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool, ...request.Option) error
	listTaskDefinitionFamiliesPagesWithContextMutex       sync.RWMutex
	listTaskDefinitionFamiliesPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListTaskDefinitionFamiliesInput
		arg3 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool
		arg4 []request.Option
	}
	listTaskDefinitionFamiliesPagesWithContextReturns struct {
		result1 error
	}
	listTaskDefinitionFamiliesPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListTaskDefinitionFamiliesRequestStub        func(*ecs.ListTaskDefinitionFamiliesInput) (*request.Request, *ecs.ListTaskDefinitionFamiliesOutput)
	listTaskDefinitionFamiliesRequestMutex       sync.RWMutex
	listTaskDefinitionFamiliesRequestArgsForCall []struct {
		arg1 *ecs.ListTaskDefinitionFamiliesInput
	}
	listTaskDefinitionFamiliesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListTaskDefinitionFamiliesOutput
	}
	listTaskDefinitionFamiliesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListTaskDefinitionFamiliesOutput
	}
	ListTaskDefinitionFamiliesWithContextStub        func(context.Context, *ecs.ListTaskDefinitionFamiliesInput, ...request.Option) (*ecs.ListTaskDefinitionFamiliesOutput, error)
	listTaskDefinitionFamiliesWithContextMutex       sync.RWMutex
	listTaskDefinitionFamiliesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListTaskDefinitionFamiliesInput
		arg3 []request.Option
	}
	listTaskDefinitionFamiliesWithContextReturns struct {
		result1 *ecs.ListTaskDefinitionFamiliesOutput
		result2 error
	}
	listTaskDefinitionFamiliesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListTaskDefinitionFamiliesOutput
		result2 error
	}
	ListTaskDefinitionsStub        func(*ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error)
	listTaskDefinitionsMutex       sync.RWMutex
	listTaskDefinitionsArgsForCall []struct {
		arg1 *ecs.ListTaskDefinitionsInput
	}
	listTaskDefinitionsReturns struct {
		result1 *ecs.ListTaskDefinitionsOutput
		result2 error
	}
	listTaskDefinitionsReturnsOnCall map[int]struct {
		result1 *ecs.ListTaskDefinitionsOutput
		result2 error
	}
	ListTaskDefinitionsPagesStub        func(*ecs.ListTaskDefinitionsInput, func(*ecs.ListTaskDefinitionsOutput, bool) bool) error
	listTaskDefinitionsPagesMutex       sync.RWMutex
	listTaskDefinitionsPagesArgsForCall []struct {
		arg1 *ecs.ListTaskDefinitionsInput
		arg2 func(*ecs.ListTaskDefinitionsOutput, bool) bool
	}
	listTaskDefinitionsPagesReturns struct {
		result1 error
	}
	listTaskDefinitionsPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListTaskDefinitionsPagesWithContextStub        func(context.Context, *ecs.ListTaskDefinitionsInput, func(*ecs.ListTaskDefinitionsOutput, bool) bool, ...request.Option) error
	listTaskDefinitionsPagesWithContextMutex       sync.RWMutex
	listTaskDefinitionsPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListTaskDefinitionsInput
		arg3 func(*ecs.ListTaskDefinitionsOutput, bool) bool
		arg4 []request.Option
	}
	listTaskDefinitionsPagesWithContextReturns struct {
		result1 error
	}
	listTaskDefinitionsPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListTaskDefinitionsRequestStub        func(*ecs.ListTaskDefinitionsInput) (*request.Request, *ecs.ListTaskDefinitionsOutput)
	listTaskDefinitionsRequestMutex       sync.RWMutex
	listTaskDefinitionsRequestArgsForCall []struct {
		arg1 *ecs.ListTaskDefinitionsInput
	}
	listTaskDefinitionsRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListTaskDefinitionsOutput
	}
	listTaskDefinitionsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListTaskDefinitionsOutput
	}
	ListTaskDefinitionsWithContextStub        func(context.Context, *ecs.ListTaskDefinitionsInput, ...request.Option) (*ecs.ListTaskDefinitionsOutput, error)
	listTaskDefinitionsWithContextMutex       sync.RWMutex
	listTaskDefinitionsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListTaskDefinitionsInput
		arg3 []request.Option
	}
	listTaskDefinitionsWithContextReturns struct {
		result1 *ecs.ListTaskDefinitionsOutput
		result2 error
	}
	listTaskDefinitionsWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListTaskDefinitionsOutput
		result2 error
	}
	ListTasksStub        func(*ecs.ListTasksInput) (*ecs.ListTasksOutput, error)
	listTasksMutex       sync.RWMutex
	listTasksArgsForCall []struct {
		arg1 *ecs.ListTasksInput
	}
	listTasksReturns struct {
		result1 *ecs.ListTasksOutput
		result2 error
	}
	listTasksReturnsOnCall map[int]struct {
		result1 *ecs.ListTasksOutput
		result2 error
	}
	ListTasksPagesStub        func(*ecs.ListTasksInput, func(*ecs.ListTasksOutput, bool) bool) error
	listTasksPagesMutex       sync.RWMutex
	listTasksPagesArgsForCall []struct {
		arg1 *ecs.ListTasksInput
		arg2 func(*ecs.ListTasksOutput, bool) bool
	}
	listTasksPagesReturns struct {
		result1 error
	}
	listTasksPagesReturnsOnCall map[int]struct {
		result1 error
	}
	ListTasksPagesWithContextStub        func(context.Context, *ecs.ListTasksInput, func(*ecs.ListTasksOutput, bool) bool, ...request.Option) error
	listTasksPagesWithContextMutex       sync.RWMutex
	listTasksPagesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListTasksInput
		arg3 func(*ecs.ListTasksOutput, bool) bool
		arg4 []request.Option
	}
	listTasksPagesWithContextReturns struct {
		result1 error
	}
	listTasksPagesWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	ListTasksRequestStub        func(*ecs.ListTasksInput) (*request.Request, *ecs.ListTasksOutput)
	listTasksRequestMutex       sync.RWMutex
	listTasksRequestArgsForCall []struct {
		arg1 *ecs.ListTasksInput
	}
	listTasksRequestReturns struct {
		result1 *request.Request
		result2 *ecs.ListTasksOutput
	}
	listTasksRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.ListTasksOutput
	}
	ListTasksWithContextStub        func(context.Context, *ecs.ListTasksInput, ...request.Option) (*ecs.ListTasksOutput, error)
	listTasksWithContextMutex       sync.RWMutex
	listTasksWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.ListTasksInput
		arg3 []request.Option
	}
	listTasksWithContextReturns struct {
		result1 *ecs.ListTasksOutput
		result2 error
	}
	listTasksWithContextReturnsOnCall map[int]struct {
		result1 *ecs.ListTasksOutput
		result2 error
	}
	PutAccountSettingStub        func(*ecs.PutAccountSettingInput) (*ecs.PutAccountSettingOutput, error)
	putAccountSettingMutex       sync.RWMutex
	putAccountSettingArgsForCall []struct {
		arg1 *ecs.PutAccountSettingInput
	}
	putAccountSettingReturns struct {
		result1 *ecs.PutAccountSettingOutput
		result2 error
	}
	putAccountSettingReturnsOnCall map[int]struct {
		result1 *ecs.PutAccountSettingOutput
		result2 error
	}
	PutAccountSettingDefaultStub        func(*ecs.PutAccountSettingDefaultInput) (*ecs.PutAccountSettingDefaultOutput, error)
	putAccountSettingDefaultMutex       sync.RWMutex
	putAccountSettingDefaultArgsForCall []struct {
		arg1 *ecs.PutAccountSettingDefaultInput
	}
	putAccountSettingDefaultReturns struct {
		result1 *ecs.PutAccountSettingDefaultOutput
		result2 error
	}
	putAccountSettingDefaultReturnsOnCall map[int]struct {
		result1 *ecs.PutAccountSettingDefaultOutput
		result2 error
	}
	PutAccountSettingDefaultRequestStub        func(*ecs.PutAccountSettingDefaultInput) (*request.Request, *ecs.PutAccountSettingDefaultOutput)
	putAccountSettingDefaultRequestMutex       sync.RWMutex
	putAccountSettingDefaultRequestArgsForCall []struct {
		arg1 *ecs.PutAccountSettingDefaultInput
	}
	putAccountSettingDefaultRequestReturns struct {
		result1 *request.Request
		result2 *ecs.PutAccountSettingDefaultOutput
	}
	putAccountSettingDefaultRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.PutAccountSettingDefaultOutput
	}
	PutAccountSettingDefaultWithContextStub        func(context.Context, *ecs.PutAccountSettingDefaultInput, ...request.Option) (*ecs.PutAccountSettingDefaultOutput, error)
	putAccountSettingDefaultWithContextMutex       sync.RWMutex
	putAccountSettingDefaultWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.PutAccountSettingDefaultInput
		arg3 []request.Option
	}
	putAccountSettingDefaultWithContextReturns struct {
		result1 *ecs.PutAccountSettingDefaultOutput
		result2 error
	}
	putAccountSettingDefaultWithContextReturnsOnCall map[int]struct {
		result1 *ecs.PutAccountSettingDefaultOutput
		result2 error
	}
	PutAccountSettingRequestStub        func(*ecs.PutAccountSettingInput) (*request.Request, *ecs.PutAccountSettingOutput)
	putAccountSettingRequestMutex       sync.RWMutex
	putAccountSettingRequestArgsForCall []struct {
		arg1 *ecs.PutAccountSettingInput
	}
	putAccountSettingRequestReturns struct {
		result1 *request.Request
		result2 *ecs.PutAccountSettingOutput
	}
	putAccountSettingRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.PutAccountSettingOutput
	}
	PutAccountSettingWithContextStub        func(context.Context, *ecs.PutAccountSettingInput, ...request.Option) (*ecs.PutAccountSettingOutput, error)
	putAccountSettingWithContextMutex       sync.RWMutex
	putAccountSettingWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.PutAccountSettingInput
		arg3 []request.Option
	}
	putAccountSettingWithContextReturns struct {
		result1 *ecs.PutAccountSettingOutput
		result2 error
	}
	putAccountSettingWithContextReturnsOnCall map[int]struct {
		result1 *ecs.PutAccountSettingOutput
		result2 error
	}
	PutAttributesStub        func(*ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error)
	putAttributesMutex       sync.RWMutex
	putAttributesArgsForCall []struct {
		arg1 *ecs.PutAttributesInput
	}
	putAttributesReturns struct {
		result1 *ecs.PutAttributesOutput
		result2 error
	}
	putAttributesReturnsOnCall map[int]struct {
		result1 *ecs.PutAttributesOutput
		result2 error
	}
	PutAttributesRequestStub        func(*ecs.PutAttributesInput) (*request.Request, *ecs.PutAttributesOutput)
	putAttributesRequestMutex       sync.RWMutex
	putAttributesRequestArgsForCall []struct {
		arg1 *ecs.PutAttributesInput
	}
	putAttributesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.PutAttributesOutput
	}
	putAttributesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.PutAttributesOutput
	}
	PutAttributesWithContextStub        func(context.Context, *ecs.PutAttributesInput, ...request.Option) (*ecs.PutAttributesOutput, error)
	putAttributesWithContextMutex       sync.RWMutex
	putAttributesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.PutAttributesInput
		arg3 []request.Option
	}
	putAttributesWithContextReturns struct {
		result1 *ecs.PutAttributesOutput
		result2 error
	}
	putAttributesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.PutAttributesOutput
		result2 error
	}
	PutClusterCapacityProvidersStub        func(*ecs.PutClusterCapacityProvidersInput) (*ecs.PutClusterCapacityProvidersOutput, error)
	putClusterCapacityProvidersMutex       sync.RWMutex
	putClusterCapacityProvidersArgsForCall []struct {
		arg1 *ecs.PutClusterCapacityProvidersInput
	}
	putClusterCapacityProvidersReturns struct {
		result1 *ecs.PutClusterCapacityProvidersOutput
		result2 error
	}
	putClusterCapacityProvidersReturnsOnCall map[int]struct {
		result1 *ecs.PutClusterCapacityProvidersOutput
		result2 error
	}
	PutClusterCapacityProvidersRequestStub        func(*ecs.PutClusterCapacityProvidersInput) (*request.Request, *ecs.PutClusterCapacityProvidersOutput)
	putClusterCapacityProvidersRequestMutex       sync.RWMutex
	putClusterCapacityProvidersRequestArgsForCall []struct {
		arg1 *ecs.PutClusterCapacityProvidersInput
	}
	putClusterCapacityProvidersRequestReturns struct {
		result1 *request.Request
		result2 *ecs.PutClusterCapacityProvidersOutput
	}
	putClusterCapacityProvidersRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.PutClusterCapacityProvidersOutput
	}
	PutClusterCapacityProvidersWithContextStub        func(context.Context, *ecs.PutClusterCapacityProvidersInput, ...request.Option) (*ecs.PutClusterCapacityProvidersOutput, error)
	putClusterCapacityProvidersWithContextMutex       sync.RWMutex
	putClusterCapacityProvidersWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.PutClusterCapacityProvidersInput
		arg3 []request.Option
	}
	putClusterCapacityProvidersWithContextReturns struct {
		result1 *ecs.PutClusterCapacityProvidersOutput
		result2 error
	}
	putClusterCapacityProvidersWithContextReturnsOnCall map[int]struct {
		result1 *ecs.PutClusterCapacityProvidersOutput
		result2 error
	}
	RegisterContainerInstanceStub        func(*ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error)
	registerContainerInstanceMutex       sync.RWMutex
	registerContainerInstanceArgsForCall []struct {
		arg1 *ecs.RegisterContainerInstanceInput
	}
	registerContainerInstanceReturns struct {
		result1 *ecs.RegisterContainerInstanceOutput
		result2 error
	}
	registerContainerInstanceReturnsOnCall map[int]struct {
		result1 *ecs.RegisterContainerInstanceOutput
		result2 error
	}
	RegisterContainerInstanceRequestStub        func(*ecs.RegisterContainerInstanceInput) (*request.Request, *ecs.RegisterContainerInstanceOutput)
	registerContainerInstanceRequestMutex       sync.RWMutex
	registerContainerInstanceRequestArgsForCall []struct {
		arg1 *ecs.RegisterContainerInstanceInput
	}
	registerContainerInstanceRequestReturns struct {
		result1 *request.Request
		result2 *ecs.RegisterContainerInstanceOutput
	}
	registerContainerInstanceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.RegisterContainerInstanceOutput
	}
	RegisterContainerInstanceWithContextStub        func(context.Context, *ecs.RegisterContainerInstanceInput, ...request.Option) (*ecs.RegisterContainerInstanceOutput, error)
	registerContainerInstanceWithContextMutex       sync.RWMutex
	registerContainerInstanceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.RegisterContainerInstanceInput
		arg3 []request.Option
	}
	registerContainerInstanceWithContextReturns struct {
		result1 *ecs.RegisterContainerInstanceOutput
		result2 error
	}
	registerContainerInstanceWithContextReturnsOnCall map[int]struct {
		result1 *ecs.RegisterContainerInstanceOutput
		result2 error
	}
	RegisterTaskDefinitionStub        func(*ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error)
	registerTaskDefinitionMutex       sync.RWMutex
	registerTaskDefinitionArgsForCall []struct {
		arg1 *ecs.RegisterTaskDefinitionInput
	}
	registerTaskDefinitionReturns struct {
		result1 *ecs.RegisterTaskDefinitionOutput
		result2 error
	}
	registerTaskDefinitionReturnsOnCall map[int]struct {
		result1 *ecs.RegisterTaskDefinitionOutput
		result2 error
	}
	RegisterTaskDefinitionRequestStub        func(*ecs.RegisterTaskDefinitionInput) (*request.Request, *ecs.RegisterTaskDefinitionOutput)
	registerTaskDefinitionRequestMutex       sync.RWMutex
	registerTaskDefinitionRequestArgsForCall []struct {
		arg1 *ecs.RegisterTaskDefinitionInput
	}
	registerTaskDefinitionRequestReturns struct {
		result1 *request.Request
		result2 *ecs.RegisterTaskDefinitionOutput
	}
	registerTaskDefinitionRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.RegisterTaskDefinitionOutput
	}
	RegisterTaskDefinitionWithContextStub        func(context.Context, *ecs.RegisterTaskDefinitionInput, ...request.Option) (*ecs.RegisterTaskDefinitionOutput, error)
	registerTaskDefinitionWithContextMutex       sync.RWMutex
	registerTaskDefinitionWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.RegisterTaskDefinitionInput
		arg3 []request.Option
	}
	registerTaskDefinitionWithContextReturns struct {
		result1 *ecs.RegisterTaskDefinitionOutput
		result2 error
	}
	registerTaskDefinitionWithContextReturnsOnCall map[int]struct {
		result1 *ecs.RegisterTaskDefinitionOutput
		result2 error
	}
	RunTaskStub        func(*ecs.RunTaskInput) (*ecs.RunTaskOutput, error)
	runTaskMutex       sync.RWMutex
	runTaskArgsForCall []struct {
		arg1 *ecs.RunTaskInput
	}
	runTaskReturns struct {
		result1 *ecs.RunTaskOutput
		result2 error
	}
	runTaskReturnsOnCall map[int]struct {
		result1 *ecs.RunTaskOutput
		result2 error
	}
	RunTaskRequestStub        func(*ecs.RunTaskInput) (*request.Request, *ecs.RunTaskOutput)
	runTaskRequestMutex       sync.RWMutex
	runTaskRequestArgsForCall []struct {
		arg1 *ecs.RunTaskInput
	}
	runTaskRequestReturns struct {
		result1 *request.Request
		result2 *ecs.RunTaskOutput
	}
	runTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.RunTaskOutput
	}
	RunTaskWithContextStub        func(context.Context, *ecs.RunTaskInput, ...request.Option) (*ecs.RunTaskOutput, error)
	runTaskWithContextMutex       sync.RWMutex
	runTaskWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.RunTaskInput
		arg3 []request.Option
	}
	runTaskWithContextReturns struct {
		result1 *ecs.RunTaskOutput
		result2 error
	}
	runTaskWithContextReturnsOnCall map[int]struct {
		result1 *ecs.RunTaskOutput
		result2 error
	}
	StartTaskStub        func(*ecs.StartTaskInput) (*ecs.StartTaskOutput, error)
	startTaskMutex       sync.RWMutex
	startTaskArgsForCall []struct {
		arg1 *ecs.StartTaskInput
	}
	startTaskReturns struct {
		result1 *ecs.StartTaskOutput
		result2 error
	}
	startTaskReturnsOnCall map[int]struct {
		result1 *ecs.StartTaskOutput
		result2 error
	}
	StartTaskRequestStub        func(*ecs.StartTaskInput) (*request.Request, *ecs.StartTaskOutput)
	startTaskRequestMutex       sync.RWMutex
	startTaskRequestArgsForCall []struct {
		arg1 *ecs.StartTaskInput
	}
	startTaskRequestReturns struct {
		result1 *request.Request
		result2 *ecs.StartTaskOutput
	}
	startTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.StartTaskOutput
	}
	StartTaskWithContextStub        func(context.Context, *ecs.StartTaskInput, ...request.Option) (*ecs.StartTaskOutput, error)
	startTaskWithContextMutex       sync.RWMutex
	startTaskWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.StartTaskInput
		arg3 []request.Option
	}
	startTaskWithContextReturns struct {
		result1 *ecs.StartTaskOutput
		result2 error
	}
	startTaskWithContextReturnsOnCall map[int]struct {
		result1 *ecs.StartTaskOutput
		result2 error
	}
	StopTaskStub        func(*ecs.StopTaskInput) (*ecs.StopTaskOutput, error)
	stopTaskMutex       sync.RWMutex
	stopTaskArgsForCall []struct {
		arg1 *ecs.StopTaskInput
	}
	stopTaskReturns struct {
		result1 *ecs.StopTaskOutput
		result2 error
	}
	stopTaskReturnsOnCall map[int]struct {
		result1 *ecs.StopTaskOutput
		result2 error
	}
	StopTaskRequestStub        func(*ecs.StopTaskInput) (*request.Request, *ecs.StopTaskOutput)
	stopTaskRequestMutex       sync.RWMutex
	stopTaskRequestArgsForCall []struct {
		arg1 *ecs.StopTaskInput
	}
	stopTaskRequestReturns struct {
		result1 *request.Request
		result2 *ecs.StopTaskOutput
	}
	stopTaskRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.StopTaskOutput
	}
	StopTaskWithContextStub        func(context.Context, *ecs.StopTaskInput, ...request.Option) (*ecs.StopTaskOutput, error)
	stopTaskWithContextMutex       sync.RWMutex
	stopTaskWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.StopTaskInput
		arg3 []request.Option
	}
	stopTaskWithContextReturns struct {
		result1 *ecs.StopTaskOutput
		result2 error
	}
	stopTaskWithContextReturnsOnCall map[int]struct {
		result1 *ecs.StopTaskOutput
		result2 error
	}
	SubmitAttachmentStateChangesStub        func(*ecs.SubmitAttachmentStateChangesInput) (*ecs.SubmitAttachmentStateChangesOutput, error)
	submitAttachmentStateChangesMutex       sync.RWMutex
	submitAttachmentStateChangesArgsForCall []struct {
		arg1 *ecs.SubmitAttachmentStateChangesInput
	}
	submitAttachmentStateChangesReturns struct {
		result1 *ecs.SubmitAttachmentStateChangesOutput
		result2 error
	}
	submitAttachmentStateChangesReturnsOnCall map[int]struct {
		result1 *ecs.SubmitAttachmentStateChangesOutput
		result2 error
	}
	SubmitAttachmentStateChangesRequestStub        func(*ecs.SubmitAttachmentStateChangesInput) (*request.Request, *ecs.SubmitAttachmentStateChangesOutput)
	submitAttachmentStateChangesRequestMutex       sync.RWMutex
	submitAttachmentStateChangesRequestArgsForCall []struct {
		arg1 *ecs.SubmitAttachmentStateChangesInput
	}
	submitAttachmentStateChangesRequestReturns struct {
		result1 *request.Request
		result2 *ecs.SubmitAttachmentStateChangesOutput
	}
	submitAttachmentStateChangesRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.SubmitAttachmentStateChangesOutput
	}
	SubmitAttachmentStateChangesWithContextStub        func(context.Context, *ecs.SubmitAttachmentStateChangesInput, ...request.Option) (*ecs.SubmitAttachmentStateChangesOutput, error)
	submitAttachmentStateChangesWithContextMutex       sync.RWMutex
	submitAttachmentStateChangesWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.SubmitAttachmentStateChangesInput
		arg3 []request.Option
	}
	submitAttachmentStateChangesWithContextReturns struct {
		result1 *ecs.SubmitAttachmentStateChangesOutput
		result2 error
	}
	submitAttachmentStateChangesWithContextReturnsOnCall map[int]struct {
		result1 *ecs.SubmitAttachmentStateChangesOutput
		result2 error
	}
	SubmitContainerStateChangeStub        func(*ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error)
	submitContainerStateChangeMutex       sync.RWMutex
	submitContainerStateChangeArgsForCall []struct {
		arg1 *ecs.SubmitContainerStateChangeInput
	}
	submitContainerStateChangeReturns struct {
		result1 *ecs.SubmitContainerStateChangeOutput
		result2 error
	}
	submitContainerStateChangeReturnsOnCall map[int]struct {
		result1 *ecs.SubmitContainerStateChangeOutput
		result2 error
	}
	SubmitContainerStateChangeRequestStub        func(*ecs.SubmitContainerStateChangeInput) (*request.Request, *ecs.SubmitContainerStateChangeOutput)
	submitContainerStateChangeRequestMutex       sync.RWMutex
	submitContainerStateChangeRequestArgsForCall []struct {
		arg1 *ecs.SubmitContainerStateChangeInput
	}
	submitContainerStateChangeRequestReturns struct {
		result1 *request.Request
		result2 *ecs.SubmitContainerStateChangeOutput
	}
	submitContainerStateChangeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.SubmitContainerStateChangeOutput
	}
	SubmitContainerStateChangeWithContextStub        func(context.Context, *ecs.SubmitContainerStateChangeInput, ...request.Option) (*ecs.SubmitContainerStateChangeOutput, error)
	submitContainerStateChangeWithContextMutex       sync.RWMutex
	submitContainerStateChangeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.SubmitContainerStateChangeInput
		arg3 []request.Option
	}
	submitContainerStateChangeWithContextReturns struct {
		result1 *ecs.SubmitContainerStateChangeOutput
		result2 error
	}
	submitContainerStateChangeWithContextReturnsOnCall map[int]struct {
		result1 *ecs.SubmitContainerStateChangeOutput
		result2 error
	}
	SubmitTaskStateChangeStub        func(*ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error)
	submitTaskStateChangeMutex       sync.RWMutex
	submitTaskStateChangeArgsForCall []struct {
		arg1 *ecs.SubmitTaskStateChangeInput
	}
	submitTaskStateChangeReturns struct {
		result1 *ecs.SubmitTaskStateChangeOutput
		result2 error
	}
	submitTaskStateChangeReturnsOnCall map[int]struct {
		result1 *ecs.SubmitTaskStateChangeOutput
		result2 error
	}
	SubmitTaskStateChangeRequestStub        func(*ecs.SubmitTaskStateChangeInput) (*request.Request, *ecs.SubmitTaskStateChangeOutput)
	submitTaskStateChangeRequestMutex       sync.RWMutex
	submitTaskStateChangeRequestArgsForCall []struct {
		arg1 *ecs.SubmitTaskStateChangeInput
	}
	submitTaskStateChangeRequestReturns struct {
		result1 *request.Request
		result2 *ecs.SubmitTaskStateChangeOutput
	}
	submitTaskStateChangeRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.SubmitTaskStateChangeOutput
	}
	SubmitTaskStateChangeWithContextStub        func(context.Context, *ecs.SubmitTaskStateChangeInput, ...request.Option) (*ecs.SubmitTaskStateChangeOutput, error)
	submitTaskStateChangeWithContextMutex       sync.RWMutex
	submitTaskStateChangeWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.SubmitTaskStateChangeInput
		arg3 []request.Option
	}
	submitTaskStateChangeWithContextReturns struct {
		result1 *ecs.SubmitTaskStateChangeOutput
		result2 error
	}
	submitTaskStateChangeWithContextReturnsOnCall map[int]struct {
		result1 *ecs.SubmitTaskStateChangeOutput
		result2 error
	}
	TagResourceStub        func(*ecs.TagResourceInput) (*ecs.TagResourceOutput, error)
	tagResourceMutex       sync.RWMutex
	tagResourceArgsForCall []struct {
		arg1 *ecs.TagResourceInput
	}
	tagResourceReturns struct {
		result1 *ecs.TagResourceOutput
		result2 error
	}
	tagResourceReturnsOnCall map[int]struct {
		result1 *ecs.TagResourceOutput
		result2 error
	}
	TagResourceRequestStub        func(*ecs.TagResourceInput) (*request.Request, *ecs.TagResourceOutput)
	tagResourceRequestMutex       sync.RWMutex
	tagResourceRequestArgsForCall []struct {
		arg1 *ecs.TagResourceInput
	}
	tagResourceRequestReturns struct {
		result1 *request.Request
		result2 *ecs.TagResourceOutput
	}
	tagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.TagResourceOutput
	}
	TagResourceWithContextStub        func(context.Context, *ecs.TagResourceInput, ...request.Option) (*ecs.TagResourceOutput, error)
	tagResourceWithContextMutex       sync.RWMutex
	tagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.TagResourceInput
		arg3 []request.Option
	}
	tagResourceWithContextReturns struct {
		result1 *ecs.TagResourceOutput
		result2 error
	}
	tagResourceWithContextReturnsOnCall map[int]struct {
		result1 *ecs.TagResourceOutput
		result2 error
	}
	UntagResourceStub        func(*ecs.UntagResourceInput) (*ecs.UntagResourceOutput, error)
	untagResourceMutex       sync.RWMutex
	untagResourceArgsForCall []struct {
		arg1 *ecs.UntagResourceInput
	}
	untagResourceReturns struct {
		result1 *ecs.UntagResourceOutput
		result2 error
	}
	untagResourceReturnsOnCall map[int]struct {
		result1 *ecs.UntagResourceOutput
		result2 error
	}
	UntagResourceRequestStub        func(*ecs.UntagResourceInput) (*request.Request, *ecs.UntagResourceOutput)
	untagResourceRequestMutex       sync.RWMutex
	untagResourceRequestArgsForCall []struct {
		arg1 *ecs.UntagResourceInput
	}
	untagResourceRequestReturns struct {
		result1 *request.Request
		result2 *ecs.UntagResourceOutput
	}
	untagResourceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.UntagResourceOutput
	}
	UntagResourceWithContextStub        func(context.Context, *ecs.UntagResourceInput, ...request.Option) (*ecs.UntagResourceOutput, error)
	untagResourceWithContextMutex       sync.RWMutex
	untagResourceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.UntagResourceInput
		arg3 []request.Option
	}
	untagResourceWithContextReturns struct {
		result1 *ecs.UntagResourceOutput
		result2 error
	}
	untagResourceWithContextReturnsOnCall map[int]struct {
		result1 *ecs.UntagResourceOutput
		result2 error
	}
	UpdateCapacityProviderStub        func(*ecs.UpdateCapacityProviderInput) (*ecs.UpdateCapacityProviderOutput, error)
	updateCapacityProviderMutex       sync.RWMutex
	updateCapacityProviderArgsForCall []struct {
		arg1 *ecs.UpdateCapacityProviderInput
	}
	updateCapacityProviderReturns struct {
		result1 *ecs.UpdateCapacityProviderOutput
		result2 error
	}
	updateCapacityProviderReturnsOnCall map[int]struct {
		result1 *ecs.UpdateCapacityProviderOutput
		result2 error
	}
	UpdateCapacityProviderRequestStub        func(*ecs.UpdateCapacityProviderInput) (*request.Request, *ecs.UpdateCapacityProviderOutput)
	updateCapacityProviderRequestMutex       sync.RWMutex
	updateCapacityProviderRequestArgsForCall []struct {
		arg1 *ecs.UpdateCapacityProviderInput
	}
	updateCapacityProviderRequestReturns struct {
		result1 *request.Request
		result2 *ecs.UpdateCapacityProviderOutput
	}
	updateCapacityProviderRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.UpdateCapacityProviderOutput
	}
	UpdateCapacityProviderWithContextStub        func(context.Context, *ecs.UpdateCapacityProviderInput, ...request.Option) (*ecs.UpdateCapacityProviderOutput, error)
	updateCapacityProviderWithContextMutex       sync.RWMutex
	updateCapacityProviderWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.UpdateCapacityProviderInput
		arg3 []request.Option
	}
	updateCapacityProviderWithContextReturns struct {
		result1 *ecs.UpdateCapacityProviderOutput
		result2 error
	}
	updateCapacityProviderWithContextReturnsOnCall map[int]struct {
		result1 *ecs.UpdateCapacityProviderOutput
		result2 error
	}
	UpdateClusterSettingsStub        func(*ecs.UpdateClusterSettingsInput) (*ecs.UpdateClusterSettingsOutput, error)
	updateClusterSettingsMutex       sync.RWMutex
	updateClusterSettingsArgsForCall []struct {
		arg1 *ecs.UpdateClusterSettingsInput
	}
	updateClusterSettingsReturns struct {
		result1 *ecs.UpdateClusterSettingsOutput
		result2 error
	}
	updateClusterSettingsReturnsOnCall map[int]struct {
		result1 *ecs.UpdateClusterSettingsOutput
		result2 error
	}
	UpdateClusterSettingsRequestStub        func(*ecs.UpdateClusterSettingsInput) (*request.Request, *ecs.UpdateClusterSettingsOutput)
	updateClusterSettingsRequestMutex       sync.RWMutex
	updateClusterSettingsRequestArgsForCall []struct {
		arg1 *ecs.UpdateClusterSettingsInput
	}
	updateClusterSettingsRequestReturns struct {
		result1 *request.Request
		result2 *ecs.UpdateClusterSettingsOutput
	}
	updateClusterSettingsRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.UpdateClusterSettingsOutput
	}
	UpdateClusterSettingsWithContextStub        func(context.Context, *ecs.UpdateClusterSettingsInput, ...request.Option) (*ecs.UpdateClusterSettingsOutput, error)
	updateClusterSettingsWithContextMutex       sync.RWMutex
	updateClusterSettingsWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.UpdateClusterSettingsInput
		arg3 []request.Option
	}
	updateClusterSettingsWithContextReturns struct {
		result1 *ecs.UpdateClusterSettingsOutput
		result2 error
	}
	updateClusterSettingsWithContextReturnsOnCall map[int]struct {
		result1 *ecs.UpdateClusterSettingsOutput
		result2 error
	}
	UpdateContainerAgentStub        func(*ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error)
	updateContainerAgentMutex       sync.RWMutex
	updateContainerAgentArgsForCall []struct {
		arg1 *ecs.UpdateContainerAgentInput
	}
	updateContainerAgentReturns struct {
		result1 *ecs.UpdateContainerAgentOutput
		result2 error
	}
	updateContainerAgentReturnsOnCall map[int]struct {
		result1 *ecs.UpdateContainerAgentOutput
		result2 error
	}
	UpdateContainerAgentRequestStub        func(*ecs.UpdateContainerAgentInput) (*request.Request, *ecs.UpdateContainerAgentOutput)
	updateContainerAgentRequestMutex       sync.RWMutex
	updateContainerAgentRequestArgsForCall []struct {
		arg1 *ecs.UpdateContainerAgentInput
	}
	updateContainerAgentRequestReturns struct {
		result1 *request.Request
		result2 *ecs.UpdateContainerAgentOutput
	}
	updateContainerAgentRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.UpdateContainerAgentOutput
	}
	UpdateContainerAgentWithContextStub        func(context.Context, *ecs.UpdateContainerAgentInput, ...request.Option) (*ecs.UpdateContainerAgentOutput, error)
	updateContainerAgentWithContextMutex       sync.RWMutex
	updateContainerAgentWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.UpdateContainerAgentInput
		arg3 []request.Option
	}
	updateContainerAgentWithContextReturns struct {
		result1 *ecs.UpdateContainerAgentOutput
		result2 error
	}
	updateContainerAgentWithContextReturnsOnCall map[int]struct {
		result1 *ecs.UpdateContainerAgentOutput
		result2 error
	}
	UpdateContainerInstancesStateStub        func(*ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error)
	updateContainerInstancesStateMutex       sync.RWMutex
	updateContainerInstancesStateArgsForCall []struct {
		arg1 *ecs.UpdateContainerInstancesStateInput
	}
	updateContainerInstancesStateReturns struct {
		result1 *ecs.UpdateContainerInstancesStateOutput
		result2 error
	}
	updateContainerInstancesStateReturnsOnCall map[int]struct {
		result1 *ecs.UpdateContainerInstancesStateOutput
		result2 error
	}
	UpdateContainerInstancesStateRequestStub        func(*ecs.UpdateContainerInstancesStateInput) (*request.Request, *ecs.UpdateContainerInstancesStateOutput)
	updateContainerInstancesStateRequestMutex       sync.RWMutex
	updateContainerInstancesStateRequestArgsForCall []struct {
		arg1 *ecs.UpdateContainerInstancesStateInput
	}
	updateContainerInstancesStateRequestReturns struct {
		result1 *request.Request
		result2 *ecs.UpdateContainerInstancesStateOutput
	}
	updateContainerInstancesStateRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.UpdateContainerInstancesStateOutput
	}
	UpdateContainerInstancesStateWithContextStub        func(context.Context, *ecs.UpdateContainerInstancesStateInput, ...request.Option) (*ecs.UpdateContainerInstancesStateOutput, error)
	updateContainerInstancesStateWithContextMutex       sync.RWMutex
	updateContainerInstancesStateWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.UpdateContainerInstancesStateInput
		arg3 []request.Option
	}
	updateContainerInstancesStateWithContextReturns struct {
		result1 *ecs.UpdateContainerInstancesStateOutput
		result2 error
	}
	updateContainerInstancesStateWithContextReturnsOnCall map[int]struct {
		result1 *ecs.UpdateContainerInstancesStateOutput
		result2 error
	}
	UpdateServiceStub        func(*ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error)
	updateServiceMutex       sync.RWMutex
	updateServiceArgsForCall []struct {
		arg1 *ecs.UpdateServiceInput
	}
	updateServiceReturns struct {
		result1 *ecs.UpdateServiceOutput
		result2 error
	}
	updateServiceReturnsOnCall map[int]struct {
		result1 *ecs.UpdateServiceOutput
		result2 error
	}
	UpdateServicePrimaryTaskSetStub        func(*ecs.UpdateServicePrimaryTaskSetInput) (*ecs.UpdateServicePrimaryTaskSetOutput, error)
	updateServicePrimaryTaskSetMutex       sync.RWMutex
	updateServicePrimaryTaskSetArgsForCall []struct {
		arg1 *ecs.UpdateServicePrimaryTaskSetInput
	}
	updateServicePrimaryTaskSetReturns struct {
		result1 *ecs.UpdateServicePrimaryTaskSetOutput
		result2 error
	}
	updateServicePrimaryTaskSetReturnsOnCall map[int]struct {
		result1 *ecs.UpdateServicePrimaryTaskSetOutput
		result2 error
	}
	UpdateServicePrimaryTaskSetRequestStub        func(*ecs.UpdateServicePrimaryTaskSetInput) (*request.Request, *ecs.UpdateServicePrimaryTaskSetOutput)
	updateServicePrimaryTaskSetRequestMutex       sync.RWMutex
	updateServicePrimaryTaskSetRequestArgsForCall []struct {
		arg1 *ecs.UpdateServicePrimaryTaskSetInput
	}
	updateServicePrimaryTaskSetRequestReturns struct {
		result1 *request.Request
		result2 *ecs.UpdateServicePrimaryTaskSetOutput
	}
	updateServicePrimaryTaskSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.UpdateServicePrimaryTaskSetOutput
	}
	UpdateServicePrimaryTaskSetWithContextStub        func(context.Context, *ecs.UpdateServicePrimaryTaskSetInput, ...request.Option) (*ecs.UpdateServicePrimaryTaskSetOutput, error)
	updateServicePrimaryTaskSetWithContextMutex       sync.RWMutex
	updateServicePrimaryTaskSetWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.UpdateServicePrimaryTaskSetInput
		arg3 []request.Option
	}
	updateServicePrimaryTaskSetWithContextReturns struct {
		result1 *ecs.UpdateServicePrimaryTaskSetOutput
		result2 error
	}
	updateServicePrimaryTaskSetWithContextReturnsOnCall map[int]struct {
		result1 *ecs.UpdateServicePrimaryTaskSetOutput
		result2 error
	}
	UpdateServiceRequestStub        func(*ecs.UpdateServiceInput) (*request.Request, *ecs.UpdateServiceOutput)
	updateServiceRequestMutex       sync.RWMutex
	updateServiceRequestArgsForCall []struct {
		arg1 *ecs.UpdateServiceInput
	}
	updateServiceRequestReturns struct {
		result1 *request.Request
		result2 *ecs.UpdateServiceOutput
	}
	updateServiceRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.UpdateServiceOutput
	}
	UpdateServiceWithContextStub        func(context.Context, *ecs.UpdateServiceInput, ...request.Option) (*ecs.UpdateServiceOutput, error)
	updateServiceWithContextMutex       sync.RWMutex
	updateServiceWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.UpdateServiceInput
		arg3 []request.Option
	}
	updateServiceWithContextReturns struct {
		result1 *ecs.UpdateServiceOutput
		result2 error
	}
	updateServiceWithContextReturnsOnCall map[int]struct {
		result1 *ecs.UpdateServiceOutput
		result2 error
	}
	UpdateTaskSetStub        func(*ecs.UpdateTaskSetInput) (*ecs.UpdateTaskSetOutput, error)
	updateTaskSetMutex       sync.RWMutex
	updateTaskSetArgsForCall []struct {
		arg1 *ecs.UpdateTaskSetInput
	}
	updateTaskSetReturns struct {
		result1 *ecs.UpdateTaskSetOutput
		result2 error
	}
	updateTaskSetReturnsOnCall map[int]struct {
		result1 *ecs.UpdateTaskSetOutput
		result2 error
	}
	UpdateTaskSetRequestStub        func(*ecs.UpdateTaskSetInput) (*request.Request, *ecs.UpdateTaskSetOutput)
	updateTaskSetRequestMutex       sync.RWMutex
	updateTaskSetRequestArgsForCall []struct {
		arg1 *ecs.UpdateTaskSetInput
	}
	updateTaskSetRequestReturns struct {
		result1 *request.Request
		result2 *ecs.UpdateTaskSetOutput
	}
	updateTaskSetRequestReturnsOnCall map[int]struct {
		result1 *request.Request
		result2 *ecs.UpdateTaskSetOutput
	}
	UpdateTaskSetWithContextStub        func(context.Context, *ecs.UpdateTaskSetInput, ...request.Option) (*ecs.UpdateTaskSetOutput, error)
	updateTaskSetWithContextMutex       sync.RWMutex
	updateTaskSetWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.UpdateTaskSetInput
		arg3 []request.Option
	}
	updateTaskSetWithContextReturns struct {
		result1 *ecs.UpdateTaskSetOutput
		result2 error
	}
	updateTaskSetWithContextReturnsOnCall map[int]struct {
		result1 *ecs.UpdateTaskSetOutput
		result2 error
	}
	WaitUntilServicesInactiveStub        func(*ecs.DescribeServicesInput) error
	waitUntilServicesInactiveMutex       sync.RWMutex
	waitUntilServicesInactiveArgsForCall []struct {
		arg1 *ecs.DescribeServicesInput
	}
	waitUntilServicesInactiveReturns struct {
		result1 error
	}
	waitUntilServicesInactiveReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilServicesInactiveWithContextStub        func(context.Context, *ecs.DescribeServicesInput, ...request.WaiterOption) error
	waitUntilServicesInactiveWithContextMutex       sync.RWMutex
	waitUntilServicesInactiveWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeServicesInput
		arg3 []request.WaiterOption
	}
	waitUntilServicesInactiveWithContextReturns struct {
		result1 error
	}
	waitUntilServicesInactiveWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilServicesStableStub        func(*ecs.DescribeServicesInput) error
	waitUntilServicesStableMutex       sync.RWMutex
	waitUntilServicesStableArgsForCall []struct {
		arg1 *ecs.DescribeServicesInput
	}
	waitUntilServicesStableReturns struct {
		result1 error
	}
	waitUntilServicesStableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilServicesStableWithContextStub        func(context.Context, *ecs.DescribeServicesInput, ...request.WaiterOption) error
	waitUntilServicesStableWithContextMutex       sync.RWMutex
	waitUntilServicesStableWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeServicesInput
		arg3 []request.WaiterOption
	}
	waitUntilServicesStableWithContextReturns struct {
		result1 error
	}
	waitUntilServicesStableWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilTasksRunningStub        func(*ecs.DescribeTasksInput) error
	waitUntilTasksRunningMutex       sync.RWMutex
	waitUntilTasksRunningArgsForCall []struct {
		arg1 *ecs.DescribeTasksInput
	}
	waitUntilTasksRunningReturns struct {
		result1 error
	}
	waitUntilTasksRunningReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilTasksRunningWithContextStub        func(context.Context, *ecs.DescribeTasksInput, ...request.WaiterOption) error
	waitUntilTasksRunningWithContextMutex       sync.RWMutex
	waitUntilTasksRunningWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeTasksInput
		arg3 []request.WaiterOption
	}
	waitUntilTasksRunningWithContextReturns struct {
		result1 error
	}
	waitUntilTasksRunningWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilTasksStoppedStub        func(*ecs.DescribeTasksInput) error
	waitUntilTasksStoppedMutex       sync.RWMutex
	waitUntilTasksStoppedArgsForCall []struct {
		arg1 *ecs.DescribeTasksInput
	}
	waitUntilTasksStoppedReturns struct {
		result1 error
	}
	waitUntilTasksStoppedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitUntilTasksStoppedWithContextStub        func(context.Context, *ecs.DescribeTasksInput, ...request.WaiterOption) error
	waitUntilTasksStoppedWithContextMutex       sync.RWMutex
	waitUntilTasksStoppedWithContextArgsForCall []struct {
		arg1 context.Context
		arg2 *ecs.DescribeTasksInput
		arg3 []request.WaiterOption
	}
	waitUntilTasksStoppedWithContextReturns struct {
		result1 error
	}
	waitUntilTasksStoppedWithContextReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeECSClient) CreateCapacityProvider(arg1 *ecs.CreateCapacityProviderInput) (*ecs.CreateCapacityProviderOutput, error) {
	fake.createCapacityProviderMutex.Lock()
	ret, specificReturn := fake.createCapacityProviderReturnsOnCall[len(fake.createCapacityProviderArgsForCall)]
	fake.createCapacityProviderArgsForCall = append(fake.createCapacityProviderArgsForCall, struct {
		arg1 *ecs.CreateCapacityProviderInput
	}{arg1})
	fake.recordInvocation("CreateCapacityProvider", []interface{}{arg1})
	fake.createCapacityProviderMutex.Unlock()
	if fake.CreateCapacityProviderStub != nil {
		return fake.CreateCapacityProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCapacityProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateCapacityProviderCallCount() int {
	fake.createCapacityProviderMutex.RLock()
	defer fake.createCapacityProviderMutex.RUnlock()
	return len(fake.createCapacityProviderArgsForCall)
}

func (fake *FakeECSClient) CreateCapacityProviderCalls(stub func(*ecs.CreateCapacityProviderInput) (*ecs.CreateCapacityProviderOutput, error)) {
	fake.createCapacityProviderMutex.Lock()
	defer fake.createCapacityProviderMutex.Unlock()
	fake.CreateCapacityProviderStub = stub
}

func (fake *FakeECSClient) CreateCapacityProviderArgsForCall(i int) *ecs.CreateCapacityProviderInput {
	fake.createCapacityProviderMutex.RLock()
	defer fake.createCapacityProviderMutex.RUnlock()
	argsForCall := fake.createCapacityProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) CreateCapacityProviderReturns(result1 *ecs.CreateCapacityProviderOutput, result2 error) {
	fake.createCapacityProviderMutex.Lock()
	defer fake.createCapacityProviderMutex.Unlock()
	fake.CreateCapacityProviderStub = nil
	fake.createCapacityProviderReturns = struct {
		result1 *ecs.CreateCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateCapacityProviderReturnsOnCall(i int, result1 *ecs.CreateCapacityProviderOutput, result2 error) {
	fake.createCapacityProviderMutex.Lock()
	defer fake.createCapacityProviderMutex.Unlock()
	fake.CreateCapacityProviderStub = nil
	if fake.createCapacityProviderReturnsOnCall == nil {
		fake.createCapacityProviderReturnsOnCall = make(map[int]struct {
			result1 *ecs.CreateCapacityProviderOutput
			result2 error
		})
	}
	fake.createCapacityProviderReturnsOnCall[i] = struct {
		result1 *ecs.CreateCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateCapacityProviderRequest(arg1 *ecs.CreateCapacityProviderInput) (*request.Request, *ecs.CreateCapacityProviderOutput) {
	fake.createCapacityProviderRequestMutex.Lock()
	ret, specificReturn := fake.createCapacityProviderRequestReturnsOnCall[len(fake.createCapacityProviderRequestArgsForCall)]
	fake.createCapacityProviderRequestArgsForCall = append(fake.createCapacityProviderRequestArgsForCall, struct {
		arg1 *ecs.CreateCapacityProviderInput
	}{arg1})
	fake.recordInvocation("CreateCapacityProviderRequest", []interface{}{arg1})
	fake.createCapacityProviderRequestMutex.Unlock()
	if fake.CreateCapacityProviderRequestStub != nil {
		return fake.CreateCapacityProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCapacityProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateCapacityProviderRequestCallCount() int {
	fake.createCapacityProviderRequestMutex.RLock()
	defer fake.createCapacityProviderRequestMutex.RUnlock()
	return len(fake.createCapacityProviderRequestArgsForCall)
}

func (fake *FakeECSClient) CreateCapacityProviderRequestCalls(stub func(*ecs.CreateCapacityProviderInput) (*request.Request, *ecs.CreateCapacityProviderOutput)) {
	fake.createCapacityProviderRequestMutex.Lock()
	defer fake.createCapacityProviderRequestMutex.Unlock()
	fake.CreateCapacityProviderRequestStub = stub
}

func (fake *FakeECSClient) CreateCapacityProviderRequestArgsForCall(i int) *ecs.CreateCapacityProviderInput {
	fake.createCapacityProviderRequestMutex.RLock()
	defer fake.createCapacityProviderRequestMutex.RUnlock()
	argsForCall := fake.createCapacityProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) CreateCapacityProviderRequestReturns(result1 *request.Request, result2 *ecs.CreateCapacityProviderOutput) {
	fake.createCapacityProviderRequestMutex.Lock()
	defer fake.createCapacityProviderRequestMutex.Unlock()
	fake.CreateCapacityProviderRequestStub = nil
	fake.createCapacityProviderRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.CreateCapacityProviderOutput
	}{result1, result2}
}

func (fake *FakeECSClient) CreateCapacityProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.CreateCapacityProviderOutput) {
	fake.createCapacityProviderRequestMutex.Lock()
	defer fake.createCapacityProviderRequestMutex.Unlock()
	fake.CreateCapacityProviderRequestStub = nil
	if fake.createCapacityProviderRequestReturnsOnCall == nil {
		fake.createCapacityProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.CreateCapacityProviderOutput
		})
	}
	fake.createCapacityProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.CreateCapacityProviderOutput
	}{result1, result2}
}

func (fake *FakeECSClient) CreateCapacityProviderWithContext(arg1 context.Context, arg2 *ecs.CreateCapacityProviderInput, arg3 ...request.Option) (*ecs.CreateCapacityProviderOutput, error) {
	fake.createCapacityProviderWithContextMutex.Lock()
	ret, specificReturn := fake.createCapacityProviderWithContextReturnsOnCall[len(fake.createCapacityProviderWithContextArgsForCall)]
	fake.createCapacityProviderWithContextArgsForCall = append(fake.createCapacityProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.CreateCapacityProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateCapacityProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.createCapacityProviderWithContextMutex.Unlock()
	if fake.CreateCapacityProviderWithContextStub != nil {
		return fake.CreateCapacityProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCapacityProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateCapacityProviderWithContextCallCount() int {
	fake.createCapacityProviderWithContextMutex.RLock()
	defer fake.createCapacityProviderWithContextMutex.RUnlock()
	return len(fake.createCapacityProviderWithContextArgsForCall)
}

func (fake *FakeECSClient) CreateCapacityProviderWithContextCalls(stub func(context.Context, *ecs.CreateCapacityProviderInput, ...request.Option) (*ecs.CreateCapacityProviderOutput, error)) {
	fake.createCapacityProviderWithContextMutex.Lock()
	defer fake.createCapacityProviderWithContextMutex.Unlock()
	fake.CreateCapacityProviderWithContextStub = stub
}

func (fake *FakeECSClient) CreateCapacityProviderWithContextArgsForCall(i int) (context.Context, *ecs.CreateCapacityProviderInput, []request.Option) {
	fake.createCapacityProviderWithContextMutex.RLock()
	defer fake.createCapacityProviderWithContextMutex.RUnlock()
	argsForCall := fake.createCapacityProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) CreateCapacityProviderWithContextReturns(result1 *ecs.CreateCapacityProviderOutput, result2 error) {
	fake.createCapacityProviderWithContextMutex.Lock()
	defer fake.createCapacityProviderWithContextMutex.Unlock()
	fake.CreateCapacityProviderWithContextStub = nil
	fake.createCapacityProviderWithContextReturns = struct {
		result1 *ecs.CreateCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateCapacityProviderWithContextReturnsOnCall(i int, result1 *ecs.CreateCapacityProviderOutput, result2 error) {
	fake.createCapacityProviderWithContextMutex.Lock()
	defer fake.createCapacityProviderWithContextMutex.Unlock()
	fake.CreateCapacityProviderWithContextStub = nil
	if fake.createCapacityProviderWithContextReturnsOnCall == nil {
		fake.createCapacityProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.CreateCapacityProviderOutput
			result2 error
		})
	}
	fake.createCapacityProviderWithContextReturnsOnCall[i] = struct {
		result1 *ecs.CreateCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateCluster(arg1 *ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error) {
	fake.createClusterMutex.Lock()
	ret, specificReturn := fake.createClusterReturnsOnCall[len(fake.createClusterArgsForCall)]
	fake.createClusterArgsForCall = append(fake.createClusterArgsForCall, struct {
		arg1 *ecs.CreateClusterInput
	}{arg1})
	fake.recordInvocation("CreateCluster", []interface{}{arg1})
	fake.createClusterMutex.Unlock()
	if fake.CreateClusterStub != nil {
		return fake.CreateClusterStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClusterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateClusterCallCount() int {
	fake.createClusterMutex.RLock()
	defer fake.createClusterMutex.RUnlock()
	return len(fake.createClusterArgsForCall)
}

func (fake *FakeECSClient) CreateClusterCalls(stub func(*ecs.CreateClusterInput) (*ecs.CreateClusterOutput, error)) {
	fake.createClusterMutex.Lock()
	defer fake.createClusterMutex.Unlock()
	fake.CreateClusterStub = stub
}

func (fake *FakeECSClient) CreateClusterArgsForCall(i int) *ecs.CreateClusterInput {
	fake.createClusterMutex.RLock()
	defer fake.createClusterMutex.RUnlock()
	argsForCall := fake.createClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) CreateClusterReturns(result1 *ecs.CreateClusterOutput, result2 error) {
	fake.createClusterMutex.Lock()
	defer fake.createClusterMutex.Unlock()
	fake.CreateClusterStub = nil
	fake.createClusterReturns = struct {
		result1 *ecs.CreateClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateClusterReturnsOnCall(i int, result1 *ecs.CreateClusterOutput, result2 error) {
	fake.createClusterMutex.Lock()
	defer fake.createClusterMutex.Unlock()
	fake.CreateClusterStub = nil
	if fake.createClusterReturnsOnCall == nil {
		fake.createClusterReturnsOnCall = make(map[int]struct {
			result1 *ecs.CreateClusterOutput
			result2 error
		})
	}
	fake.createClusterReturnsOnCall[i] = struct {
		result1 *ecs.CreateClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateClusterRequest(arg1 *ecs.CreateClusterInput) (*request.Request, *ecs.CreateClusterOutput) {
	fake.createClusterRequestMutex.Lock()
	ret, specificReturn := fake.createClusterRequestReturnsOnCall[len(fake.createClusterRequestArgsForCall)]
	fake.createClusterRequestArgsForCall = append(fake.createClusterRequestArgsForCall, struct {
		arg1 *ecs.CreateClusterInput
	}{arg1})
	fake.recordInvocation("CreateClusterRequest", []interface{}{arg1})
	fake.createClusterRequestMutex.Unlock()
	if fake.CreateClusterRequestStub != nil {
		return fake.CreateClusterRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClusterRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateClusterRequestCallCount() int {
	fake.createClusterRequestMutex.RLock()
	defer fake.createClusterRequestMutex.RUnlock()
	return len(fake.createClusterRequestArgsForCall)
}

func (fake *FakeECSClient) CreateClusterRequestCalls(stub func(*ecs.CreateClusterInput) (*request.Request, *ecs.CreateClusterOutput)) {
	fake.createClusterRequestMutex.Lock()
	defer fake.createClusterRequestMutex.Unlock()
	fake.CreateClusterRequestStub = stub
}

func (fake *FakeECSClient) CreateClusterRequestArgsForCall(i int) *ecs.CreateClusterInput {
	fake.createClusterRequestMutex.RLock()
	defer fake.createClusterRequestMutex.RUnlock()
	argsForCall := fake.createClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) CreateClusterRequestReturns(result1 *request.Request, result2 *ecs.CreateClusterOutput) {
	fake.createClusterRequestMutex.Lock()
	defer fake.createClusterRequestMutex.Unlock()
	fake.CreateClusterRequestStub = nil
	fake.createClusterRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.CreateClusterOutput
	}{result1, result2}
}

func (fake *FakeECSClient) CreateClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.CreateClusterOutput) {
	fake.createClusterRequestMutex.Lock()
	defer fake.createClusterRequestMutex.Unlock()
	fake.CreateClusterRequestStub = nil
	if fake.createClusterRequestReturnsOnCall == nil {
		fake.createClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.CreateClusterOutput
		})
	}
	fake.createClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.CreateClusterOutput
	}{result1, result2}
}

func (fake *FakeECSClient) CreateClusterWithContext(arg1 context.Context, arg2 *ecs.CreateClusterInput, arg3 ...request.Option) (*ecs.CreateClusterOutput, error) {
	fake.createClusterWithContextMutex.Lock()
	ret, specificReturn := fake.createClusterWithContextReturnsOnCall[len(fake.createClusterWithContextArgsForCall)]
	fake.createClusterWithContextArgsForCall = append(fake.createClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.CreateClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.createClusterWithContextMutex.Unlock()
	if fake.CreateClusterWithContextStub != nil {
		return fake.CreateClusterWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createClusterWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateClusterWithContextCallCount() int {
	fake.createClusterWithContextMutex.RLock()
	defer fake.createClusterWithContextMutex.RUnlock()
	return len(fake.createClusterWithContextArgsForCall)
}

func (fake *FakeECSClient) CreateClusterWithContextCalls(stub func(context.Context, *ecs.CreateClusterInput, ...request.Option) (*ecs.CreateClusterOutput, error)) {
	fake.createClusterWithContextMutex.Lock()
	defer fake.createClusterWithContextMutex.Unlock()
	fake.CreateClusterWithContextStub = stub
}

func (fake *FakeECSClient) CreateClusterWithContextArgsForCall(i int) (context.Context, *ecs.CreateClusterInput, []request.Option) {
	fake.createClusterWithContextMutex.RLock()
	defer fake.createClusterWithContextMutex.RUnlock()
	argsForCall := fake.createClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) CreateClusterWithContextReturns(result1 *ecs.CreateClusterOutput, result2 error) {
	fake.createClusterWithContextMutex.Lock()
	defer fake.createClusterWithContextMutex.Unlock()
	fake.CreateClusterWithContextStub = nil
	fake.createClusterWithContextReturns = struct {
		result1 *ecs.CreateClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateClusterWithContextReturnsOnCall(i int, result1 *ecs.CreateClusterOutput, result2 error) {
	fake.createClusterWithContextMutex.Lock()
	defer fake.createClusterWithContextMutex.Unlock()
	fake.CreateClusterWithContextStub = nil
	if fake.createClusterWithContextReturnsOnCall == nil {
		fake.createClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.CreateClusterOutput
			result2 error
		})
	}
	fake.createClusterWithContextReturnsOnCall[i] = struct {
		result1 *ecs.CreateClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateService(arg1 *ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error) {
	fake.createServiceMutex.Lock()
	ret, specificReturn := fake.createServiceReturnsOnCall[len(fake.createServiceArgsForCall)]
	fake.createServiceArgsForCall = append(fake.createServiceArgsForCall, struct {
		arg1 *ecs.CreateServiceInput
	}{arg1})
	fake.recordInvocation("CreateService", []interface{}{arg1})
	fake.createServiceMutex.Unlock()
	if fake.CreateServiceStub != nil {
		return fake.CreateServiceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateServiceCallCount() int {
	fake.createServiceMutex.RLock()
	defer fake.createServiceMutex.RUnlock()
	return len(fake.createServiceArgsForCall)
}

func (fake *FakeECSClient) CreateServiceCalls(stub func(*ecs.CreateServiceInput) (*ecs.CreateServiceOutput, error)) {
	fake.createServiceMutex.Lock()
	defer fake.createServiceMutex.Unlock()
	fake.CreateServiceStub = stub
}

func (fake *FakeECSClient) CreateServiceArgsForCall(i int) *ecs.CreateServiceInput {
	fake.createServiceMutex.RLock()
	defer fake.createServiceMutex.RUnlock()
	argsForCall := fake.createServiceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) CreateServiceReturns(result1 *ecs.CreateServiceOutput, result2 error) {
	fake.createServiceMutex.Lock()
	defer fake.createServiceMutex.Unlock()
	fake.CreateServiceStub = nil
	fake.createServiceReturns = struct {
		result1 *ecs.CreateServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateServiceReturnsOnCall(i int, result1 *ecs.CreateServiceOutput, result2 error) {
	fake.createServiceMutex.Lock()
	defer fake.createServiceMutex.Unlock()
	fake.CreateServiceStub = nil
	if fake.createServiceReturnsOnCall == nil {
		fake.createServiceReturnsOnCall = make(map[int]struct {
			result1 *ecs.CreateServiceOutput
			result2 error
		})
	}
	fake.createServiceReturnsOnCall[i] = struct {
		result1 *ecs.CreateServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateServiceRequest(arg1 *ecs.CreateServiceInput) (*request.Request, *ecs.CreateServiceOutput) {
	fake.createServiceRequestMutex.Lock()
	ret, specificReturn := fake.createServiceRequestReturnsOnCall[len(fake.createServiceRequestArgsForCall)]
	fake.createServiceRequestArgsForCall = append(fake.createServiceRequestArgsForCall, struct {
		arg1 *ecs.CreateServiceInput
	}{arg1})
	fake.recordInvocation("CreateServiceRequest", []interface{}{arg1})
	fake.createServiceRequestMutex.Unlock()
	if fake.CreateServiceRequestStub != nil {
		return fake.CreateServiceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateServiceRequestCallCount() int {
	fake.createServiceRequestMutex.RLock()
	defer fake.createServiceRequestMutex.RUnlock()
	return len(fake.createServiceRequestArgsForCall)
}

func (fake *FakeECSClient) CreateServiceRequestCalls(stub func(*ecs.CreateServiceInput) (*request.Request, *ecs.CreateServiceOutput)) {
	fake.createServiceRequestMutex.Lock()
	defer fake.createServiceRequestMutex.Unlock()
	fake.CreateServiceRequestStub = stub
}

func (fake *FakeECSClient) CreateServiceRequestArgsForCall(i int) *ecs.CreateServiceInput {
	fake.createServiceRequestMutex.RLock()
	defer fake.createServiceRequestMutex.RUnlock()
	argsForCall := fake.createServiceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) CreateServiceRequestReturns(result1 *request.Request, result2 *ecs.CreateServiceOutput) {
	fake.createServiceRequestMutex.Lock()
	defer fake.createServiceRequestMutex.Unlock()
	fake.CreateServiceRequestStub = nil
	fake.createServiceRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.CreateServiceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) CreateServiceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.CreateServiceOutput) {
	fake.createServiceRequestMutex.Lock()
	defer fake.createServiceRequestMutex.Unlock()
	fake.CreateServiceRequestStub = nil
	if fake.createServiceRequestReturnsOnCall == nil {
		fake.createServiceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.CreateServiceOutput
		})
	}
	fake.createServiceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.CreateServiceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) CreateServiceWithContext(arg1 context.Context, arg2 *ecs.CreateServiceInput, arg3 ...request.Option) (*ecs.CreateServiceOutput, error) {
	fake.createServiceWithContextMutex.Lock()
	ret, specificReturn := fake.createServiceWithContextReturnsOnCall[len(fake.createServiceWithContextArgsForCall)]
	fake.createServiceWithContextArgsForCall = append(fake.createServiceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.CreateServiceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateServiceWithContext", []interface{}{arg1, arg2, arg3})
	fake.createServiceWithContextMutex.Unlock()
	if fake.CreateServiceWithContextStub != nil {
		return fake.CreateServiceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createServiceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateServiceWithContextCallCount() int {
	fake.createServiceWithContextMutex.RLock()
	defer fake.createServiceWithContextMutex.RUnlock()
	return len(fake.createServiceWithContextArgsForCall)
}

func (fake *FakeECSClient) CreateServiceWithContextCalls(stub func(context.Context, *ecs.CreateServiceInput, ...request.Option) (*ecs.CreateServiceOutput, error)) {
	fake.createServiceWithContextMutex.Lock()
	defer fake.createServiceWithContextMutex.Unlock()
	fake.CreateServiceWithContextStub = stub
}

func (fake *FakeECSClient) CreateServiceWithContextArgsForCall(i int) (context.Context, *ecs.CreateServiceInput, []request.Option) {
	fake.createServiceWithContextMutex.RLock()
	defer fake.createServiceWithContextMutex.RUnlock()
	argsForCall := fake.createServiceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) CreateServiceWithContextReturns(result1 *ecs.CreateServiceOutput, result2 error) {
	fake.createServiceWithContextMutex.Lock()
	defer fake.createServiceWithContextMutex.Unlock()
	fake.CreateServiceWithContextStub = nil
	fake.createServiceWithContextReturns = struct {
		result1 *ecs.CreateServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateServiceWithContextReturnsOnCall(i int, result1 *ecs.CreateServiceOutput, result2 error) {
	fake.createServiceWithContextMutex.Lock()
	defer fake.createServiceWithContextMutex.Unlock()
	fake.CreateServiceWithContextStub = nil
	if fake.createServiceWithContextReturnsOnCall == nil {
		fake.createServiceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.CreateServiceOutput
			result2 error
		})
	}
	fake.createServiceWithContextReturnsOnCall[i] = struct {
		result1 *ecs.CreateServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateTaskSet(arg1 *ecs.CreateTaskSetInput) (*ecs.CreateTaskSetOutput, error) {
	fake.createTaskSetMutex.Lock()
	ret, specificReturn := fake.createTaskSetReturnsOnCall[len(fake.createTaskSetArgsForCall)]
	fake.createTaskSetArgsForCall = append(fake.createTaskSetArgsForCall, struct {
		arg1 *ecs.CreateTaskSetInput
	}{arg1})
	fake.recordInvocation("CreateTaskSet", []interface{}{arg1})
	fake.createTaskSetMutex.Unlock()
	if fake.CreateTaskSetStub != nil {
		return fake.CreateTaskSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTaskSetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateTaskSetCallCount() int {
	fake.createTaskSetMutex.RLock()
	defer fake.createTaskSetMutex.RUnlock()
	return len(fake.createTaskSetArgsForCall)
}

func (fake *FakeECSClient) CreateTaskSetCalls(stub func(*ecs.CreateTaskSetInput) (*ecs.CreateTaskSetOutput, error)) {
	fake.createTaskSetMutex.Lock()
	defer fake.createTaskSetMutex.Unlock()
	fake.CreateTaskSetStub = stub
}

func (fake *FakeECSClient) CreateTaskSetArgsForCall(i int) *ecs.CreateTaskSetInput {
	fake.createTaskSetMutex.RLock()
	defer fake.createTaskSetMutex.RUnlock()
	argsForCall := fake.createTaskSetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) CreateTaskSetReturns(result1 *ecs.CreateTaskSetOutput, result2 error) {
	fake.createTaskSetMutex.Lock()
	defer fake.createTaskSetMutex.Unlock()
	fake.CreateTaskSetStub = nil
	fake.createTaskSetReturns = struct {
		result1 *ecs.CreateTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateTaskSetReturnsOnCall(i int, result1 *ecs.CreateTaskSetOutput, result2 error) {
	fake.createTaskSetMutex.Lock()
	defer fake.createTaskSetMutex.Unlock()
	fake.CreateTaskSetStub = nil
	if fake.createTaskSetReturnsOnCall == nil {
		fake.createTaskSetReturnsOnCall = make(map[int]struct {
			result1 *ecs.CreateTaskSetOutput
			result2 error
		})
	}
	fake.createTaskSetReturnsOnCall[i] = struct {
		result1 *ecs.CreateTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateTaskSetRequest(arg1 *ecs.CreateTaskSetInput) (*request.Request, *ecs.CreateTaskSetOutput) {
	fake.createTaskSetRequestMutex.Lock()
	ret, specificReturn := fake.createTaskSetRequestReturnsOnCall[len(fake.createTaskSetRequestArgsForCall)]
	fake.createTaskSetRequestArgsForCall = append(fake.createTaskSetRequestArgsForCall, struct {
		arg1 *ecs.CreateTaskSetInput
	}{arg1})
	fake.recordInvocation("CreateTaskSetRequest", []interface{}{arg1})
	fake.createTaskSetRequestMutex.Unlock()
	if fake.CreateTaskSetRequestStub != nil {
		return fake.CreateTaskSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTaskSetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateTaskSetRequestCallCount() int {
	fake.createTaskSetRequestMutex.RLock()
	defer fake.createTaskSetRequestMutex.RUnlock()
	return len(fake.createTaskSetRequestArgsForCall)
}

func (fake *FakeECSClient) CreateTaskSetRequestCalls(stub func(*ecs.CreateTaskSetInput) (*request.Request, *ecs.CreateTaskSetOutput)) {
	fake.createTaskSetRequestMutex.Lock()
	defer fake.createTaskSetRequestMutex.Unlock()
	fake.CreateTaskSetRequestStub = stub
}

func (fake *FakeECSClient) CreateTaskSetRequestArgsForCall(i int) *ecs.CreateTaskSetInput {
	fake.createTaskSetRequestMutex.RLock()
	defer fake.createTaskSetRequestMutex.RUnlock()
	argsForCall := fake.createTaskSetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) CreateTaskSetRequestReturns(result1 *request.Request, result2 *ecs.CreateTaskSetOutput) {
	fake.createTaskSetRequestMutex.Lock()
	defer fake.createTaskSetRequestMutex.Unlock()
	fake.CreateTaskSetRequestStub = nil
	fake.createTaskSetRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.CreateTaskSetOutput
	}{result1, result2}
}

func (fake *FakeECSClient) CreateTaskSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.CreateTaskSetOutput) {
	fake.createTaskSetRequestMutex.Lock()
	defer fake.createTaskSetRequestMutex.Unlock()
	fake.CreateTaskSetRequestStub = nil
	if fake.createTaskSetRequestReturnsOnCall == nil {
		fake.createTaskSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.CreateTaskSetOutput
		})
	}
	fake.createTaskSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.CreateTaskSetOutput
	}{result1, result2}
}

func (fake *FakeECSClient) CreateTaskSetWithContext(arg1 context.Context, arg2 *ecs.CreateTaskSetInput, arg3 ...request.Option) (*ecs.CreateTaskSetOutput, error) {
	fake.createTaskSetWithContextMutex.Lock()
	ret, specificReturn := fake.createTaskSetWithContextReturnsOnCall[len(fake.createTaskSetWithContextArgsForCall)]
	fake.createTaskSetWithContextArgsForCall = append(fake.createTaskSetWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.CreateTaskSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("CreateTaskSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.createTaskSetWithContextMutex.Unlock()
	if fake.CreateTaskSetWithContextStub != nil {
		return fake.CreateTaskSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createTaskSetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) CreateTaskSetWithContextCallCount() int {
	fake.createTaskSetWithContextMutex.RLock()
	defer fake.createTaskSetWithContextMutex.RUnlock()
	return len(fake.createTaskSetWithContextArgsForCall)
}

func (fake *FakeECSClient) CreateTaskSetWithContextCalls(stub func(context.Context, *ecs.CreateTaskSetInput, ...request.Option) (*ecs.CreateTaskSetOutput, error)) {
	fake.createTaskSetWithContextMutex.Lock()
	defer fake.createTaskSetWithContextMutex.Unlock()
	fake.CreateTaskSetWithContextStub = stub
}

func (fake *FakeECSClient) CreateTaskSetWithContextArgsForCall(i int) (context.Context, *ecs.CreateTaskSetInput, []request.Option) {
	fake.createTaskSetWithContextMutex.RLock()
	defer fake.createTaskSetWithContextMutex.RUnlock()
	argsForCall := fake.createTaskSetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) CreateTaskSetWithContextReturns(result1 *ecs.CreateTaskSetOutput, result2 error) {
	fake.createTaskSetWithContextMutex.Lock()
	defer fake.createTaskSetWithContextMutex.Unlock()
	fake.CreateTaskSetWithContextStub = nil
	fake.createTaskSetWithContextReturns = struct {
		result1 *ecs.CreateTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) CreateTaskSetWithContextReturnsOnCall(i int, result1 *ecs.CreateTaskSetOutput, result2 error) {
	fake.createTaskSetWithContextMutex.Lock()
	defer fake.createTaskSetWithContextMutex.Unlock()
	fake.CreateTaskSetWithContextStub = nil
	if fake.createTaskSetWithContextReturnsOnCall == nil {
		fake.createTaskSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.CreateTaskSetOutput
			result2 error
		})
	}
	fake.createTaskSetWithContextReturnsOnCall[i] = struct {
		result1 *ecs.CreateTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAccountSetting(arg1 *ecs.DeleteAccountSettingInput) (*ecs.DeleteAccountSettingOutput, error) {
	fake.deleteAccountSettingMutex.Lock()
	ret, specificReturn := fake.deleteAccountSettingReturnsOnCall[len(fake.deleteAccountSettingArgsForCall)]
	fake.deleteAccountSettingArgsForCall = append(fake.deleteAccountSettingArgsForCall, struct {
		arg1 *ecs.DeleteAccountSettingInput
	}{arg1})
	fake.recordInvocation("DeleteAccountSetting", []interface{}{arg1})
	fake.deleteAccountSettingMutex.Unlock()
	if fake.DeleteAccountSettingStub != nil {
		return fake.DeleteAccountSettingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountSettingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteAccountSettingCallCount() int {
	fake.deleteAccountSettingMutex.RLock()
	defer fake.deleteAccountSettingMutex.RUnlock()
	return len(fake.deleteAccountSettingArgsForCall)
}

func (fake *FakeECSClient) DeleteAccountSettingCalls(stub func(*ecs.DeleteAccountSettingInput) (*ecs.DeleteAccountSettingOutput, error)) {
	fake.deleteAccountSettingMutex.Lock()
	defer fake.deleteAccountSettingMutex.Unlock()
	fake.DeleteAccountSettingStub = stub
}

func (fake *FakeECSClient) DeleteAccountSettingArgsForCall(i int) *ecs.DeleteAccountSettingInput {
	fake.deleteAccountSettingMutex.RLock()
	defer fake.deleteAccountSettingMutex.RUnlock()
	argsForCall := fake.deleteAccountSettingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteAccountSettingReturns(result1 *ecs.DeleteAccountSettingOutput, result2 error) {
	fake.deleteAccountSettingMutex.Lock()
	defer fake.deleteAccountSettingMutex.Unlock()
	fake.DeleteAccountSettingStub = nil
	fake.deleteAccountSettingReturns = struct {
		result1 *ecs.DeleteAccountSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAccountSettingReturnsOnCall(i int, result1 *ecs.DeleteAccountSettingOutput, result2 error) {
	fake.deleteAccountSettingMutex.Lock()
	defer fake.deleteAccountSettingMutex.Unlock()
	fake.DeleteAccountSettingStub = nil
	if fake.deleteAccountSettingReturnsOnCall == nil {
		fake.deleteAccountSettingReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteAccountSettingOutput
			result2 error
		})
	}
	fake.deleteAccountSettingReturnsOnCall[i] = struct {
		result1 *ecs.DeleteAccountSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAccountSettingRequest(arg1 *ecs.DeleteAccountSettingInput) (*request.Request, *ecs.DeleteAccountSettingOutput) {
	fake.deleteAccountSettingRequestMutex.Lock()
	ret, specificReturn := fake.deleteAccountSettingRequestReturnsOnCall[len(fake.deleteAccountSettingRequestArgsForCall)]
	fake.deleteAccountSettingRequestArgsForCall = append(fake.deleteAccountSettingRequestArgsForCall, struct {
		arg1 *ecs.DeleteAccountSettingInput
	}{arg1})
	fake.recordInvocation("DeleteAccountSettingRequest", []interface{}{arg1})
	fake.deleteAccountSettingRequestMutex.Unlock()
	if fake.DeleteAccountSettingRequestStub != nil {
		return fake.DeleteAccountSettingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountSettingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteAccountSettingRequestCallCount() int {
	fake.deleteAccountSettingRequestMutex.RLock()
	defer fake.deleteAccountSettingRequestMutex.RUnlock()
	return len(fake.deleteAccountSettingRequestArgsForCall)
}

func (fake *FakeECSClient) DeleteAccountSettingRequestCalls(stub func(*ecs.DeleteAccountSettingInput) (*request.Request, *ecs.DeleteAccountSettingOutput)) {
	fake.deleteAccountSettingRequestMutex.Lock()
	defer fake.deleteAccountSettingRequestMutex.Unlock()
	fake.DeleteAccountSettingRequestStub = stub
}

func (fake *FakeECSClient) DeleteAccountSettingRequestArgsForCall(i int) *ecs.DeleteAccountSettingInput {
	fake.deleteAccountSettingRequestMutex.RLock()
	defer fake.deleteAccountSettingRequestMutex.RUnlock()
	argsForCall := fake.deleteAccountSettingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteAccountSettingRequestReturns(result1 *request.Request, result2 *ecs.DeleteAccountSettingOutput) {
	fake.deleteAccountSettingRequestMutex.Lock()
	defer fake.deleteAccountSettingRequestMutex.Unlock()
	fake.DeleteAccountSettingRequestStub = nil
	fake.deleteAccountSettingRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DeleteAccountSettingOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAccountSettingRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DeleteAccountSettingOutput) {
	fake.deleteAccountSettingRequestMutex.Lock()
	defer fake.deleteAccountSettingRequestMutex.Unlock()
	fake.DeleteAccountSettingRequestStub = nil
	if fake.deleteAccountSettingRequestReturnsOnCall == nil {
		fake.deleteAccountSettingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DeleteAccountSettingOutput
		})
	}
	fake.deleteAccountSettingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DeleteAccountSettingOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAccountSettingWithContext(arg1 context.Context, arg2 *ecs.DeleteAccountSettingInput, arg3 ...request.Option) (*ecs.DeleteAccountSettingOutput, error) {
	fake.deleteAccountSettingWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAccountSettingWithContextReturnsOnCall[len(fake.deleteAccountSettingWithContextArgsForCall)]
	fake.deleteAccountSettingWithContextArgsForCall = append(fake.deleteAccountSettingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DeleteAccountSettingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteAccountSettingWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAccountSettingWithContextMutex.Unlock()
	if fake.DeleteAccountSettingWithContextStub != nil {
		return fake.DeleteAccountSettingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAccountSettingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteAccountSettingWithContextCallCount() int {
	fake.deleteAccountSettingWithContextMutex.RLock()
	defer fake.deleteAccountSettingWithContextMutex.RUnlock()
	return len(fake.deleteAccountSettingWithContextArgsForCall)
}

func (fake *FakeECSClient) DeleteAccountSettingWithContextCalls(stub func(context.Context, *ecs.DeleteAccountSettingInput, ...request.Option) (*ecs.DeleteAccountSettingOutput, error)) {
	fake.deleteAccountSettingWithContextMutex.Lock()
	defer fake.deleteAccountSettingWithContextMutex.Unlock()
	fake.DeleteAccountSettingWithContextStub = stub
}

func (fake *FakeECSClient) DeleteAccountSettingWithContextArgsForCall(i int) (context.Context, *ecs.DeleteAccountSettingInput, []request.Option) {
	fake.deleteAccountSettingWithContextMutex.RLock()
	defer fake.deleteAccountSettingWithContextMutex.RUnlock()
	argsForCall := fake.deleteAccountSettingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DeleteAccountSettingWithContextReturns(result1 *ecs.DeleteAccountSettingOutput, result2 error) {
	fake.deleteAccountSettingWithContextMutex.Lock()
	defer fake.deleteAccountSettingWithContextMutex.Unlock()
	fake.DeleteAccountSettingWithContextStub = nil
	fake.deleteAccountSettingWithContextReturns = struct {
		result1 *ecs.DeleteAccountSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAccountSettingWithContextReturnsOnCall(i int, result1 *ecs.DeleteAccountSettingOutput, result2 error) {
	fake.deleteAccountSettingWithContextMutex.Lock()
	defer fake.deleteAccountSettingWithContextMutex.Unlock()
	fake.DeleteAccountSettingWithContextStub = nil
	if fake.deleteAccountSettingWithContextReturnsOnCall == nil {
		fake.deleteAccountSettingWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteAccountSettingOutput
			result2 error
		})
	}
	fake.deleteAccountSettingWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DeleteAccountSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAttributes(arg1 *ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error) {
	fake.deleteAttributesMutex.Lock()
	ret, specificReturn := fake.deleteAttributesReturnsOnCall[len(fake.deleteAttributesArgsForCall)]
	fake.deleteAttributesArgsForCall = append(fake.deleteAttributesArgsForCall, struct {
		arg1 *ecs.DeleteAttributesInput
	}{arg1})
	fake.recordInvocation("DeleteAttributes", []interface{}{arg1})
	fake.deleteAttributesMutex.Unlock()
	if fake.DeleteAttributesStub != nil {
		return fake.DeleteAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteAttributesCallCount() int {
	fake.deleteAttributesMutex.RLock()
	defer fake.deleteAttributesMutex.RUnlock()
	return len(fake.deleteAttributesArgsForCall)
}

func (fake *FakeECSClient) DeleteAttributesCalls(stub func(*ecs.DeleteAttributesInput) (*ecs.DeleteAttributesOutput, error)) {
	fake.deleteAttributesMutex.Lock()
	defer fake.deleteAttributesMutex.Unlock()
	fake.DeleteAttributesStub = stub
}

func (fake *FakeECSClient) DeleteAttributesArgsForCall(i int) *ecs.DeleteAttributesInput {
	fake.deleteAttributesMutex.RLock()
	defer fake.deleteAttributesMutex.RUnlock()
	argsForCall := fake.deleteAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteAttributesReturns(result1 *ecs.DeleteAttributesOutput, result2 error) {
	fake.deleteAttributesMutex.Lock()
	defer fake.deleteAttributesMutex.Unlock()
	fake.DeleteAttributesStub = nil
	fake.deleteAttributesReturns = struct {
		result1 *ecs.DeleteAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAttributesReturnsOnCall(i int, result1 *ecs.DeleteAttributesOutput, result2 error) {
	fake.deleteAttributesMutex.Lock()
	defer fake.deleteAttributesMutex.Unlock()
	fake.DeleteAttributesStub = nil
	if fake.deleteAttributesReturnsOnCall == nil {
		fake.deleteAttributesReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteAttributesOutput
			result2 error
		})
	}
	fake.deleteAttributesReturnsOnCall[i] = struct {
		result1 *ecs.DeleteAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAttributesRequest(arg1 *ecs.DeleteAttributesInput) (*request.Request, *ecs.DeleteAttributesOutput) {
	fake.deleteAttributesRequestMutex.Lock()
	ret, specificReturn := fake.deleteAttributesRequestReturnsOnCall[len(fake.deleteAttributesRequestArgsForCall)]
	fake.deleteAttributesRequestArgsForCall = append(fake.deleteAttributesRequestArgsForCall, struct {
		arg1 *ecs.DeleteAttributesInput
	}{arg1})
	fake.recordInvocation("DeleteAttributesRequest", []interface{}{arg1})
	fake.deleteAttributesRequestMutex.Unlock()
	if fake.DeleteAttributesRequestStub != nil {
		return fake.DeleteAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteAttributesRequestCallCount() int {
	fake.deleteAttributesRequestMutex.RLock()
	defer fake.deleteAttributesRequestMutex.RUnlock()
	return len(fake.deleteAttributesRequestArgsForCall)
}

func (fake *FakeECSClient) DeleteAttributesRequestCalls(stub func(*ecs.DeleteAttributesInput) (*request.Request, *ecs.DeleteAttributesOutput)) {
	fake.deleteAttributesRequestMutex.Lock()
	defer fake.deleteAttributesRequestMutex.Unlock()
	fake.DeleteAttributesRequestStub = stub
}

func (fake *FakeECSClient) DeleteAttributesRequestArgsForCall(i int) *ecs.DeleteAttributesInput {
	fake.deleteAttributesRequestMutex.RLock()
	defer fake.deleteAttributesRequestMutex.RUnlock()
	argsForCall := fake.deleteAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteAttributesRequestReturns(result1 *request.Request, result2 *ecs.DeleteAttributesOutput) {
	fake.deleteAttributesRequestMutex.Lock()
	defer fake.deleteAttributesRequestMutex.Unlock()
	fake.DeleteAttributesRequestStub = nil
	fake.deleteAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DeleteAttributesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DeleteAttributesOutput) {
	fake.deleteAttributesRequestMutex.Lock()
	defer fake.deleteAttributesRequestMutex.Unlock()
	fake.DeleteAttributesRequestStub = nil
	if fake.deleteAttributesRequestReturnsOnCall == nil {
		fake.deleteAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DeleteAttributesOutput
		})
	}
	fake.deleteAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DeleteAttributesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAttributesWithContext(arg1 context.Context, arg2 *ecs.DeleteAttributesInput, arg3 ...request.Option) (*ecs.DeleteAttributesOutput, error) {
	fake.deleteAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.deleteAttributesWithContextReturnsOnCall[len(fake.deleteAttributesWithContextArgsForCall)]
	fake.deleteAttributesWithContextArgsForCall = append(fake.deleteAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DeleteAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteAttributesWithContextMutex.Unlock()
	if fake.DeleteAttributesWithContextStub != nil {
		return fake.DeleteAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteAttributesWithContextCallCount() int {
	fake.deleteAttributesWithContextMutex.RLock()
	defer fake.deleteAttributesWithContextMutex.RUnlock()
	return len(fake.deleteAttributesWithContextArgsForCall)
}

func (fake *FakeECSClient) DeleteAttributesWithContextCalls(stub func(context.Context, *ecs.DeleteAttributesInput, ...request.Option) (*ecs.DeleteAttributesOutput, error)) {
	fake.deleteAttributesWithContextMutex.Lock()
	defer fake.deleteAttributesWithContextMutex.Unlock()
	fake.DeleteAttributesWithContextStub = stub
}

func (fake *FakeECSClient) DeleteAttributesWithContextArgsForCall(i int) (context.Context, *ecs.DeleteAttributesInput, []request.Option) {
	fake.deleteAttributesWithContextMutex.RLock()
	defer fake.deleteAttributesWithContextMutex.RUnlock()
	argsForCall := fake.deleteAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DeleteAttributesWithContextReturns(result1 *ecs.DeleteAttributesOutput, result2 error) {
	fake.deleteAttributesWithContextMutex.Lock()
	defer fake.deleteAttributesWithContextMutex.Unlock()
	fake.DeleteAttributesWithContextStub = nil
	fake.deleteAttributesWithContextReturns = struct {
		result1 *ecs.DeleteAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteAttributesWithContextReturnsOnCall(i int, result1 *ecs.DeleteAttributesOutput, result2 error) {
	fake.deleteAttributesWithContextMutex.Lock()
	defer fake.deleteAttributesWithContextMutex.Unlock()
	fake.DeleteAttributesWithContextStub = nil
	if fake.deleteAttributesWithContextReturnsOnCall == nil {
		fake.deleteAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteAttributesOutput
			result2 error
		})
	}
	fake.deleteAttributesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DeleteAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteCapacityProvider(arg1 *ecs.DeleteCapacityProviderInput) (*ecs.DeleteCapacityProviderOutput, error) {
	fake.deleteCapacityProviderMutex.Lock()
	ret, specificReturn := fake.deleteCapacityProviderReturnsOnCall[len(fake.deleteCapacityProviderArgsForCall)]
	fake.deleteCapacityProviderArgsForCall = append(fake.deleteCapacityProviderArgsForCall, struct {
		arg1 *ecs.DeleteCapacityProviderInput
	}{arg1})
	fake.recordInvocation("DeleteCapacityProvider", []interface{}{arg1})
	fake.deleteCapacityProviderMutex.Unlock()
	if fake.DeleteCapacityProviderStub != nil {
		return fake.DeleteCapacityProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteCapacityProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteCapacityProviderCallCount() int {
	fake.deleteCapacityProviderMutex.RLock()
	defer fake.deleteCapacityProviderMutex.RUnlock()
	return len(fake.deleteCapacityProviderArgsForCall)
}

func (fake *FakeECSClient) DeleteCapacityProviderCalls(stub func(*ecs.DeleteCapacityProviderInput) (*ecs.DeleteCapacityProviderOutput, error)) {
	fake.deleteCapacityProviderMutex.Lock()
	defer fake.deleteCapacityProviderMutex.Unlock()
	fake.DeleteCapacityProviderStub = stub
}

func (fake *FakeECSClient) DeleteCapacityProviderArgsForCall(i int) *ecs.DeleteCapacityProviderInput {
	fake.deleteCapacityProviderMutex.RLock()
	defer fake.deleteCapacityProviderMutex.RUnlock()
	argsForCall := fake.deleteCapacityProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteCapacityProviderReturns(result1 *ecs.DeleteCapacityProviderOutput, result2 error) {
	fake.deleteCapacityProviderMutex.Lock()
	defer fake.deleteCapacityProviderMutex.Unlock()
	fake.DeleteCapacityProviderStub = nil
	fake.deleteCapacityProviderReturns = struct {
		result1 *ecs.DeleteCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteCapacityProviderReturnsOnCall(i int, result1 *ecs.DeleteCapacityProviderOutput, result2 error) {
	fake.deleteCapacityProviderMutex.Lock()
	defer fake.deleteCapacityProviderMutex.Unlock()
	fake.DeleteCapacityProviderStub = nil
	if fake.deleteCapacityProviderReturnsOnCall == nil {
		fake.deleteCapacityProviderReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteCapacityProviderOutput
			result2 error
		})
	}
	fake.deleteCapacityProviderReturnsOnCall[i] = struct {
		result1 *ecs.DeleteCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteCapacityProviderRequest(arg1 *ecs.DeleteCapacityProviderInput) (*request.Request, *ecs.DeleteCapacityProviderOutput) {
	fake.deleteCapacityProviderRequestMutex.Lock()
	ret, specificReturn := fake.deleteCapacityProviderRequestReturnsOnCall[len(fake.deleteCapacityProviderRequestArgsForCall)]
	fake.deleteCapacityProviderRequestArgsForCall = append(fake.deleteCapacityProviderRequestArgsForCall, struct {
		arg1 *ecs.DeleteCapacityProviderInput
	}{arg1})
	fake.recordInvocation("DeleteCapacityProviderRequest", []interface{}{arg1})
	fake.deleteCapacityProviderRequestMutex.Unlock()
	if fake.DeleteCapacityProviderRequestStub != nil {
		return fake.DeleteCapacityProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteCapacityProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteCapacityProviderRequestCallCount() int {
	fake.deleteCapacityProviderRequestMutex.RLock()
	defer fake.deleteCapacityProviderRequestMutex.RUnlock()
	return len(fake.deleteCapacityProviderRequestArgsForCall)
}

func (fake *FakeECSClient) DeleteCapacityProviderRequestCalls(stub func(*ecs.DeleteCapacityProviderInput) (*request.Request, *ecs.DeleteCapacityProviderOutput)) {
	fake.deleteCapacityProviderRequestMutex.Lock()
	defer fake.deleteCapacityProviderRequestMutex.Unlock()
	fake.DeleteCapacityProviderRequestStub = stub
}

func (fake *FakeECSClient) DeleteCapacityProviderRequestArgsForCall(i int) *ecs.DeleteCapacityProviderInput {
	fake.deleteCapacityProviderRequestMutex.RLock()
	defer fake.deleteCapacityProviderRequestMutex.RUnlock()
	argsForCall := fake.deleteCapacityProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteCapacityProviderRequestReturns(result1 *request.Request, result2 *ecs.DeleteCapacityProviderOutput) {
	fake.deleteCapacityProviderRequestMutex.Lock()
	defer fake.deleteCapacityProviderRequestMutex.Unlock()
	fake.DeleteCapacityProviderRequestStub = nil
	fake.deleteCapacityProviderRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DeleteCapacityProviderOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteCapacityProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DeleteCapacityProviderOutput) {
	fake.deleteCapacityProviderRequestMutex.Lock()
	defer fake.deleteCapacityProviderRequestMutex.Unlock()
	fake.DeleteCapacityProviderRequestStub = nil
	if fake.deleteCapacityProviderRequestReturnsOnCall == nil {
		fake.deleteCapacityProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DeleteCapacityProviderOutput
		})
	}
	fake.deleteCapacityProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DeleteCapacityProviderOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteCapacityProviderWithContext(arg1 context.Context, arg2 *ecs.DeleteCapacityProviderInput, arg3 ...request.Option) (*ecs.DeleteCapacityProviderOutput, error) {
	fake.deleteCapacityProviderWithContextMutex.Lock()
	ret, specificReturn := fake.deleteCapacityProviderWithContextReturnsOnCall[len(fake.deleteCapacityProviderWithContextArgsForCall)]
	fake.deleteCapacityProviderWithContextArgsForCall = append(fake.deleteCapacityProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DeleteCapacityProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteCapacityProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteCapacityProviderWithContextMutex.Unlock()
	if fake.DeleteCapacityProviderWithContextStub != nil {
		return fake.DeleteCapacityProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteCapacityProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteCapacityProviderWithContextCallCount() int {
	fake.deleteCapacityProviderWithContextMutex.RLock()
	defer fake.deleteCapacityProviderWithContextMutex.RUnlock()
	return len(fake.deleteCapacityProviderWithContextArgsForCall)
}

func (fake *FakeECSClient) DeleteCapacityProviderWithContextCalls(stub func(context.Context, *ecs.DeleteCapacityProviderInput, ...request.Option) (*ecs.DeleteCapacityProviderOutput, error)) {
	fake.deleteCapacityProviderWithContextMutex.Lock()
	defer fake.deleteCapacityProviderWithContextMutex.Unlock()
	fake.DeleteCapacityProviderWithContextStub = stub
}

func (fake *FakeECSClient) DeleteCapacityProviderWithContextArgsForCall(i int) (context.Context, *ecs.DeleteCapacityProviderInput, []request.Option) {
	fake.deleteCapacityProviderWithContextMutex.RLock()
	defer fake.deleteCapacityProviderWithContextMutex.RUnlock()
	argsForCall := fake.deleteCapacityProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DeleteCapacityProviderWithContextReturns(result1 *ecs.DeleteCapacityProviderOutput, result2 error) {
	fake.deleteCapacityProviderWithContextMutex.Lock()
	defer fake.deleteCapacityProviderWithContextMutex.Unlock()
	fake.DeleteCapacityProviderWithContextStub = nil
	fake.deleteCapacityProviderWithContextReturns = struct {
		result1 *ecs.DeleteCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteCapacityProviderWithContextReturnsOnCall(i int, result1 *ecs.DeleteCapacityProviderOutput, result2 error) {
	fake.deleteCapacityProviderWithContextMutex.Lock()
	defer fake.deleteCapacityProviderWithContextMutex.Unlock()
	fake.DeleteCapacityProviderWithContextStub = nil
	if fake.deleteCapacityProviderWithContextReturnsOnCall == nil {
		fake.deleteCapacityProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteCapacityProviderOutput
			result2 error
		})
	}
	fake.deleteCapacityProviderWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DeleteCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteCluster(arg1 *ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error) {
	fake.deleteClusterMutex.Lock()
	ret, specificReturn := fake.deleteClusterReturnsOnCall[len(fake.deleteClusterArgsForCall)]
	fake.deleteClusterArgsForCall = append(fake.deleteClusterArgsForCall, struct {
		arg1 *ecs.DeleteClusterInput
	}{arg1})
	fake.recordInvocation("DeleteCluster", []interface{}{arg1})
	fake.deleteClusterMutex.Unlock()
	if fake.DeleteClusterStub != nil {
		return fake.DeleteClusterStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClusterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteClusterCallCount() int {
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	return len(fake.deleteClusterArgsForCall)
}

func (fake *FakeECSClient) DeleteClusterCalls(stub func(*ecs.DeleteClusterInput) (*ecs.DeleteClusterOutput, error)) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = stub
}

func (fake *FakeECSClient) DeleteClusterArgsForCall(i int) *ecs.DeleteClusterInput {
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	argsForCall := fake.deleteClusterArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteClusterReturns(result1 *ecs.DeleteClusterOutput, result2 error) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = nil
	fake.deleteClusterReturns = struct {
		result1 *ecs.DeleteClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteClusterReturnsOnCall(i int, result1 *ecs.DeleteClusterOutput, result2 error) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = nil
	if fake.deleteClusterReturnsOnCall == nil {
		fake.deleteClusterReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteClusterOutput
			result2 error
		})
	}
	fake.deleteClusterReturnsOnCall[i] = struct {
		result1 *ecs.DeleteClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteClusterRequest(arg1 *ecs.DeleteClusterInput) (*request.Request, *ecs.DeleteClusterOutput) {
	fake.deleteClusterRequestMutex.Lock()
	ret, specificReturn := fake.deleteClusterRequestReturnsOnCall[len(fake.deleteClusterRequestArgsForCall)]
	fake.deleteClusterRequestArgsForCall = append(fake.deleteClusterRequestArgsForCall, struct {
		arg1 *ecs.DeleteClusterInput
	}{arg1})
	fake.recordInvocation("DeleteClusterRequest", []interface{}{arg1})
	fake.deleteClusterRequestMutex.Unlock()
	if fake.DeleteClusterRequestStub != nil {
		return fake.DeleteClusterRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClusterRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteClusterRequestCallCount() int {
	fake.deleteClusterRequestMutex.RLock()
	defer fake.deleteClusterRequestMutex.RUnlock()
	return len(fake.deleteClusterRequestArgsForCall)
}

func (fake *FakeECSClient) DeleteClusterRequestCalls(stub func(*ecs.DeleteClusterInput) (*request.Request, *ecs.DeleteClusterOutput)) {
	fake.deleteClusterRequestMutex.Lock()
	defer fake.deleteClusterRequestMutex.Unlock()
	fake.DeleteClusterRequestStub = stub
}

func (fake *FakeECSClient) DeleteClusterRequestArgsForCall(i int) *ecs.DeleteClusterInput {
	fake.deleteClusterRequestMutex.RLock()
	defer fake.deleteClusterRequestMutex.RUnlock()
	argsForCall := fake.deleteClusterRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteClusterRequestReturns(result1 *request.Request, result2 *ecs.DeleteClusterOutput) {
	fake.deleteClusterRequestMutex.Lock()
	defer fake.deleteClusterRequestMutex.Unlock()
	fake.DeleteClusterRequestStub = nil
	fake.deleteClusterRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DeleteClusterOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteClusterRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DeleteClusterOutput) {
	fake.deleteClusterRequestMutex.Lock()
	defer fake.deleteClusterRequestMutex.Unlock()
	fake.DeleteClusterRequestStub = nil
	if fake.deleteClusterRequestReturnsOnCall == nil {
		fake.deleteClusterRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DeleteClusterOutput
		})
	}
	fake.deleteClusterRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DeleteClusterOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteClusterWithContext(arg1 context.Context, arg2 *ecs.DeleteClusterInput, arg3 ...request.Option) (*ecs.DeleteClusterOutput, error) {
	fake.deleteClusterWithContextMutex.Lock()
	ret, specificReturn := fake.deleteClusterWithContextReturnsOnCall[len(fake.deleteClusterWithContextArgsForCall)]
	fake.deleteClusterWithContextArgsForCall = append(fake.deleteClusterWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DeleteClusterInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteClusterWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteClusterWithContextMutex.Unlock()
	if fake.DeleteClusterWithContextStub != nil {
		return fake.DeleteClusterWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteClusterWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteClusterWithContextCallCount() int {
	fake.deleteClusterWithContextMutex.RLock()
	defer fake.deleteClusterWithContextMutex.RUnlock()
	return len(fake.deleteClusterWithContextArgsForCall)
}

func (fake *FakeECSClient) DeleteClusterWithContextCalls(stub func(context.Context, *ecs.DeleteClusterInput, ...request.Option) (*ecs.DeleteClusterOutput, error)) {
	fake.deleteClusterWithContextMutex.Lock()
	defer fake.deleteClusterWithContextMutex.Unlock()
	fake.DeleteClusterWithContextStub = stub
}

func (fake *FakeECSClient) DeleteClusterWithContextArgsForCall(i int) (context.Context, *ecs.DeleteClusterInput, []request.Option) {
	fake.deleteClusterWithContextMutex.RLock()
	defer fake.deleteClusterWithContextMutex.RUnlock()
	argsForCall := fake.deleteClusterWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DeleteClusterWithContextReturns(result1 *ecs.DeleteClusterOutput, result2 error) {
	fake.deleteClusterWithContextMutex.Lock()
	defer fake.deleteClusterWithContextMutex.Unlock()
	fake.DeleteClusterWithContextStub = nil
	fake.deleteClusterWithContextReturns = struct {
		result1 *ecs.DeleteClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteClusterWithContextReturnsOnCall(i int, result1 *ecs.DeleteClusterOutput, result2 error) {
	fake.deleteClusterWithContextMutex.Lock()
	defer fake.deleteClusterWithContextMutex.Unlock()
	fake.DeleteClusterWithContextStub = nil
	if fake.deleteClusterWithContextReturnsOnCall == nil {
		fake.deleteClusterWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteClusterOutput
			result2 error
		})
	}
	fake.deleteClusterWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DeleteClusterOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteService(arg1 *ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error) {
	fake.deleteServiceMutex.Lock()
	ret, specificReturn := fake.deleteServiceReturnsOnCall[len(fake.deleteServiceArgsForCall)]
	fake.deleteServiceArgsForCall = append(fake.deleteServiceArgsForCall, struct {
		arg1 *ecs.DeleteServiceInput
	}{arg1})
	fake.recordInvocation("DeleteService", []interface{}{arg1})
	fake.deleteServiceMutex.Unlock()
	if fake.DeleteServiceStub != nil {
		return fake.DeleteServiceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteServiceCallCount() int {
	fake.deleteServiceMutex.RLock()
	defer fake.deleteServiceMutex.RUnlock()
	return len(fake.deleteServiceArgsForCall)
}

func (fake *FakeECSClient) DeleteServiceCalls(stub func(*ecs.DeleteServiceInput) (*ecs.DeleteServiceOutput, error)) {
	fake.deleteServiceMutex.Lock()
	defer fake.deleteServiceMutex.Unlock()
	fake.DeleteServiceStub = stub
}

func (fake *FakeECSClient) DeleteServiceArgsForCall(i int) *ecs.DeleteServiceInput {
	fake.deleteServiceMutex.RLock()
	defer fake.deleteServiceMutex.RUnlock()
	argsForCall := fake.deleteServiceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteServiceReturns(result1 *ecs.DeleteServiceOutput, result2 error) {
	fake.deleteServiceMutex.Lock()
	defer fake.deleteServiceMutex.Unlock()
	fake.DeleteServiceStub = nil
	fake.deleteServiceReturns = struct {
		result1 *ecs.DeleteServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteServiceReturnsOnCall(i int, result1 *ecs.DeleteServiceOutput, result2 error) {
	fake.deleteServiceMutex.Lock()
	defer fake.deleteServiceMutex.Unlock()
	fake.DeleteServiceStub = nil
	if fake.deleteServiceReturnsOnCall == nil {
		fake.deleteServiceReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteServiceOutput
			result2 error
		})
	}
	fake.deleteServiceReturnsOnCall[i] = struct {
		result1 *ecs.DeleteServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteServiceRequest(arg1 *ecs.DeleteServiceInput) (*request.Request, *ecs.DeleteServiceOutput) {
	fake.deleteServiceRequestMutex.Lock()
	ret, specificReturn := fake.deleteServiceRequestReturnsOnCall[len(fake.deleteServiceRequestArgsForCall)]
	fake.deleteServiceRequestArgsForCall = append(fake.deleteServiceRequestArgsForCall, struct {
		arg1 *ecs.DeleteServiceInput
	}{arg1})
	fake.recordInvocation("DeleteServiceRequest", []interface{}{arg1})
	fake.deleteServiceRequestMutex.Unlock()
	if fake.DeleteServiceRequestStub != nil {
		return fake.DeleteServiceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteServiceRequestCallCount() int {
	fake.deleteServiceRequestMutex.RLock()
	defer fake.deleteServiceRequestMutex.RUnlock()
	return len(fake.deleteServiceRequestArgsForCall)
}

func (fake *FakeECSClient) DeleteServiceRequestCalls(stub func(*ecs.DeleteServiceInput) (*request.Request, *ecs.DeleteServiceOutput)) {
	fake.deleteServiceRequestMutex.Lock()
	defer fake.deleteServiceRequestMutex.Unlock()
	fake.DeleteServiceRequestStub = stub
}

func (fake *FakeECSClient) DeleteServiceRequestArgsForCall(i int) *ecs.DeleteServiceInput {
	fake.deleteServiceRequestMutex.RLock()
	defer fake.deleteServiceRequestMutex.RUnlock()
	argsForCall := fake.deleteServiceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteServiceRequestReturns(result1 *request.Request, result2 *ecs.DeleteServiceOutput) {
	fake.deleteServiceRequestMutex.Lock()
	defer fake.deleteServiceRequestMutex.Unlock()
	fake.DeleteServiceRequestStub = nil
	fake.deleteServiceRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DeleteServiceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteServiceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DeleteServiceOutput) {
	fake.deleteServiceRequestMutex.Lock()
	defer fake.deleteServiceRequestMutex.Unlock()
	fake.DeleteServiceRequestStub = nil
	if fake.deleteServiceRequestReturnsOnCall == nil {
		fake.deleteServiceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DeleteServiceOutput
		})
	}
	fake.deleteServiceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DeleteServiceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteServiceWithContext(arg1 context.Context, arg2 *ecs.DeleteServiceInput, arg3 ...request.Option) (*ecs.DeleteServiceOutput, error) {
	fake.deleteServiceWithContextMutex.Lock()
	ret, specificReturn := fake.deleteServiceWithContextReturnsOnCall[len(fake.deleteServiceWithContextArgsForCall)]
	fake.deleteServiceWithContextArgsForCall = append(fake.deleteServiceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DeleteServiceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteServiceWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteServiceWithContextMutex.Unlock()
	if fake.DeleteServiceWithContextStub != nil {
		return fake.DeleteServiceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteServiceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteServiceWithContextCallCount() int {
	fake.deleteServiceWithContextMutex.RLock()
	defer fake.deleteServiceWithContextMutex.RUnlock()
	return len(fake.deleteServiceWithContextArgsForCall)
}

func (fake *FakeECSClient) DeleteServiceWithContextCalls(stub func(context.Context, *ecs.DeleteServiceInput, ...request.Option) (*ecs.DeleteServiceOutput, error)) {
	fake.deleteServiceWithContextMutex.Lock()
	defer fake.deleteServiceWithContextMutex.Unlock()
	fake.DeleteServiceWithContextStub = stub
}

func (fake *FakeECSClient) DeleteServiceWithContextArgsForCall(i int) (context.Context, *ecs.DeleteServiceInput, []request.Option) {
	fake.deleteServiceWithContextMutex.RLock()
	defer fake.deleteServiceWithContextMutex.RUnlock()
	argsForCall := fake.deleteServiceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DeleteServiceWithContextReturns(result1 *ecs.DeleteServiceOutput, result2 error) {
	fake.deleteServiceWithContextMutex.Lock()
	defer fake.deleteServiceWithContextMutex.Unlock()
	fake.DeleteServiceWithContextStub = nil
	fake.deleteServiceWithContextReturns = struct {
		result1 *ecs.DeleteServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteServiceWithContextReturnsOnCall(i int, result1 *ecs.DeleteServiceOutput, result2 error) {
	fake.deleteServiceWithContextMutex.Lock()
	defer fake.deleteServiceWithContextMutex.Unlock()
	fake.DeleteServiceWithContextStub = nil
	if fake.deleteServiceWithContextReturnsOnCall == nil {
		fake.deleteServiceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteServiceOutput
			result2 error
		})
	}
	fake.deleteServiceWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DeleteServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteTaskSet(arg1 *ecs.DeleteTaskSetInput) (*ecs.DeleteTaskSetOutput, error) {
	fake.deleteTaskSetMutex.Lock()
	ret, specificReturn := fake.deleteTaskSetReturnsOnCall[len(fake.deleteTaskSetArgsForCall)]
	fake.deleteTaskSetArgsForCall = append(fake.deleteTaskSetArgsForCall, struct {
		arg1 *ecs.DeleteTaskSetInput
	}{arg1})
	fake.recordInvocation("DeleteTaskSet", []interface{}{arg1})
	fake.deleteTaskSetMutex.Unlock()
	if fake.DeleteTaskSetStub != nil {
		return fake.DeleteTaskSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTaskSetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteTaskSetCallCount() int {
	fake.deleteTaskSetMutex.RLock()
	defer fake.deleteTaskSetMutex.RUnlock()
	return len(fake.deleteTaskSetArgsForCall)
}

func (fake *FakeECSClient) DeleteTaskSetCalls(stub func(*ecs.DeleteTaskSetInput) (*ecs.DeleteTaskSetOutput, error)) {
	fake.deleteTaskSetMutex.Lock()
	defer fake.deleteTaskSetMutex.Unlock()
	fake.DeleteTaskSetStub = stub
}

func (fake *FakeECSClient) DeleteTaskSetArgsForCall(i int) *ecs.DeleteTaskSetInput {
	fake.deleteTaskSetMutex.RLock()
	defer fake.deleteTaskSetMutex.RUnlock()
	argsForCall := fake.deleteTaskSetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteTaskSetReturns(result1 *ecs.DeleteTaskSetOutput, result2 error) {
	fake.deleteTaskSetMutex.Lock()
	defer fake.deleteTaskSetMutex.Unlock()
	fake.DeleteTaskSetStub = nil
	fake.deleteTaskSetReturns = struct {
		result1 *ecs.DeleteTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteTaskSetReturnsOnCall(i int, result1 *ecs.DeleteTaskSetOutput, result2 error) {
	fake.deleteTaskSetMutex.Lock()
	defer fake.deleteTaskSetMutex.Unlock()
	fake.DeleteTaskSetStub = nil
	if fake.deleteTaskSetReturnsOnCall == nil {
		fake.deleteTaskSetReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteTaskSetOutput
			result2 error
		})
	}
	fake.deleteTaskSetReturnsOnCall[i] = struct {
		result1 *ecs.DeleteTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteTaskSetRequest(arg1 *ecs.DeleteTaskSetInput) (*request.Request, *ecs.DeleteTaskSetOutput) {
	fake.deleteTaskSetRequestMutex.Lock()
	ret, specificReturn := fake.deleteTaskSetRequestReturnsOnCall[len(fake.deleteTaskSetRequestArgsForCall)]
	fake.deleteTaskSetRequestArgsForCall = append(fake.deleteTaskSetRequestArgsForCall, struct {
		arg1 *ecs.DeleteTaskSetInput
	}{arg1})
	fake.recordInvocation("DeleteTaskSetRequest", []interface{}{arg1})
	fake.deleteTaskSetRequestMutex.Unlock()
	if fake.DeleteTaskSetRequestStub != nil {
		return fake.DeleteTaskSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTaskSetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteTaskSetRequestCallCount() int {
	fake.deleteTaskSetRequestMutex.RLock()
	defer fake.deleteTaskSetRequestMutex.RUnlock()
	return len(fake.deleteTaskSetRequestArgsForCall)
}

func (fake *FakeECSClient) DeleteTaskSetRequestCalls(stub func(*ecs.DeleteTaskSetInput) (*request.Request, *ecs.DeleteTaskSetOutput)) {
	fake.deleteTaskSetRequestMutex.Lock()
	defer fake.deleteTaskSetRequestMutex.Unlock()
	fake.DeleteTaskSetRequestStub = stub
}

func (fake *FakeECSClient) DeleteTaskSetRequestArgsForCall(i int) *ecs.DeleteTaskSetInput {
	fake.deleteTaskSetRequestMutex.RLock()
	defer fake.deleteTaskSetRequestMutex.RUnlock()
	argsForCall := fake.deleteTaskSetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeleteTaskSetRequestReturns(result1 *request.Request, result2 *ecs.DeleteTaskSetOutput) {
	fake.deleteTaskSetRequestMutex.Lock()
	defer fake.deleteTaskSetRequestMutex.Unlock()
	fake.DeleteTaskSetRequestStub = nil
	fake.deleteTaskSetRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DeleteTaskSetOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteTaskSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DeleteTaskSetOutput) {
	fake.deleteTaskSetRequestMutex.Lock()
	defer fake.deleteTaskSetRequestMutex.Unlock()
	fake.DeleteTaskSetRequestStub = nil
	if fake.deleteTaskSetRequestReturnsOnCall == nil {
		fake.deleteTaskSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DeleteTaskSetOutput
		})
	}
	fake.deleteTaskSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DeleteTaskSetOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteTaskSetWithContext(arg1 context.Context, arg2 *ecs.DeleteTaskSetInput, arg3 ...request.Option) (*ecs.DeleteTaskSetOutput, error) {
	fake.deleteTaskSetWithContextMutex.Lock()
	ret, specificReturn := fake.deleteTaskSetWithContextReturnsOnCall[len(fake.deleteTaskSetWithContextArgsForCall)]
	fake.deleteTaskSetWithContextArgsForCall = append(fake.deleteTaskSetWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DeleteTaskSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeleteTaskSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.deleteTaskSetWithContextMutex.Unlock()
	if fake.DeleteTaskSetWithContextStub != nil {
		return fake.DeleteTaskSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deleteTaskSetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeleteTaskSetWithContextCallCount() int {
	fake.deleteTaskSetWithContextMutex.RLock()
	defer fake.deleteTaskSetWithContextMutex.RUnlock()
	return len(fake.deleteTaskSetWithContextArgsForCall)
}

func (fake *FakeECSClient) DeleteTaskSetWithContextCalls(stub func(context.Context, *ecs.DeleteTaskSetInput, ...request.Option) (*ecs.DeleteTaskSetOutput, error)) {
	fake.deleteTaskSetWithContextMutex.Lock()
	defer fake.deleteTaskSetWithContextMutex.Unlock()
	fake.DeleteTaskSetWithContextStub = stub
}

func (fake *FakeECSClient) DeleteTaskSetWithContextArgsForCall(i int) (context.Context, *ecs.DeleteTaskSetInput, []request.Option) {
	fake.deleteTaskSetWithContextMutex.RLock()
	defer fake.deleteTaskSetWithContextMutex.RUnlock()
	argsForCall := fake.deleteTaskSetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DeleteTaskSetWithContextReturns(result1 *ecs.DeleteTaskSetOutput, result2 error) {
	fake.deleteTaskSetWithContextMutex.Lock()
	defer fake.deleteTaskSetWithContextMutex.Unlock()
	fake.DeleteTaskSetWithContextStub = nil
	fake.deleteTaskSetWithContextReturns = struct {
		result1 *ecs.DeleteTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeleteTaskSetWithContextReturnsOnCall(i int, result1 *ecs.DeleteTaskSetOutput, result2 error) {
	fake.deleteTaskSetWithContextMutex.Lock()
	defer fake.deleteTaskSetWithContextMutex.Unlock()
	fake.DeleteTaskSetWithContextStub = nil
	if fake.deleteTaskSetWithContextReturnsOnCall == nil {
		fake.deleteTaskSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeleteTaskSetOutput
			result2 error
		})
	}
	fake.deleteTaskSetWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DeleteTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterContainerInstance(arg1 *ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error) {
	fake.deregisterContainerInstanceMutex.Lock()
	ret, specificReturn := fake.deregisterContainerInstanceReturnsOnCall[len(fake.deregisterContainerInstanceArgsForCall)]
	fake.deregisterContainerInstanceArgsForCall = append(fake.deregisterContainerInstanceArgsForCall, struct {
		arg1 *ecs.DeregisterContainerInstanceInput
	}{arg1})
	fake.recordInvocation("DeregisterContainerInstance", []interface{}{arg1})
	fake.deregisterContainerInstanceMutex.Unlock()
	if fake.DeregisterContainerInstanceStub != nil {
		return fake.DeregisterContainerInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterContainerInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeregisterContainerInstanceCallCount() int {
	fake.deregisterContainerInstanceMutex.RLock()
	defer fake.deregisterContainerInstanceMutex.RUnlock()
	return len(fake.deregisterContainerInstanceArgsForCall)
}

func (fake *FakeECSClient) DeregisterContainerInstanceCalls(stub func(*ecs.DeregisterContainerInstanceInput) (*ecs.DeregisterContainerInstanceOutput, error)) {
	fake.deregisterContainerInstanceMutex.Lock()
	defer fake.deregisterContainerInstanceMutex.Unlock()
	fake.DeregisterContainerInstanceStub = stub
}

func (fake *FakeECSClient) DeregisterContainerInstanceArgsForCall(i int) *ecs.DeregisterContainerInstanceInput {
	fake.deregisterContainerInstanceMutex.RLock()
	defer fake.deregisterContainerInstanceMutex.RUnlock()
	argsForCall := fake.deregisterContainerInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeregisterContainerInstanceReturns(result1 *ecs.DeregisterContainerInstanceOutput, result2 error) {
	fake.deregisterContainerInstanceMutex.Lock()
	defer fake.deregisterContainerInstanceMutex.Unlock()
	fake.DeregisterContainerInstanceStub = nil
	fake.deregisterContainerInstanceReturns = struct {
		result1 *ecs.DeregisterContainerInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterContainerInstanceReturnsOnCall(i int, result1 *ecs.DeregisterContainerInstanceOutput, result2 error) {
	fake.deregisterContainerInstanceMutex.Lock()
	defer fake.deregisterContainerInstanceMutex.Unlock()
	fake.DeregisterContainerInstanceStub = nil
	if fake.deregisterContainerInstanceReturnsOnCall == nil {
		fake.deregisterContainerInstanceReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeregisterContainerInstanceOutput
			result2 error
		})
	}
	fake.deregisterContainerInstanceReturnsOnCall[i] = struct {
		result1 *ecs.DeregisterContainerInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterContainerInstanceRequest(arg1 *ecs.DeregisterContainerInstanceInput) (*request.Request, *ecs.DeregisterContainerInstanceOutput) {
	fake.deregisterContainerInstanceRequestMutex.Lock()
	ret, specificReturn := fake.deregisterContainerInstanceRequestReturnsOnCall[len(fake.deregisterContainerInstanceRequestArgsForCall)]
	fake.deregisterContainerInstanceRequestArgsForCall = append(fake.deregisterContainerInstanceRequestArgsForCall, struct {
		arg1 *ecs.DeregisterContainerInstanceInput
	}{arg1})
	fake.recordInvocation("DeregisterContainerInstanceRequest", []interface{}{arg1})
	fake.deregisterContainerInstanceRequestMutex.Unlock()
	if fake.DeregisterContainerInstanceRequestStub != nil {
		return fake.DeregisterContainerInstanceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterContainerInstanceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeregisterContainerInstanceRequestCallCount() int {
	fake.deregisterContainerInstanceRequestMutex.RLock()
	defer fake.deregisterContainerInstanceRequestMutex.RUnlock()
	return len(fake.deregisterContainerInstanceRequestArgsForCall)
}

func (fake *FakeECSClient) DeregisterContainerInstanceRequestCalls(stub func(*ecs.DeregisterContainerInstanceInput) (*request.Request, *ecs.DeregisterContainerInstanceOutput)) {
	fake.deregisterContainerInstanceRequestMutex.Lock()
	defer fake.deregisterContainerInstanceRequestMutex.Unlock()
	fake.DeregisterContainerInstanceRequestStub = stub
}

func (fake *FakeECSClient) DeregisterContainerInstanceRequestArgsForCall(i int) *ecs.DeregisterContainerInstanceInput {
	fake.deregisterContainerInstanceRequestMutex.RLock()
	defer fake.deregisterContainerInstanceRequestMutex.RUnlock()
	argsForCall := fake.deregisterContainerInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeregisterContainerInstanceRequestReturns(result1 *request.Request, result2 *ecs.DeregisterContainerInstanceOutput) {
	fake.deregisterContainerInstanceRequestMutex.Lock()
	defer fake.deregisterContainerInstanceRequestMutex.Unlock()
	fake.DeregisterContainerInstanceRequestStub = nil
	fake.deregisterContainerInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DeregisterContainerInstanceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterContainerInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DeregisterContainerInstanceOutput) {
	fake.deregisterContainerInstanceRequestMutex.Lock()
	defer fake.deregisterContainerInstanceRequestMutex.Unlock()
	fake.DeregisterContainerInstanceRequestStub = nil
	if fake.deregisterContainerInstanceRequestReturnsOnCall == nil {
		fake.deregisterContainerInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DeregisterContainerInstanceOutput
		})
	}
	fake.deregisterContainerInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DeregisterContainerInstanceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterContainerInstanceWithContext(arg1 context.Context, arg2 *ecs.DeregisterContainerInstanceInput, arg3 ...request.Option) (*ecs.DeregisterContainerInstanceOutput, error) {
	fake.deregisterContainerInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterContainerInstanceWithContextReturnsOnCall[len(fake.deregisterContainerInstanceWithContextArgsForCall)]
	fake.deregisterContainerInstanceWithContextArgsForCall = append(fake.deregisterContainerInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DeregisterContainerInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeregisterContainerInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterContainerInstanceWithContextMutex.Unlock()
	if fake.DeregisterContainerInstanceWithContextStub != nil {
		return fake.DeregisterContainerInstanceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterContainerInstanceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeregisterContainerInstanceWithContextCallCount() int {
	fake.deregisterContainerInstanceWithContextMutex.RLock()
	defer fake.deregisterContainerInstanceWithContextMutex.RUnlock()
	return len(fake.deregisterContainerInstanceWithContextArgsForCall)
}

func (fake *FakeECSClient) DeregisterContainerInstanceWithContextCalls(stub func(context.Context, *ecs.DeregisterContainerInstanceInput, ...request.Option) (*ecs.DeregisterContainerInstanceOutput, error)) {
	fake.deregisterContainerInstanceWithContextMutex.Lock()
	defer fake.deregisterContainerInstanceWithContextMutex.Unlock()
	fake.DeregisterContainerInstanceWithContextStub = stub
}

func (fake *FakeECSClient) DeregisterContainerInstanceWithContextArgsForCall(i int) (context.Context, *ecs.DeregisterContainerInstanceInput, []request.Option) {
	fake.deregisterContainerInstanceWithContextMutex.RLock()
	defer fake.deregisterContainerInstanceWithContextMutex.RUnlock()
	argsForCall := fake.deregisterContainerInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DeregisterContainerInstanceWithContextReturns(result1 *ecs.DeregisterContainerInstanceOutput, result2 error) {
	fake.deregisterContainerInstanceWithContextMutex.Lock()
	defer fake.deregisterContainerInstanceWithContextMutex.Unlock()
	fake.DeregisterContainerInstanceWithContextStub = nil
	fake.deregisterContainerInstanceWithContextReturns = struct {
		result1 *ecs.DeregisterContainerInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterContainerInstanceWithContextReturnsOnCall(i int, result1 *ecs.DeregisterContainerInstanceOutput, result2 error) {
	fake.deregisterContainerInstanceWithContextMutex.Lock()
	defer fake.deregisterContainerInstanceWithContextMutex.Unlock()
	fake.DeregisterContainerInstanceWithContextStub = nil
	if fake.deregisterContainerInstanceWithContextReturnsOnCall == nil {
		fake.deregisterContainerInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeregisterContainerInstanceOutput
			result2 error
		})
	}
	fake.deregisterContainerInstanceWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DeregisterContainerInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterTaskDefinition(arg1 *ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error) {
	fake.deregisterTaskDefinitionMutex.Lock()
	ret, specificReturn := fake.deregisterTaskDefinitionReturnsOnCall[len(fake.deregisterTaskDefinitionArgsForCall)]
	fake.deregisterTaskDefinitionArgsForCall = append(fake.deregisterTaskDefinitionArgsForCall, struct {
		arg1 *ecs.DeregisterTaskDefinitionInput
	}{arg1})
	fake.recordInvocation("DeregisterTaskDefinition", []interface{}{arg1})
	fake.deregisterTaskDefinitionMutex.Unlock()
	if fake.DeregisterTaskDefinitionStub != nil {
		return fake.DeregisterTaskDefinitionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterTaskDefinitionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeregisterTaskDefinitionCallCount() int {
	fake.deregisterTaskDefinitionMutex.RLock()
	defer fake.deregisterTaskDefinitionMutex.RUnlock()
	return len(fake.deregisterTaskDefinitionArgsForCall)
}

func (fake *FakeECSClient) DeregisterTaskDefinitionCalls(stub func(*ecs.DeregisterTaskDefinitionInput) (*ecs.DeregisterTaskDefinitionOutput, error)) {
	fake.deregisterTaskDefinitionMutex.Lock()
	defer fake.deregisterTaskDefinitionMutex.Unlock()
	fake.DeregisterTaskDefinitionStub = stub
}

func (fake *FakeECSClient) DeregisterTaskDefinitionArgsForCall(i int) *ecs.DeregisterTaskDefinitionInput {
	fake.deregisterTaskDefinitionMutex.RLock()
	defer fake.deregisterTaskDefinitionMutex.RUnlock()
	argsForCall := fake.deregisterTaskDefinitionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeregisterTaskDefinitionReturns(result1 *ecs.DeregisterTaskDefinitionOutput, result2 error) {
	fake.deregisterTaskDefinitionMutex.Lock()
	defer fake.deregisterTaskDefinitionMutex.Unlock()
	fake.DeregisterTaskDefinitionStub = nil
	fake.deregisterTaskDefinitionReturns = struct {
		result1 *ecs.DeregisterTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterTaskDefinitionReturnsOnCall(i int, result1 *ecs.DeregisterTaskDefinitionOutput, result2 error) {
	fake.deregisterTaskDefinitionMutex.Lock()
	defer fake.deregisterTaskDefinitionMutex.Unlock()
	fake.DeregisterTaskDefinitionStub = nil
	if fake.deregisterTaskDefinitionReturnsOnCall == nil {
		fake.deregisterTaskDefinitionReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeregisterTaskDefinitionOutput
			result2 error
		})
	}
	fake.deregisterTaskDefinitionReturnsOnCall[i] = struct {
		result1 *ecs.DeregisterTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterTaskDefinitionRequest(arg1 *ecs.DeregisterTaskDefinitionInput) (*request.Request, *ecs.DeregisterTaskDefinitionOutput) {
	fake.deregisterTaskDefinitionRequestMutex.Lock()
	ret, specificReturn := fake.deregisterTaskDefinitionRequestReturnsOnCall[len(fake.deregisterTaskDefinitionRequestArgsForCall)]
	fake.deregisterTaskDefinitionRequestArgsForCall = append(fake.deregisterTaskDefinitionRequestArgsForCall, struct {
		arg1 *ecs.DeregisterTaskDefinitionInput
	}{arg1})
	fake.recordInvocation("DeregisterTaskDefinitionRequest", []interface{}{arg1})
	fake.deregisterTaskDefinitionRequestMutex.Unlock()
	if fake.DeregisterTaskDefinitionRequestStub != nil {
		return fake.DeregisterTaskDefinitionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterTaskDefinitionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeregisterTaskDefinitionRequestCallCount() int {
	fake.deregisterTaskDefinitionRequestMutex.RLock()
	defer fake.deregisterTaskDefinitionRequestMutex.RUnlock()
	return len(fake.deregisterTaskDefinitionRequestArgsForCall)
}

func (fake *FakeECSClient) DeregisterTaskDefinitionRequestCalls(stub func(*ecs.DeregisterTaskDefinitionInput) (*request.Request, *ecs.DeregisterTaskDefinitionOutput)) {
	fake.deregisterTaskDefinitionRequestMutex.Lock()
	defer fake.deregisterTaskDefinitionRequestMutex.Unlock()
	fake.DeregisterTaskDefinitionRequestStub = stub
}

func (fake *FakeECSClient) DeregisterTaskDefinitionRequestArgsForCall(i int) *ecs.DeregisterTaskDefinitionInput {
	fake.deregisterTaskDefinitionRequestMutex.RLock()
	defer fake.deregisterTaskDefinitionRequestMutex.RUnlock()
	argsForCall := fake.deregisterTaskDefinitionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DeregisterTaskDefinitionRequestReturns(result1 *request.Request, result2 *ecs.DeregisterTaskDefinitionOutput) {
	fake.deregisterTaskDefinitionRequestMutex.Lock()
	defer fake.deregisterTaskDefinitionRequestMutex.Unlock()
	fake.DeregisterTaskDefinitionRequestStub = nil
	fake.deregisterTaskDefinitionRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DeregisterTaskDefinitionOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterTaskDefinitionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DeregisterTaskDefinitionOutput) {
	fake.deregisterTaskDefinitionRequestMutex.Lock()
	defer fake.deregisterTaskDefinitionRequestMutex.Unlock()
	fake.DeregisterTaskDefinitionRequestStub = nil
	if fake.deregisterTaskDefinitionRequestReturnsOnCall == nil {
		fake.deregisterTaskDefinitionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DeregisterTaskDefinitionOutput
		})
	}
	fake.deregisterTaskDefinitionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DeregisterTaskDefinitionOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterTaskDefinitionWithContext(arg1 context.Context, arg2 *ecs.DeregisterTaskDefinitionInput, arg3 ...request.Option) (*ecs.DeregisterTaskDefinitionOutput, error) {
	fake.deregisterTaskDefinitionWithContextMutex.Lock()
	ret, specificReturn := fake.deregisterTaskDefinitionWithContextReturnsOnCall[len(fake.deregisterTaskDefinitionWithContextArgsForCall)]
	fake.deregisterTaskDefinitionWithContextArgsForCall = append(fake.deregisterTaskDefinitionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DeregisterTaskDefinitionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DeregisterTaskDefinitionWithContext", []interface{}{arg1, arg2, arg3})
	fake.deregisterTaskDefinitionWithContextMutex.Unlock()
	if fake.DeregisterTaskDefinitionWithContextStub != nil {
		return fake.DeregisterTaskDefinitionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.deregisterTaskDefinitionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DeregisterTaskDefinitionWithContextCallCount() int {
	fake.deregisterTaskDefinitionWithContextMutex.RLock()
	defer fake.deregisterTaskDefinitionWithContextMutex.RUnlock()
	return len(fake.deregisterTaskDefinitionWithContextArgsForCall)
}

func (fake *FakeECSClient) DeregisterTaskDefinitionWithContextCalls(stub func(context.Context, *ecs.DeregisterTaskDefinitionInput, ...request.Option) (*ecs.DeregisterTaskDefinitionOutput, error)) {
	fake.deregisterTaskDefinitionWithContextMutex.Lock()
	defer fake.deregisterTaskDefinitionWithContextMutex.Unlock()
	fake.DeregisterTaskDefinitionWithContextStub = stub
}

func (fake *FakeECSClient) DeregisterTaskDefinitionWithContextArgsForCall(i int) (context.Context, *ecs.DeregisterTaskDefinitionInput, []request.Option) {
	fake.deregisterTaskDefinitionWithContextMutex.RLock()
	defer fake.deregisterTaskDefinitionWithContextMutex.RUnlock()
	argsForCall := fake.deregisterTaskDefinitionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DeregisterTaskDefinitionWithContextReturns(result1 *ecs.DeregisterTaskDefinitionOutput, result2 error) {
	fake.deregisterTaskDefinitionWithContextMutex.Lock()
	defer fake.deregisterTaskDefinitionWithContextMutex.Unlock()
	fake.DeregisterTaskDefinitionWithContextStub = nil
	fake.deregisterTaskDefinitionWithContextReturns = struct {
		result1 *ecs.DeregisterTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DeregisterTaskDefinitionWithContextReturnsOnCall(i int, result1 *ecs.DeregisterTaskDefinitionOutput, result2 error) {
	fake.deregisterTaskDefinitionWithContextMutex.Lock()
	defer fake.deregisterTaskDefinitionWithContextMutex.Unlock()
	fake.DeregisterTaskDefinitionWithContextStub = nil
	if fake.deregisterTaskDefinitionWithContextReturnsOnCall == nil {
		fake.deregisterTaskDefinitionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DeregisterTaskDefinitionOutput
			result2 error
		})
	}
	fake.deregisterTaskDefinitionWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DeregisterTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeCapacityProviders(arg1 *ecs.DescribeCapacityProvidersInput) (*ecs.DescribeCapacityProvidersOutput, error) {
	fake.describeCapacityProvidersMutex.Lock()
	ret, specificReturn := fake.describeCapacityProvidersReturnsOnCall[len(fake.describeCapacityProvidersArgsForCall)]
	fake.describeCapacityProvidersArgsForCall = append(fake.describeCapacityProvidersArgsForCall, struct {
		arg1 *ecs.DescribeCapacityProvidersInput
	}{arg1})
	fake.recordInvocation("DescribeCapacityProviders", []interface{}{arg1})
	fake.describeCapacityProvidersMutex.Unlock()
	if fake.DescribeCapacityProvidersStub != nil {
		return fake.DescribeCapacityProvidersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCapacityProvidersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeCapacityProvidersCallCount() int {
	fake.describeCapacityProvidersMutex.RLock()
	defer fake.describeCapacityProvidersMutex.RUnlock()
	return len(fake.describeCapacityProvidersArgsForCall)
}

func (fake *FakeECSClient) DescribeCapacityProvidersCalls(stub func(*ecs.DescribeCapacityProvidersInput) (*ecs.DescribeCapacityProvidersOutput, error)) {
	fake.describeCapacityProvidersMutex.Lock()
	defer fake.describeCapacityProvidersMutex.Unlock()
	fake.DescribeCapacityProvidersStub = stub
}

func (fake *FakeECSClient) DescribeCapacityProvidersArgsForCall(i int) *ecs.DescribeCapacityProvidersInput {
	fake.describeCapacityProvidersMutex.RLock()
	defer fake.describeCapacityProvidersMutex.RUnlock()
	argsForCall := fake.describeCapacityProvidersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeCapacityProvidersReturns(result1 *ecs.DescribeCapacityProvidersOutput, result2 error) {
	fake.describeCapacityProvidersMutex.Lock()
	defer fake.describeCapacityProvidersMutex.Unlock()
	fake.DescribeCapacityProvidersStub = nil
	fake.describeCapacityProvidersReturns = struct {
		result1 *ecs.DescribeCapacityProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeCapacityProvidersReturnsOnCall(i int, result1 *ecs.DescribeCapacityProvidersOutput, result2 error) {
	fake.describeCapacityProvidersMutex.Lock()
	defer fake.describeCapacityProvidersMutex.Unlock()
	fake.DescribeCapacityProvidersStub = nil
	if fake.describeCapacityProvidersReturnsOnCall == nil {
		fake.describeCapacityProvidersReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeCapacityProvidersOutput
			result2 error
		})
	}
	fake.describeCapacityProvidersReturnsOnCall[i] = struct {
		result1 *ecs.DescribeCapacityProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeCapacityProvidersRequest(arg1 *ecs.DescribeCapacityProvidersInput) (*request.Request, *ecs.DescribeCapacityProvidersOutput) {
	fake.describeCapacityProvidersRequestMutex.Lock()
	ret, specificReturn := fake.describeCapacityProvidersRequestReturnsOnCall[len(fake.describeCapacityProvidersRequestArgsForCall)]
	fake.describeCapacityProvidersRequestArgsForCall = append(fake.describeCapacityProvidersRequestArgsForCall, struct {
		arg1 *ecs.DescribeCapacityProvidersInput
	}{arg1})
	fake.recordInvocation("DescribeCapacityProvidersRequest", []interface{}{arg1})
	fake.describeCapacityProvidersRequestMutex.Unlock()
	if fake.DescribeCapacityProvidersRequestStub != nil {
		return fake.DescribeCapacityProvidersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCapacityProvidersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeCapacityProvidersRequestCallCount() int {
	fake.describeCapacityProvidersRequestMutex.RLock()
	defer fake.describeCapacityProvidersRequestMutex.RUnlock()
	return len(fake.describeCapacityProvidersRequestArgsForCall)
}

func (fake *FakeECSClient) DescribeCapacityProvidersRequestCalls(stub func(*ecs.DescribeCapacityProvidersInput) (*request.Request, *ecs.DescribeCapacityProvidersOutput)) {
	fake.describeCapacityProvidersRequestMutex.Lock()
	defer fake.describeCapacityProvidersRequestMutex.Unlock()
	fake.DescribeCapacityProvidersRequestStub = stub
}

func (fake *FakeECSClient) DescribeCapacityProvidersRequestArgsForCall(i int) *ecs.DescribeCapacityProvidersInput {
	fake.describeCapacityProvidersRequestMutex.RLock()
	defer fake.describeCapacityProvidersRequestMutex.RUnlock()
	argsForCall := fake.describeCapacityProvidersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeCapacityProvidersRequestReturns(result1 *request.Request, result2 *ecs.DescribeCapacityProvidersOutput) {
	fake.describeCapacityProvidersRequestMutex.Lock()
	defer fake.describeCapacityProvidersRequestMutex.Unlock()
	fake.DescribeCapacityProvidersRequestStub = nil
	fake.describeCapacityProvidersRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DescribeCapacityProvidersOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeCapacityProvidersRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DescribeCapacityProvidersOutput) {
	fake.describeCapacityProvidersRequestMutex.Lock()
	defer fake.describeCapacityProvidersRequestMutex.Unlock()
	fake.DescribeCapacityProvidersRequestStub = nil
	if fake.describeCapacityProvidersRequestReturnsOnCall == nil {
		fake.describeCapacityProvidersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DescribeCapacityProvidersOutput
		})
	}
	fake.describeCapacityProvidersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DescribeCapacityProvidersOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeCapacityProvidersWithContext(arg1 context.Context, arg2 *ecs.DescribeCapacityProvidersInput, arg3 ...request.Option) (*ecs.DescribeCapacityProvidersOutput, error) {
	fake.describeCapacityProvidersWithContextMutex.Lock()
	ret, specificReturn := fake.describeCapacityProvidersWithContextReturnsOnCall[len(fake.describeCapacityProvidersWithContextArgsForCall)]
	fake.describeCapacityProvidersWithContextArgsForCall = append(fake.describeCapacityProvidersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeCapacityProvidersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeCapacityProvidersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeCapacityProvidersWithContextMutex.Unlock()
	if fake.DescribeCapacityProvidersWithContextStub != nil {
		return fake.DescribeCapacityProvidersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeCapacityProvidersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeCapacityProvidersWithContextCallCount() int {
	fake.describeCapacityProvidersWithContextMutex.RLock()
	defer fake.describeCapacityProvidersWithContextMutex.RUnlock()
	return len(fake.describeCapacityProvidersWithContextArgsForCall)
}

func (fake *FakeECSClient) DescribeCapacityProvidersWithContextCalls(stub func(context.Context, *ecs.DescribeCapacityProvidersInput, ...request.Option) (*ecs.DescribeCapacityProvidersOutput, error)) {
	fake.describeCapacityProvidersWithContextMutex.Lock()
	defer fake.describeCapacityProvidersWithContextMutex.Unlock()
	fake.DescribeCapacityProvidersWithContextStub = stub
}

func (fake *FakeECSClient) DescribeCapacityProvidersWithContextArgsForCall(i int) (context.Context, *ecs.DescribeCapacityProvidersInput, []request.Option) {
	fake.describeCapacityProvidersWithContextMutex.RLock()
	defer fake.describeCapacityProvidersWithContextMutex.RUnlock()
	argsForCall := fake.describeCapacityProvidersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DescribeCapacityProvidersWithContextReturns(result1 *ecs.DescribeCapacityProvidersOutput, result2 error) {
	fake.describeCapacityProvidersWithContextMutex.Lock()
	defer fake.describeCapacityProvidersWithContextMutex.Unlock()
	fake.DescribeCapacityProvidersWithContextStub = nil
	fake.describeCapacityProvidersWithContextReturns = struct {
		result1 *ecs.DescribeCapacityProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeCapacityProvidersWithContextReturnsOnCall(i int, result1 *ecs.DescribeCapacityProvidersOutput, result2 error) {
	fake.describeCapacityProvidersWithContextMutex.Lock()
	defer fake.describeCapacityProvidersWithContextMutex.Unlock()
	fake.DescribeCapacityProvidersWithContextStub = nil
	if fake.describeCapacityProvidersWithContextReturnsOnCall == nil {
		fake.describeCapacityProvidersWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeCapacityProvidersOutput
			result2 error
		})
	}
	fake.describeCapacityProvidersWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DescribeCapacityProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeClusters(arg1 *ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error) {
	fake.describeClustersMutex.Lock()
	ret, specificReturn := fake.describeClustersReturnsOnCall[len(fake.describeClustersArgsForCall)]
	fake.describeClustersArgsForCall = append(fake.describeClustersArgsForCall, struct {
		arg1 *ecs.DescribeClustersInput
	}{arg1})
	fake.recordInvocation("DescribeClusters", []interface{}{arg1})
	fake.describeClustersMutex.Unlock()
	if fake.DescribeClustersStub != nil {
		return fake.DescribeClustersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClustersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeClustersCallCount() int {
	fake.describeClustersMutex.RLock()
	defer fake.describeClustersMutex.RUnlock()
	return len(fake.describeClustersArgsForCall)
}

func (fake *FakeECSClient) DescribeClustersCalls(stub func(*ecs.DescribeClustersInput) (*ecs.DescribeClustersOutput, error)) {
	fake.describeClustersMutex.Lock()
	defer fake.describeClustersMutex.Unlock()
	fake.DescribeClustersStub = stub
}

func (fake *FakeECSClient) DescribeClustersArgsForCall(i int) *ecs.DescribeClustersInput {
	fake.describeClustersMutex.RLock()
	defer fake.describeClustersMutex.RUnlock()
	argsForCall := fake.describeClustersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeClustersReturns(result1 *ecs.DescribeClustersOutput, result2 error) {
	fake.describeClustersMutex.Lock()
	defer fake.describeClustersMutex.Unlock()
	fake.DescribeClustersStub = nil
	fake.describeClustersReturns = struct {
		result1 *ecs.DescribeClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeClustersReturnsOnCall(i int, result1 *ecs.DescribeClustersOutput, result2 error) {
	fake.describeClustersMutex.Lock()
	defer fake.describeClustersMutex.Unlock()
	fake.DescribeClustersStub = nil
	if fake.describeClustersReturnsOnCall == nil {
		fake.describeClustersReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeClustersOutput
			result2 error
		})
	}
	fake.describeClustersReturnsOnCall[i] = struct {
		result1 *ecs.DescribeClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeClustersRequest(arg1 *ecs.DescribeClustersInput) (*request.Request, *ecs.DescribeClustersOutput) {
	fake.describeClustersRequestMutex.Lock()
	ret, specificReturn := fake.describeClustersRequestReturnsOnCall[len(fake.describeClustersRequestArgsForCall)]
	fake.describeClustersRequestArgsForCall = append(fake.describeClustersRequestArgsForCall, struct {
		arg1 *ecs.DescribeClustersInput
	}{arg1})
	fake.recordInvocation("DescribeClustersRequest", []interface{}{arg1})
	fake.describeClustersRequestMutex.Unlock()
	if fake.DescribeClustersRequestStub != nil {
		return fake.DescribeClustersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClustersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeClustersRequestCallCount() int {
	fake.describeClustersRequestMutex.RLock()
	defer fake.describeClustersRequestMutex.RUnlock()
	return len(fake.describeClustersRequestArgsForCall)
}

func (fake *FakeECSClient) DescribeClustersRequestCalls(stub func(*ecs.DescribeClustersInput) (*request.Request, *ecs.DescribeClustersOutput)) {
	fake.describeClustersRequestMutex.Lock()
	defer fake.describeClustersRequestMutex.Unlock()
	fake.DescribeClustersRequestStub = stub
}

func (fake *FakeECSClient) DescribeClustersRequestArgsForCall(i int) *ecs.DescribeClustersInput {
	fake.describeClustersRequestMutex.RLock()
	defer fake.describeClustersRequestMutex.RUnlock()
	argsForCall := fake.describeClustersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeClustersRequestReturns(result1 *request.Request, result2 *ecs.DescribeClustersOutput) {
	fake.describeClustersRequestMutex.Lock()
	defer fake.describeClustersRequestMutex.Unlock()
	fake.DescribeClustersRequestStub = nil
	fake.describeClustersRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DescribeClustersOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeClustersRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DescribeClustersOutput) {
	fake.describeClustersRequestMutex.Lock()
	defer fake.describeClustersRequestMutex.Unlock()
	fake.DescribeClustersRequestStub = nil
	if fake.describeClustersRequestReturnsOnCall == nil {
		fake.describeClustersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DescribeClustersOutput
		})
	}
	fake.describeClustersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DescribeClustersOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeClustersWithContext(arg1 context.Context, arg2 *ecs.DescribeClustersInput, arg3 ...request.Option) (*ecs.DescribeClustersOutput, error) {
	fake.describeClustersWithContextMutex.Lock()
	ret, specificReturn := fake.describeClustersWithContextReturnsOnCall[len(fake.describeClustersWithContextArgsForCall)]
	fake.describeClustersWithContextArgsForCall = append(fake.describeClustersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeClustersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeClustersWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeClustersWithContextMutex.Unlock()
	if fake.DescribeClustersWithContextStub != nil {
		return fake.DescribeClustersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeClustersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeClustersWithContextCallCount() int {
	fake.describeClustersWithContextMutex.RLock()
	defer fake.describeClustersWithContextMutex.RUnlock()
	return len(fake.describeClustersWithContextArgsForCall)
}

func (fake *FakeECSClient) DescribeClustersWithContextCalls(stub func(context.Context, *ecs.DescribeClustersInput, ...request.Option) (*ecs.DescribeClustersOutput, error)) {
	fake.describeClustersWithContextMutex.Lock()
	defer fake.describeClustersWithContextMutex.Unlock()
	fake.DescribeClustersWithContextStub = stub
}

func (fake *FakeECSClient) DescribeClustersWithContextArgsForCall(i int) (context.Context, *ecs.DescribeClustersInput, []request.Option) {
	fake.describeClustersWithContextMutex.RLock()
	defer fake.describeClustersWithContextMutex.RUnlock()
	argsForCall := fake.describeClustersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DescribeClustersWithContextReturns(result1 *ecs.DescribeClustersOutput, result2 error) {
	fake.describeClustersWithContextMutex.Lock()
	defer fake.describeClustersWithContextMutex.Unlock()
	fake.DescribeClustersWithContextStub = nil
	fake.describeClustersWithContextReturns = struct {
		result1 *ecs.DescribeClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeClustersWithContextReturnsOnCall(i int, result1 *ecs.DescribeClustersOutput, result2 error) {
	fake.describeClustersWithContextMutex.Lock()
	defer fake.describeClustersWithContextMutex.Unlock()
	fake.DescribeClustersWithContextStub = nil
	if fake.describeClustersWithContextReturnsOnCall == nil {
		fake.describeClustersWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeClustersOutput
			result2 error
		})
	}
	fake.describeClustersWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DescribeClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeContainerInstances(arg1 *ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error) {
	fake.describeContainerInstancesMutex.Lock()
	ret, specificReturn := fake.describeContainerInstancesReturnsOnCall[len(fake.describeContainerInstancesArgsForCall)]
	fake.describeContainerInstancesArgsForCall = append(fake.describeContainerInstancesArgsForCall, struct {
		arg1 *ecs.DescribeContainerInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeContainerInstances", []interface{}{arg1})
	fake.describeContainerInstancesMutex.Unlock()
	if fake.DescribeContainerInstancesStub != nil {
		return fake.DescribeContainerInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeContainerInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeContainerInstancesCallCount() int {
	fake.describeContainerInstancesMutex.RLock()
	defer fake.describeContainerInstancesMutex.RUnlock()
	return len(fake.describeContainerInstancesArgsForCall)
}

func (fake *FakeECSClient) DescribeContainerInstancesCalls(stub func(*ecs.DescribeContainerInstancesInput) (*ecs.DescribeContainerInstancesOutput, error)) {
	fake.describeContainerInstancesMutex.Lock()
	defer fake.describeContainerInstancesMutex.Unlock()
	fake.DescribeContainerInstancesStub = stub
}

func (fake *FakeECSClient) DescribeContainerInstancesArgsForCall(i int) *ecs.DescribeContainerInstancesInput {
	fake.describeContainerInstancesMutex.RLock()
	defer fake.describeContainerInstancesMutex.RUnlock()
	argsForCall := fake.describeContainerInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeContainerInstancesReturns(result1 *ecs.DescribeContainerInstancesOutput, result2 error) {
	fake.describeContainerInstancesMutex.Lock()
	defer fake.describeContainerInstancesMutex.Unlock()
	fake.DescribeContainerInstancesStub = nil
	fake.describeContainerInstancesReturns = struct {
		result1 *ecs.DescribeContainerInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeContainerInstancesReturnsOnCall(i int, result1 *ecs.DescribeContainerInstancesOutput, result2 error) {
	fake.describeContainerInstancesMutex.Lock()
	defer fake.describeContainerInstancesMutex.Unlock()
	fake.DescribeContainerInstancesStub = nil
	if fake.describeContainerInstancesReturnsOnCall == nil {
		fake.describeContainerInstancesReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeContainerInstancesOutput
			result2 error
		})
	}
	fake.describeContainerInstancesReturnsOnCall[i] = struct {
		result1 *ecs.DescribeContainerInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeContainerInstancesRequest(arg1 *ecs.DescribeContainerInstancesInput) (*request.Request, *ecs.DescribeContainerInstancesOutput) {
	fake.describeContainerInstancesRequestMutex.Lock()
	ret, specificReturn := fake.describeContainerInstancesRequestReturnsOnCall[len(fake.describeContainerInstancesRequestArgsForCall)]
	fake.describeContainerInstancesRequestArgsForCall = append(fake.describeContainerInstancesRequestArgsForCall, struct {
		arg1 *ecs.DescribeContainerInstancesInput
	}{arg1})
	fake.recordInvocation("DescribeContainerInstancesRequest", []interface{}{arg1})
	fake.describeContainerInstancesRequestMutex.Unlock()
	if fake.DescribeContainerInstancesRequestStub != nil {
		return fake.DescribeContainerInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeContainerInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeContainerInstancesRequestCallCount() int {
	fake.describeContainerInstancesRequestMutex.RLock()
	defer fake.describeContainerInstancesRequestMutex.RUnlock()
	return len(fake.describeContainerInstancesRequestArgsForCall)
}

func (fake *FakeECSClient) DescribeContainerInstancesRequestCalls(stub func(*ecs.DescribeContainerInstancesInput) (*request.Request, *ecs.DescribeContainerInstancesOutput)) {
	fake.describeContainerInstancesRequestMutex.Lock()
	defer fake.describeContainerInstancesRequestMutex.Unlock()
	fake.DescribeContainerInstancesRequestStub = stub
}

func (fake *FakeECSClient) DescribeContainerInstancesRequestArgsForCall(i int) *ecs.DescribeContainerInstancesInput {
	fake.describeContainerInstancesRequestMutex.RLock()
	defer fake.describeContainerInstancesRequestMutex.RUnlock()
	argsForCall := fake.describeContainerInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeContainerInstancesRequestReturns(result1 *request.Request, result2 *ecs.DescribeContainerInstancesOutput) {
	fake.describeContainerInstancesRequestMutex.Lock()
	defer fake.describeContainerInstancesRequestMutex.Unlock()
	fake.DescribeContainerInstancesRequestStub = nil
	fake.describeContainerInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DescribeContainerInstancesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeContainerInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DescribeContainerInstancesOutput) {
	fake.describeContainerInstancesRequestMutex.Lock()
	defer fake.describeContainerInstancesRequestMutex.Unlock()
	fake.DescribeContainerInstancesRequestStub = nil
	if fake.describeContainerInstancesRequestReturnsOnCall == nil {
		fake.describeContainerInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DescribeContainerInstancesOutput
		})
	}
	fake.describeContainerInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DescribeContainerInstancesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeContainerInstancesWithContext(arg1 context.Context, arg2 *ecs.DescribeContainerInstancesInput, arg3 ...request.Option) (*ecs.DescribeContainerInstancesOutput, error) {
	fake.describeContainerInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.describeContainerInstancesWithContextReturnsOnCall[len(fake.describeContainerInstancesWithContextArgsForCall)]
	fake.describeContainerInstancesWithContextArgsForCall = append(fake.describeContainerInstancesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeContainerInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeContainerInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeContainerInstancesWithContextMutex.Unlock()
	if fake.DescribeContainerInstancesWithContextStub != nil {
		return fake.DescribeContainerInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeContainerInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeContainerInstancesWithContextCallCount() int {
	fake.describeContainerInstancesWithContextMutex.RLock()
	defer fake.describeContainerInstancesWithContextMutex.RUnlock()
	return len(fake.describeContainerInstancesWithContextArgsForCall)
}

func (fake *FakeECSClient) DescribeContainerInstancesWithContextCalls(stub func(context.Context, *ecs.DescribeContainerInstancesInput, ...request.Option) (*ecs.DescribeContainerInstancesOutput, error)) {
	fake.describeContainerInstancesWithContextMutex.Lock()
	defer fake.describeContainerInstancesWithContextMutex.Unlock()
	fake.DescribeContainerInstancesWithContextStub = stub
}

func (fake *FakeECSClient) DescribeContainerInstancesWithContextArgsForCall(i int) (context.Context, *ecs.DescribeContainerInstancesInput, []request.Option) {
	fake.describeContainerInstancesWithContextMutex.RLock()
	defer fake.describeContainerInstancesWithContextMutex.RUnlock()
	argsForCall := fake.describeContainerInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DescribeContainerInstancesWithContextReturns(result1 *ecs.DescribeContainerInstancesOutput, result2 error) {
	fake.describeContainerInstancesWithContextMutex.Lock()
	defer fake.describeContainerInstancesWithContextMutex.Unlock()
	fake.DescribeContainerInstancesWithContextStub = nil
	fake.describeContainerInstancesWithContextReturns = struct {
		result1 *ecs.DescribeContainerInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeContainerInstancesWithContextReturnsOnCall(i int, result1 *ecs.DescribeContainerInstancesOutput, result2 error) {
	fake.describeContainerInstancesWithContextMutex.Lock()
	defer fake.describeContainerInstancesWithContextMutex.Unlock()
	fake.DescribeContainerInstancesWithContextStub = nil
	if fake.describeContainerInstancesWithContextReturnsOnCall == nil {
		fake.describeContainerInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeContainerInstancesOutput
			result2 error
		})
	}
	fake.describeContainerInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DescribeContainerInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeServices(arg1 *ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error) {
	fake.describeServicesMutex.Lock()
	ret, specificReturn := fake.describeServicesReturnsOnCall[len(fake.describeServicesArgsForCall)]
	fake.describeServicesArgsForCall = append(fake.describeServicesArgsForCall, struct {
		arg1 *ecs.DescribeServicesInput
	}{arg1})
	fake.recordInvocation("DescribeServices", []interface{}{arg1})
	fake.describeServicesMutex.Unlock()
	if fake.DescribeServicesStub != nil {
		return fake.DescribeServicesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeServicesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeServicesCallCount() int {
	fake.describeServicesMutex.RLock()
	defer fake.describeServicesMutex.RUnlock()
	return len(fake.describeServicesArgsForCall)
}

func (fake *FakeECSClient) DescribeServicesCalls(stub func(*ecs.DescribeServicesInput) (*ecs.DescribeServicesOutput, error)) {
	fake.describeServicesMutex.Lock()
	defer fake.describeServicesMutex.Unlock()
	fake.DescribeServicesStub = stub
}

func (fake *FakeECSClient) DescribeServicesArgsForCall(i int) *ecs.DescribeServicesInput {
	fake.describeServicesMutex.RLock()
	defer fake.describeServicesMutex.RUnlock()
	argsForCall := fake.describeServicesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeServicesReturns(result1 *ecs.DescribeServicesOutput, result2 error) {
	fake.describeServicesMutex.Lock()
	defer fake.describeServicesMutex.Unlock()
	fake.DescribeServicesStub = nil
	fake.describeServicesReturns = struct {
		result1 *ecs.DescribeServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeServicesReturnsOnCall(i int, result1 *ecs.DescribeServicesOutput, result2 error) {
	fake.describeServicesMutex.Lock()
	defer fake.describeServicesMutex.Unlock()
	fake.DescribeServicesStub = nil
	if fake.describeServicesReturnsOnCall == nil {
		fake.describeServicesReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeServicesOutput
			result2 error
		})
	}
	fake.describeServicesReturnsOnCall[i] = struct {
		result1 *ecs.DescribeServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeServicesRequest(arg1 *ecs.DescribeServicesInput) (*request.Request, *ecs.DescribeServicesOutput) {
	fake.describeServicesRequestMutex.Lock()
	ret, specificReturn := fake.describeServicesRequestReturnsOnCall[len(fake.describeServicesRequestArgsForCall)]
	fake.describeServicesRequestArgsForCall = append(fake.describeServicesRequestArgsForCall, struct {
		arg1 *ecs.DescribeServicesInput
	}{arg1})
	fake.recordInvocation("DescribeServicesRequest", []interface{}{arg1})
	fake.describeServicesRequestMutex.Unlock()
	if fake.DescribeServicesRequestStub != nil {
		return fake.DescribeServicesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeServicesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeServicesRequestCallCount() int {
	fake.describeServicesRequestMutex.RLock()
	defer fake.describeServicesRequestMutex.RUnlock()
	return len(fake.describeServicesRequestArgsForCall)
}

func (fake *FakeECSClient) DescribeServicesRequestCalls(stub func(*ecs.DescribeServicesInput) (*request.Request, *ecs.DescribeServicesOutput)) {
	fake.describeServicesRequestMutex.Lock()
	defer fake.describeServicesRequestMutex.Unlock()
	fake.DescribeServicesRequestStub = stub
}

func (fake *FakeECSClient) DescribeServicesRequestArgsForCall(i int) *ecs.DescribeServicesInput {
	fake.describeServicesRequestMutex.RLock()
	defer fake.describeServicesRequestMutex.RUnlock()
	argsForCall := fake.describeServicesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeServicesRequestReturns(result1 *request.Request, result2 *ecs.DescribeServicesOutput) {
	fake.describeServicesRequestMutex.Lock()
	defer fake.describeServicesRequestMutex.Unlock()
	fake.DescribeServicesRequestStub = nil
	fake.describeServicesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DescribeServicesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeServicesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DescribeServicesOutput) {
	fake.describeServicesRequestMutex.Lock()
	defer fake.describeServicesRequestMutex.Unlock()
	fake.DescribeServicesRequestStub = nil
	if fake.describeServicesRequestReturnsOnCall == nil {
		fake.describeServicesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DescribeServicesOutput
		})
	}
	fake.describeServicesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DescribeServicesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeServicesWithContext(arg1 context.Context, arg2 *ecs.DescribeServicesInput, arg3 ...request.Option) (*ecs.DescribeServicesOutput, error) {
	fake.describeServicesWithContextMutex.Lock()
	ret, specificReturn := fake.describeServicesWithContextReturnsOnCall[len(fake.describeServicesWithContextArgsForCall)]
	fake.describeServicesWithContextArgsForCall = append(fake.describeServicesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeServicesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeServicesWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeServicesWithContextMutex.Unlock()
	if fake.DescribeServicesWithContextStub != nil {
		return fake.DescribeServicesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeServicesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeServicesWithContextCallCount() int {
	fake.describeServicesWithContextMutex.RLock()
	defer fake.describeServicesWithContextMutex.RUnlock()
	return len(fake.describeServicesWithContextArgsForCall)
}

func (fake *FakeECSClient) DescribeServicesWithContextCalls(stub func(context.Context, *ecs.DescribeServicesInput, ...request.Option) (*ecs.DescribeServicesOutput, error)) {
	fake.describeServicesWithContextMutex.Lock()
	defer fake.describeServicesWithContextMutex.Unlock()
	fake.DescribeServicesWithContextStub = stub
}

func (fake *FakeECSClient) DescribeServicesWithContextArgsForCall(i int) (context.Context, *ecs.DescribeServicesInput, []request.Option) {
	fake.describeServicesWithContextMutex.RLock()
	defer fake.describeServicesWithContextMutex.RUnlock()
	argsForCall := fake.describeServicesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DescribeServicesWithContextReturns(result1 *ecs.DescribeServicesOutput, result2 error) {
	fake.describeServicesWithContextMutex.Lock()
	defer fake.describeServicesWithContextMutex.Unlock()
	fake.DescribeServicesWithContextStub = nil
	fake.describeServicesWithContextReturns = struct {
		result1 *ecs.DescribeServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeServicesWithContextReturnsOnCall(i int, result1 *ecs.DescribeServicesOutput, result2 error) {
	fake.describeServicesWithContextMutex.Lock()
	defer fake.describeServicesWithContextMutex.Unlock()
	fake.DescribeServicesWithContextStub = nil
	if fake.describeServicesWithContextReturnsOnCall == nil {
		fake.describeServicesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeServicesOutput
			result2 error
		})
	}
	fake.describeServicesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DescribeServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskDefinition(arg1 *ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error) {
	fake.describeTaskDefinitionMutex.Lock()
	ret, specificReturn := fake.describeTaskDefinitionReturnsOnCall[len(fake.describeTaskDefinitionArgsForCall)]
	fake.describeTaskDefinitionArgsForCall = append(fake.describeTaskDefinitionArgsForCall, struct {
		arg1 *ecs.DescribeTaskDefinitionInput
	}{arg1})
	fake.recordInvocation("DescribeTaskDefinition", []interface{}{arg1})
	fake.describeTaskDefinitionMutex.Unlock()
	if fake.DescribeTaskDefinitionStub != nil {
		return fake.DescribeTaskDefinitionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTaskDefinitionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTaskDefinitionCallCount() int {
	fake.describeTaskDefinitionMutex.RLock()
	defer fake.describeTaskDefinitionMutex.RUnlock()
	return len(fake.describeTaskDefinitionArgsForCall)
}

func (fake *FakeECSClient) DescribeTaskDefinitionCalls(stub func(*ecs.DescribeTaskDefinitionInput) (*ecs.DescribeTaskDefinitionOutput, error)) {
	fake.describeTaskDefinitionMutex.Lock()
	defer fake.describeTaskDefinitionMutex.Unlock()
	fake.DescribeTaskDefinitionStub = stub
}

func (fake *FakeECSClient) DescribeTaskDefinitionArgsForCall(i int) *ecs.DescribeTaskDefinitionInput {
	fake.describeTaskDefinitionMutex.RLock()
	defer fake.describeTaskDefinitionMutex.RUnlock()
	argsForCall := fake.describeTaskDefinitionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeTaskDefinitionReturns(result1 *ecs.DescribeTaskDefinitionOutput, result2 error) {
	fake.describeTaskDefinitionMutex.Lock()
	defer fake.describeTaskDefinitionMutex.Unlock()
	fake.DescribeTaskDefinitionStub = nil
	fake.describeTaskDefinitionReturns = struct {
		result1 *ecs.DescribeTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskDefinitionReturnsOnCall(i int, result1 *ecs.DescribeTaskDefinitionOutput, result2 error) {
	fake.describeTaskDefinitionMutex.Lock()
	defer fake.describeTaskDefinitionMutex.Unlock()
	fake.DescribeTaskDefinitionStub = nil
	if fake.describeTaskDefinitionReturnsOnCall == nil {
		fake.describeTaskDefinitionReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeTaskDefinitionOutput
			result2 error
		})
	}
	fake.describeTaskDefinitionReturnsOnCall[i] = struct {
		result1 *ecs.DescribeTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskDefinitionRequest(arg1 *ecs.DescribeTaskDefinitionInput) (*request.Request, *ecs.DescribeTaskDefinitionOutput) {
	fake.describeTaskDefinitionRequestMutex.Lock()
	ret, specificReturn := fake.describeTaskDefinitionRequestReturnsOnCall[len(fake.describeTaskDefinitionRequestArgsForCall)]
	fake.describeTaskDefinitionRequestArgsForCall = append(fake.describeTaskDefinitionRequestArgsForCall, struct {
		arg1 *ecs.DescribeTaskDefinitionInput
	}{arg1})
	fake.recordInvocation("DescribeTaskDefinitionRequest", []interface{}{arg1})
	fake.describeTaskDefinitionRequestMutex.Unlock()
	if fake.DescribeTaskDefinitionRequestStub != nil {
		return fake.DescribeTaskDefinitionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTaskDefinitionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTaskDefinitionRequestCallCount() int {
	fake.describeTaskDefinitionRequestMutex.RLock()
	defer fake.describeTaskDefinitionRequestMutex.RUnlock()
	return len(fake.describeTaskDefinitionRequestArgsForCall)
}

func (fake *FakeECSClient) DescribeTaskDefinitionRequestCalls(stub func(*ecs.DescribeTaskDefinitionInput) (*request.Request, *ecs.DescribeTaskDefinitionOutput)) {
	fake.describeTaskDefinitionRequestMutex.Lock()
	defer fake.describeTaskDefinitionRequestMutex.Unlock()
	fake.DescribeTaskDefinitionRequestStub = stub
}

func (fake *FakeECSClient) DescribeTaskDefinitionRequestArgsForCall(i int) *ecs.DescribeTaskDefinitionInput {
	fake.describeTaskDefinitionRequestMutex.RLock()
	defer fake.describeTaskDefinitionRequestMutex.RUnlock()
	argsForCall := fake.describeTaskDefinitionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeTaskDefinitionRequestReturns(result1 *request.Request, result2 *ecs.DescribeTaskDefinitionOutput) {
	fake.describeTaskDefinitionRequestMutex.Lock()
	defer fake.describeTaskDefinitionRequestMutex.Unlock()
	fake.DescribeTaskDefinitionRequestStub = nil
	fake.describeTaskDefinitionRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DescribeTaskDefinitionOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskDefinitionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DescribeTaskDefinitionOutput) {
	fake.describeTaskDefinitionRequestMutex.Lock()
	defer fake.describeTaskDefinitionRequestMutex.Unlock()
	fake.DescribeTaskDefinitionRequestStub = nil
	if fake.describeTaskDefinitionRequestReturnsOnCall == nil {
		fake.describeTaskDefinitionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DescribeTaskDefinitionOutput
		})
	}
	fake.describeTaskDefinitionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DescribeTaskDefinitionOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskDefinitionWithContext(arg1 context.Context, arg2 *ecs.DescribeTaskDefinitionInput, arg3 ...request.Option) (*ecs.DescribeTaskDefinitionOutput, error) {
	fake.describeTaskDefinitionWithContextMutex.Lock()
	ret, specificReturn := fake.describeTaskDefinitionWithContextReturnsOnCall[len(fake.describeTaskDefinitionWithContextArgsForCall)]
	fake.describeTaskDefinitionWithContextArgsForCall = append(fake.describeTaskDefinitionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeTaskDefinitionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTaskDefinitionWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTaskDefinitionWithContextMutex.Unlock()
	if fake.DescribeTaskDefinitionWithContextStub != nil {
		return fake.DescribeTaskDefinitionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTaskDefinitionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTaskDefinitionWithContextCallCount() int {
	fake.describeTaskDefinitionWithContextMutex.RLock()
	defer fake.describeTaskDefinitionWithContextMutex.RUnlock()
	return len(fake.describeTaskDefinitionWithContextArgsForCall)
}

func (fake *FakeECSClient) DescribeTaskDefinitionWithContextCalls(stub func(context.Context, *ecs.DescribeTaskDefinitionInput, ...request.Option) (*ecs.DescribeTaskDefinitionOutput, error)) {
	fake.describeTaskDefinitionWithContextMutex.Lock()
	defer fake.describeTaskDefinitionWithContextMutex.Unlock()
	fake.DescribeTaskDefinitionWithContextStub = stub
}

func (fake *FakeECSClient) DescribeTaskDefinitionWithContextArgsForCall(i int) (context.Context, *ecs.DescribeTaskDefinitionInput, []request.Option) {
	fake.describeTaskDefinitionWithContextMutex.RLock()
	defer fake.describeTaskDefinitionWithContextMutex.RUnlock()
	argsForCall := fake.describeTaskDefinitionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DescribeTaskDefinitionWithContextReturns(result1 *ecs.DescribeTaskDefinitionOutput, result2 error) {
	fake.describeTaskDefinitionWithContextMutex.Lock()
	defer fake.describeTaskDefinitionWithContextMutex.Unlock()
	fake.DescribeTaskDefinitionWithContextStub = nil
	fake.describeTaskDefinitionWithContextReturns = struct {
		result1 *ecs.DescribeTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskDefinitionWithContextReturnsOnCall(i int, result1 *ecs.DescribeTaskDefinitionOutput, result2 error) {
	fake.describeTaskDefinitionWithContextMutex.Lock()
	defer fake.describeTaskDefinitionWithContextMutex.Unlock()
	fake.DescribeTaskDefinitionWithContextStub = nil
	if fake.describeTaskDefinitionWithContextReturnsOnCall == nil {
		fake.describeTaskDefinitionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeTaskDefinitionOutput
			result2 error
		})
	}
	fake.describeTaskDefinitionWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DescribeTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskSets(arg1 *ecs.DescribeTaskSetsInput) (*ecs.DescribeTaskSetsOutput, error) {
	fake.describeTaskSetsMutex.Lock()
	ret, specificReturn := fake.describeTaskSetsReturnsOnCall[len(fake.describeTaskSetsArgsForCall)]
	fake.describeTaskSetsArgsForCall = append(fake.describeTaskSetsArgsForCall, struct {
		arg1 *ecs.DescribeTaskSetsInput
	}{arg1})
	fake.recordInvocation("DescribeTaskSets", []interface{}{arg1})
	fake.describeTaskSetsMutex.Unlock()
	if fake.DescribeTaskSetsStub != nil {
		return fake.DescribeTaskSetsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTaskSetsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTaskSetsCallCount() int {
	fake.describeTaskSetsMutex.RLock()
	defer fake.describeTaskSetsMutex.RUnlock()
	return len(fake.describeTaskSetsArgsForCall)
}

func (fake *FakeECSClient) DescribeTaskSetsCalls(stub func(*ecs.DescribeTaskSetsInput) (*ecs.DescribeTaskSetsOutput, error)) {
	fake.describeTaskSetsMutex.Lock()
	defer fake.describeTaskSetsMutex.Unlock()
	fake.DescribeTaskSetsStub = stub
}

func (fake *FakeECSClient) DescribeTaskSetsArgsForCall(i int) *ecs.DescribeTaskSetsInput {
	fake.describeTaskSetsMutex.RLock()
	defer fake.describeTaskSetsMutex.RUnlock()
	argsForCall := fake.describeTaskSetsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeTaskSetsReturns(result1 *ecs.DescribeTaskSetsOutput, result2 error) {
	fake.describeTaskSetsMutex.Lock()
	defer fake.describeTaskSetsMutex.Unlock()
	fake.DescribeTaskSetsStub = nil
	fake.describeTaskSetsReturns = struct {
		result1 *ecs.DescribeTaskSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskSetsReturnsOnCall(i int, result1 *ecs.DescribeTaskSetsOutput, result2 error) {
	fake.describeTaskSetsMutex.Lock()
	defer fake.describeTaskSetsMutex.Unlock()
	fake.DescribeTaskSetsStub = nil
	if fake.describeTaskSetsReturnsOnCall == nil {
		fake.describeTaskSetsReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeTaskSetsOutput
			result2 error
		})
	}
	fake.describeTaskSetsReturnsOnCall[i] = struct {
		result1 *ecs.DescribeTaskSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskSetsRequest(arg1 *ecs.DescribeTaskSetsInput) (*request.Request, *ecs.DescribeTaskSetsOutput) {
	fake.describeTaskSetsRequestMutex.Lock()
	ret, specificReturn := fake.describeTaskSetsRequestReturnsOnCall[len(fake.describeTaskSetsRequestArgsForCall)]
	fake.describeTaskSetsRequestArgsForCall = append(fake.describeTaskSetsRequestArgsForCall, struct {
		arg1 *ecs.DescribeTaskSetsInput
	}{arg1})
	fake.recordInvocation("DescribeTaskSetsRequest", []interface{}{arg1})
	fake.describeTaskSetsRequestMutex.Unlock()
	if fake.DescribeTaskSetsRequestStub != nil {
		return fake.DescribeTaskSetsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTaskSetsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTaskSetsRequestCallCount() int {
	fake.describeTaskSetsRequestMutex.RLock()
	defer fake.describeTaskSetsRequestMutex.RUnlock()
	return len(fake.describeTaskSetsRequestArgsForCall)
}

func (fake *FakeECSClient) DescribeTaskSetsRequestCalls(stub func(*ecs.DescribeTaskSetsInput) (*request.Request, *ecs.DescribeTaskSetsOutput)) {
	fake.describeTaskSetsRequestMutex.Lock()
	defer fake.describeTaskSetsRequestMutex.Unlock()
	fake.DescribeTaskSetsRequestStub = stub
}

func (fake *FakeECSClient) DescribeTaskSetsRequestArgsForCall(i int) *ecs.DescribeTaskSetsInput {
	fake.describeTaskSetsRequestMutex.RLock()
	defer fake.describeTaskSetsRequestMutex.RUnlock()
	argsForCall := fake.describeTaskSetsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeTaskSetsRequestReturns(result1 *request.Request, result2 *ecs.DescribeTaskSetsOutput) {
	fake.describeTaskSetsRequestMutex.Lock()
	defer fake.describeTaskSetsRequestMutex.Unlock()
	fake.DescribeTaskSetsRequestStub = nil
	fake.describeTaskSetsRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DescribeTaskSetsOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskSetsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DescribeTaskSetsOutput) {
	fake.describeTaskSetsRequestMutex.Lock()
	defer fake.describeTaskSetsRequestMutex.Unlock()
	fake.DescribeTaskSetsRequestStub = nil
	if fake.describeTaskSetsRequestReturnsOnCall == nil {
		fake.describeTaskSetsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DescribeTaskSetsOutput
		})
	}
	fake.describeTaskSetsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DescribeTaskSetsOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskSetsWithContext(arg1 context.Context, arg2 *ecs.DescribeTaskSetsInput, arg3 ...request.Option) (*ecs.DescribeTaskSetsOutput, error) {
	fake.describeTaskSetsWithContextMutex.Lock()
	ret, specificReturn := fake.describeTaskSetsWithContextReturnsOnCall[len(fake.describeTaskSetsWithContextArgsForCall)]
	fake.describeTaskSetsWithContextArgsForCall = append(fake.describeTaskSetsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeTaskSetsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTaskSetsWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTaskSetsWithContextMutex.Unlock()
	if fake.DescribeTaskSetsWithContextStub != nil {
		return fake.DescribeTaskSetsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTaskSetsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTaskSetsWithContextCallCount() int {
	fake.describeTaskSetsWithContextMutex.RLock()
	defer fake.describeTaskSetsWithContextMutex.RUnlock()
	return len(fake.describeTaskSetsWithContextArgsForCall)
}

func (fake *FakeECSClient) DescribeTaskSetsWithContextCalls(stub func(context.Context, *ecs.DescribeTaskSetsInput, ...request.Option) (*ecs.DescribeTaskSetsOutput, error)) {
	fake.describeTaskSetsWithContextMutex.Lock()
	defer fake.describeTaskSetsWithContextMutex.Unlock()
	fake.DescribeTaskSetsWithContextStub = stub
}

func (fake *FakeECSClient) DescribeTaskSetsWithContextArgsForCall(i int) (context.Context, *ecs.DescribeTaskSetsInput, []request.Option) {
	fake.describeTaskSetsWithContextMutex.RLock()
	defer fake.describeTaskSetsWithContextMutex.RUnlock()
	argsForCall := fake.describeTaskSetsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DescribeTaskSetsWithContextReturns(result1 *ecs.DescribeTaskSetsOutput, result2 error) {
	fake.describeTaskSetsWithContextMutex.Lock()
	defer fake.describeTaskSetsWithContextMutex.Unlock()
	fake.DescribeTaskSetsWithContextStub = nil
	fake.describeTaskSetsWithContextReturns = struct {
		result1 *ecs.DescribeTaskSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTaskSetsWithContextReturnsOnCall(i int, result1 *ecs.DescribeTaskSetsOutput, result2 error) {
	fake.describeTaskSetsWithContextMutex.Lock()
	defer fake.describeTaskSetsWithContextMutex.Unlock()
	fake.DescribeTaskSetsWithContextStub = nil
	if fake.describeTaskSetsWithContextReturnsOnCall == nil {
		fake.describeTaskSetsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeTaskSetsOutput
			result2 error
		})
	}
	fake.describeTaskSetsWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DescribeTaskSetsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTasks(arg1 *ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error) {
	fake.describeTasksMutex.Lock()
	ret, specificReturn := fake.describeTasksReturnsOnCall[len(fake.describeTasksArgsForCall)]
	fake.describeTasksArgsForCall = append(fake.describeTasksArgsForCall, struct {
		arg1 *ecs.DescribeTasksInput
	}{arg1})
	fake.recordInvocation("DescribeTasks", []interface{}{arg1})
	fake.describeTasksMutex.Unlock()
	if fake.DescribeTasksStub != nil {
		return fake.DescribeTasksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTasksCallCount() int {
	fake.describeTasksMutex.RLock()
	defer fake.describeTasksMutex.RUnlock()
	return len(fake.describeTasksArgsForCall)
}

func (fake *FakeECSClient) DescribeTasksCalls(stub func(*ecs.DescribeTasksInput) (*ecs.DescribeTasksOutput, error)) {
	fake.describeTasksMutex.Lock()
	defer fake.describeTasksMutex.Unlock()
	fake.DescribeTasksStub = stub
}

func (fake *FakeECSClient) DescribeTasksArgsForCall(i int) *ecs.DescribeTasksInput {
	fake.describeTasksMutex.RLock()
	defer fake.describeTasksMutex.RUnlock()
	argsForCall := fake.describeTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeTasksReturns(result1 *ecs.DescribeTasksOutput, result2 error) {
	fake.describeTasksMutex.Lock()
	defer fake.describeTasksMutex.Unlock()
	fake.DescribeTasksStub = nil
	fake.describeTasksReturns = struct {
		result1 *ecs.DescribeTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTasksReturnsOnCall(i int, result1 *ecs.DescribeTasksOutput, result2 error) {
	fake.describeTasksMutex.Lock()
	defer fake.describeTasksMutex.Unlock()
	fake.DescribeTasksStub = nil
	if fake.describeTasksReturnsOnCall == nil {
		fake.describeTasksReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeTasksOutput
			result2 error
		})
	}
	fake.describeTasksReturnsOnCall[i] = struct {
		result1 *ecs.DescribeTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTasksRequest(arg1 *ecs.DescribeTasksInput) (*request.Request, *ecs.DescribeTasksOutput) {
	fake.describeTasksRequestMutex.Lock()
	ret, specificReturn := fake.describeTasksRequestReturnsOnCall[len(fake.describeTasksRequestArgsForCall)]
	fake.describeTasksRequestArgsForCall = append(fake.describeTasksRequestArgsForCall, struct {
		arg1 *ecs.DescribeTasksInput
	}{arg1})
	fake.recordInvocation("DescribeTasksRequest", []interface{}{arg1})
	fake.describeTasksRequestMutex.Unlock()
	if fake.DescribeTasksRequestStub != nil {
		return fake.DescribeTasksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTasksRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTasksRequestCallCount() int {
	fake.describeTasksRequestMutex.RLock()
	defer fake.describeTasksRequestMutex.RUnlock()
	return len(fake.describeTasksRequestArgsForCall)
}

func (fake *FakeECSClient) DescribeTasksRequestCalls(stub func(*ecs.DescribeTasksInput) (*request.Request, *ecs.DescribeTasksOutput)) {
	fake.describeTasksRequestMutex.Lock()
	defer fake.describeTasksRequestMutex.Unlock()
	fake.DescribeTasksRequestStub = stub
}

func (fake *FakeECSClient) DescribeTasksRequestArgsForCall(i int) *ecs.DescribeTasksInput {
	fake.describeTasksRequestMutex.RLock()
	defer fake.describeTasksRequestMutex.RUnlock()
	argsForCall := fake.describeTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DescribeTasksRequestReturns(result1 *request.Request, result2 *ecs.DescribeTasksOutput) {
	fake.describeTasksRequestMutex.Lock()
	defer fake.describeTasksRequestMutex.Unlock()
	fake.DescribeTasksRequestStub = nil
	fake.describeTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DescribeTasksOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DescribeTasksOutput) {
	fake.describeTasksRequestMutex.Lock()
	defer fake.describeTasksRequestMutex.Unlock()
	fake.DescribeTasksRequestStub = nil
	if fake.describeTasksRequestReturnsOnCall == nil {
		fake.describeTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DescribeTasksOutput
		})
	}
	fake.describeTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DescribeTasksOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTasksWithContext(arg1 context.Context, arg2 *ecs.DescribeTasksInput, arg3 ...request.Option) (*ecs.DescribeTasksOutput, error) {
	fake.describeTasksWithContextMutex.Lock()
	ret, specificReturn := fake.describeTasksWithContextReturnsOnCall[len(fake.describeTasksWithContextArgsForCall)]
	fake.describeTasksWithContextArgsForCall = append(fake.describeTasksWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DescribeTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.describeTasksWithContextMutex.Unlock()
	if fake.DescribeTasksWithContextStub != nil {
		return fake.DescribeTasksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.describeTasksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DescribeTasksWithContextCallCount() int {
	fake.describeTasksWithContextMutex.RLock()
	defer fake.describeTasksWithContextMutex.RUnlock()
	return len(fake.describeTasksWithContextArgsForCall)
}

func (fake *FakeECSClient) DescribeTasksWithContextCalls(stub func(context.Context, *ecs.DescribeTasksInput, ...request.Option) (*ecs.DescribeTasksOutput, error)) {
	fake.describeTasksWithContextMutex.Lock()
	defer fake.describeTasksWithContextMutex.Unlock()
	fake.DescribeTasksWithContextStub = stub
}

func (fake *FakeECSClient) DescribeTasksWithContextArgsForCall(i int) (context.Context, *ecs.DescribeTasksInput, []request.Option) {
	fake.describeTasksWithContextMutex.RLock()
	defer fake.describeTasksWithContextMutex.RUnlock()
	argsForCall := fake.describeTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DescribeTasksWithContextReturns(result1 *ecs.DescribeTasksOutput, result2 error) {
	fake.describeTasksWithContextMutex.Lock()
	defer fake.describeTasksWithContextMutex.Unlock()
	fake.DescribeTasksWithContextStub = nil
	fake.describeTasksWithContextReturns = struct {
		result1 *ecs.DescribeTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DescribeTasksWithContextReturnsOnCall(i int, result1 *ecs.DescribeTasksOutput, result2 error) {
	fake.describeTasksWithContextMutex.Lock()
	defer fake.describeTasksWithContextMutex.Unlock()
	fake.DescribeTasksWithContextStub = nil
	if fake.describeTasksWithContextReturnsOnCall == nil {
		fake.describeTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DescribeTasksOutput
			result2 error
		})
	}
	fake.describeTasksWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DescribeTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DiscoverPollEndpoint(arg1 *ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error) {
	fake.discoverPollEndpointMutex.Lock()
	ret, specificReturn := fake.discoverPollEndpointReturnsOnCall[len(fake.discoverPollEndpointArgsForCall)]
	fake.discoverPollEndpointArgsForCall = append(fake.discoverPollEndpointArgsForCall, struct {
		arg1 *ecs.DiscoverPollEndpointInput
	}{arg1})
	fake.recordInvocation("DiscoverPollEndpoint", []interface{}{arg1})
	fake.discoverPollEndpointMutex.Unlock()
	if fake.DiscoverPollEndpointStub != nil {
		return fake.DiscoverPollEndpointStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.discoverPollEndpointReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DiscoverPollEndpointCallCount() int {
	fake.discoverPollEndpointMutex.RLock()
	defer fake.discoverPollEndpointMutex.RUnlock()
	return len(fake.discoverPollEndpointArgsForCall)
}

func (fake *FakeECSClient) DiscoverPollEndpointCalls(stub func(*ecs.DiscoverPollEndpointInput) (*ecs.DiscoverPollEndpointOutput, error)) {
	fake.discoverPollEndpointMutex.Lock()
	defer fake.discoverPollEndpointMutex.Unlock()
	fake.DiscoverPollEndpointStub = stub
}

func (fake *FakeECSClient) DiscoverPollEndpointArgsForCall(i int) *ecs.DiscoverPollEndpointInput {
	fake.discoverPollEndpointMutex.RLock()
	defer fake.discoverPollEndpointMutex.RUnlock()
	argsForCall := fake.discoverPollEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DiscoverPollEndpointReturns(result1 *ecs.DiscoverPollEndpointOutput, result2 error) {
	fake.discoverPollEndpointMutex.Lock()
	defer fake.discoverPollEndpointMutex.Unlock()
	fake.DiscoverPollEndpointStub = nil
	fake.discoverPollEndpointReturns = struct {
		result1 *ecs.DiscoverPollEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DiscoverPollEndpointReturnsOnCall(i int, result1 *ecs.DiscoverPollEndpointOutput, result2 error) {
	fake.discoverPollEndpointMutex.Lock()
	defer fake.discoverPollEndpointMutex.Unlock()
	fake.DiscoverPollEndpointStub = nil
	if fake.discoverPollEndpointReturnsOnCall == nil {
		fake.discoverPollEndpointReturnsOnCall = make(map[int]struct {
			result1 *ecs.DiscoverPollEndpointOutput
			result2 error
		})
	}
	fake.discoverPollEndpointReturnsOnCall[i] = struct {
		result1 *ecs.DiscoverPollEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DiscoverPollEndpointRequest(arg1 *ecs.DiscoverPollEndpointInput) (*request.Request, *ecs.DiscoverPollEndpointOutput) {
	fake.discoverPollEndpointRequestMutex.Lock()
	ret, specificReturn := fake.discoverPollEndpointRequestReturnsOnCall[len(fake.discoverPollEndpointRequestArgsForCall)]
	fake.discoverPollEndpointRequestArgsForCall = append(fake.discoverPollEndpointRequestArgsForCall, struct {
		arg1 *ecs.DiscoverPollEndpointInput
	}{arg1})
	fake.recordInvocation("DiscoverPollEndpointRequest", []interface{}{arg1})
	fake.discoverPollEndpointRequestMutex.Unlock()
	if fake.DiscoverPollEndpointRequestStub != nil {
		return fake.DiscoverPollEndpointRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.discoverPollEndpointRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DiscoverPollEndpointRequestCallCount() int {
	fake.discoverPollEndpointRequestMutex.RLock()
	defer fake.discoverPollEndpointRequestMutex.RUnlock()
	return len(fake.discoverPollEndpointRequestArgsForCall)
}

func (fake *FakeECSClient) DiscoverPollEndpointRequestCalls(stub func(*ecs.DiscoverPollEndpointInput) (*request.Request, *ecs.DiscoverPollEndpointOutput)) {
	fake.discoverPollEndpointRequestMutex.Lock()
	defer fake.discoverPollEndpointRequestMutex.Unlock()
	fake.DiscoverPollEndpointRequestStub = stub
}

func (fake *FakeECSClient) DiscoverPollEndpointRequestArgsForCall(i int) *ecs.DiscoverPollEndpointInput {
	fake.discoverPollEndpointRequestMutex.RLock()
	defer fake.discoverPollEndpointRequestMutex.RUnlock()
	argsForCall := fake.discoverPollEndpointRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) DiscoverPollEndpointRequestReturns(result1 *request.Request, result2 *ecs.DiscoverPollEndpointOutput) {
	fake.discoverPollEndpointRequestMutex.Lock()
	defer fake.discoverPollEndpointRequestMutex.Unlock()
	fake.DiscoverPollEndpointRequestStub = nil
	fake.discoverPollEndpointRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.DiscoverPollEndpointOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DiscoverPollEndpointRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.DiscoverPollEndpointOutput) {
	fake.discoverPollEndpointRequestMutex.Lock()
	defer fake.discoverPollEndpointRequestMutex.Unlock()
	fake.DiscoverPollEndpointRequestStub = nil
	if fake.discoverPollEndpointRequestReturnsOnCall == nil {
		fake.discoverPollEndpointRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.DiscoverPollEndpointOutput
		})
	}
	fake.discoverPollEndpointRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.DiscoverPollEndpointOutput
	}{result1, result2}
}

func (fake *FakeECSClient) DiscoverPollEndpointWithContext(arg1 context.Context, arg2 *ecs.DiscoverPollEndpointInput, arg3 ...request.Option) (*ecs.DiscoverPollEndpointOutput, error) {
	fake.discoverPollEndpointWithContextMutex.Lock()
	ret, specificReturn := fake.discoverPollEndpointWithContextReturnsOnCall[len(fake.discoverPollEndpointWithContextArgsForCall)]
	fake.discoverPollEndpointWithContextArgsForCall = append(fake.discoverPollEndpointWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DiscoverPollEndpointInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("DiscoverPollEndpointWithContext", []interface{}{arg1, arg2, arg3})
	fake.discoverPollEndpointWithContextMutex.Unlock()
	if fake.DiscoverPollEndpointWithContextStub != nil {
		return fake.DiscoverPollEndpointWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.discoverPollEndpointWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) DiscoverPollEndpointWithContextCallCount() int {
	fake.discoverPollEndpointWithContextMutex.RLock()
	defer fake.discoverPollEndpointWithContextMutex.RUnlock()
	return len(fake.discoverPollEndpointWithContextArgsForCall)
}

func (fake *FakeECSClient) DiscoverPollEndpointWithContextCalls(stub func(context.Context, *ecs.DiscoverPollEndpointInput, ...request.Option) (*ecs.DiscoverPollEndpointOutput, error)) {
	fake.discoverPollEndpointWithContextMutex.Lock()
	defer fake.discoverPollEndpointWithContextMutex.Unlock()
	fake.DiscoverPollEndpointWithContextStub = stub
}

func (fake *FakeECSClient) DiscoverPollEndpointWithContextArgsForCall(i int) (context.Context, *ecs.DiscoverPollEndpointInput, []request.Option) {
	fake.discoverPollEndpointWithContextMutex.RLock()
	defer fake.discoverPollEndpointWithContextMutex.RUnlock()
	argsForCall := fake.discoverPollEndpointWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) DiscoverPollEndpointWithContextReturns(result1 *ecs.DiscoverPollEndpointOutput, result2 error) {
	fake.discoverPollEndpointWithContextMutex.Lock()
	defer fake.discoverPollEndpointWithContextMutex.Unlock()
	fake.DiscoverPollEndpointWithContextStub = nil
	fake.discoverPollEndpointWithContextReturns = struct {
		result1 *ecs.DiscoverPollEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) DiscoverPollEndpointWithContextReturnsOnCall(i int, result1 *ecs.DiscoverPollEndpointOutput, result2 error) {
	fake.discoverPollEndpointWithContextMutex.Lock()
	defer fake.discoverPollEndpointWithContextMutex.Unlock()
	fake.DiscoverPollEndpointWithContextStub = nil
	if fake.discoverPollEndpointWithContextReturnsOnCall == nil {
		fake.discoverPollEndpointWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.DiscoverPollEndpointOutput
			result2 error
		})
	}
	fake.discoverPollEndpointWithContextReturnsOnCall[i] = struct {
		result1 *ecs.DiscoverPollEndpointOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListAccountSettings(arg1 *ecs.ListAccountSettingsInput) (*ecs.ListAccountSettingsOutput, error) {
	fake.listAccountSettingsMutex.Lock()
	ret, specificReturn := fake.listAccountSettingsReturnsOnCall[len(fake.listAccountSettingsArgsForCall)]
	fake.listAccountSettingsArgsForCall = append(fake.listAccountSettingsArgsForCall, struct {
		arg1 *ecs.ListAccountSettingsInput
	}{arg1})
	fake.recordInvocation("ListAccountSettings", []interface{}{arg1})
	fake.listAccountSettingsMutex.Unlock()
	if fake.ListAccountSettingsStub != nil {
		return fake.ListAccountSettingsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccountSettingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListAccountSettingsCallCount() int {
	fake.listAccountSettingsMutex.RLock()
	defer fake.listAccountSettingsMutex.RUnlock()
	return len(fake.listAccountSettingsArgsForCall)
}

func (fake *FakeECSClient) ListAccountSettingsCalls(stub func(*ecs.ListAccountSettingsInput) (*ecs.ListAccountSettingsOutput, error)) {
	fake.listAccountSettingsMutex.Lock()
	defer fake.listAccountSettingsMutex.Unlock()
	fake.ListAccountSettingsStub = stub
}

func (fake *FakeECSClient) ListAccountSettingsArgsForCall(i int) *ecs.ListAccountSettingsInput {
	fake.listAccountSettingsMutex.RLock()
	defer fake.listAccountSettingsMutex.RUnlock()
	argsForCall := fake.listAccountSettingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListAccountSettingsReturns(result1 *ecs.ListAccountSettingsOutput, result2 error) {
	fake.listAccountSettingsMutex.Lock()
	defer fake.listAccountSettingsMutex.Unlock()
	fake.ListAccountSettingsStub = nil
	fake.listAccountSettingsReturns = struct {
		result1 *ecs.ListAccountSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListAccountSettingsReturnsOnCall(i int, result1 *ecs.ListAccountSettingsOutput, result2 error) {
	fake.listAccountSettingsMutex.Lock()
	defer fake.listAccountSettingsMutex.Unlock()
	fake.ListAccountSettingsStub = nil
	if fake.listAccountSettingsReturnsOnCall == nil {
		fake.listAccountSettingsReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListAccountSettingsOutput
			result2 error
		})
	}
	fake.listAccountSettingsReturnsOnCall[i] = struct {
		result1 *ecs.ListAccountSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListAccountSettingsPages(arg1 *ecs.ListAccountSettingsInput, arg2 func(*ecs.ListAccountSettingsOutput, bool) bool) error {
	fake.listAccountSettingsPagesMutex.Lock()
	ret, specificReturn := fake.listAccountSettingsPagesReturnsOnCall[len(fake.listAccountSettingsPagesArgsForCall)]
	fake.listAccountSettingsPagesArgsForCall = append(fake.listAccountSettingsPagesArgsForCall, struct {
		arg1 *ecs.ListAccountSettingsInput
		arg2 func(*ecs.ListAccountSettingsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListAccountSettingsPages", []interface{}{arg1, arg2})
	fake.listAccountSettingsPagesMutex.Unlock()
	if fake.ListAccountSettingsPagesStub != nil {
		return fake.ListAccountSettingsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAccountSettingsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListAccountSettingsPagesCallCount() int {
	fake.listAccountSettingsPagesMutex.RLock()
	defer fake.listAccountSettingsPagesMutex.RUnlock()
	return len(fake.listAccountSettingsPagesArgsForCall)
}

func (fake *FakeECSClient) ListAccountSettingsPagesCalls(stub func(*ecs.ListAccountSettingsInput, func(*ecs.ListAccountSettingsOutput, bool) bool) error) {
	fake.listAccountSettingsPagesMutex.Lock()
	defer fake.listAccountSettingsPagesMutex.Unlock()
	fake.ListAccountSettingsPagesStub = stub
}

func (fake *FakeECSClient) ListAccountSettingsPagesArgsForCall(i int) (*ecs.ListAccountSettingsInput, func(*ecs.ListAccountSettingsOutput, bool) bool) {
	fake.listAccountSettingsPagesMutex.RLock()
	defer fake.listAccountSettingsPagesMutex.RUnlock()
	argsForCall := fake.listAccountSettingsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeECSClient) ListAccountSettingsPagesReturns(result1 error) {
	fake.listAccountSettingsPagesMutex.Lock()
	defer fake.listAccountSettingsPagesMutex.Unlock()
	fake.ListAccountSettingsPagesStub = nil
	fake.listAccountSettingsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListAccountSettingsPagesReturnsOnCall(i int, result1 error) {
	fake.listAccountSettingsPagesMutex.Lock()
	defer fake.listAccountSettingsPagesMutex.Unlock()
	fake.ListAccountSettingsPagesStub = nil
	if fake.listAccountSettingsPagesReturnsOnCall == nil {
		fake.listAccountSettingsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAccountSettingsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListAccountSettingsPagesWithContext(arg1 context.Context, arg2 *ecs.ListAccountSettingsInput, arg3 func(*ecs.ListAccountSettingsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAccountSettingsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAccountSettingsPagesWithContextReturnsOnCall[len(fake.listAccountSettingsPagesWithContextArgsForCall)]
	fake.listAccountSettingsPagesWithContextArgsForCall = append(fake.listAccountSettingsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListAccountSettingsInput
		arg3 func(*ecs.ListAccountSettingsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListAccountSettingsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAccountSettingsPagesWithContextMutex.Unlock()
	if fake.ListAccountSettingsPagesWithContextStub != nil {
		return fake.ListAccountSettingsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAccountSettingsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListAccountSettingsPagesWithContextCallCount() int {
	fake.listAccountSettingsPagesWithContextMutex.RLock()
	defer fake.listAccountSettingsPagesWithContextMutex.RUnlock()
	return len(fake.listAccountSettingsPagesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListAccountSettingsPagesWithContextCalls(stub func(context.Context, *ecs.ListAccountSettingsInput, func(*ecs.ListAccountSettingsOutput, bool) bool, ...request.Option) error) {
	fake.listAccountSettingsPagesWithContextMutex.Lock()
	defer fake.listAccountSettingsPagesWithContextMutex.Unlock()
	fake.ListAccountSettingsPagesWithContextStub = stub
}

func (fake *FakeECSClient) ListAccountSettingsPagesWithContextArgsForCall(i int) (context.Context, *ecs.ListAccountSettingsInput, func(*ecs.ListAccountSettingsOutput, bool) bool, []request.Option) {
	fake.listAccountSettingsPagesWithContextMutex.RLock()
	defer fake.listAccountSettingsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAccountSettingsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeECSClient) ListAccountSettingsPagesWithContextReturns(result1 error) {
	fake.listAccountSettingsPagesWithContextMutex.Lock()
	defer fake.listAccountSettingsPagesWithContextMutex.Unlock()
	fake.ListAccountSettingsPagesWithContextStub = nil
	fake.listAccountSettingsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListAccountSettingsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAccountSettingsPagesWithContextMutex.Lock()
	defer fake.listAccountSettingsPagesWithContextMutex.Unlock()
	fake.ListAccountSettingsPagesWithContextStub = nil
	if fake.listAccountSettingsPagesWithContextReturnsOnCall == nil {
		fake.listAccountSettingsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAccountSettingsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListAccountSettingsRequest(arg1 *ecs.ListAccountSettingsInput) (*request.Request, *ecs.ListAccountSettingsOutput) {
	fake.listAccountSettingsRequestMutex.Lock()
	ret, specificReturn := fake.listAccountSettingsRequestReturnsOnCall[len(fake.listAccountSettingsRequestArgsForCall)]
	fake.listAccountSettingsRequestArgsForCall = append(fake.listAccountSettingsRequestArgsForCall, struct {
		arg1 *ecs.ListAccountSettingsInput
	}{arg1})
	fake.recordInvocation("ListAccountSettingsRequest", []interface{}{arg1})
	fake.listAccountSettingsRequestMutex.Unlock()
	if fake.ListAccountSettingsRequestStub != nil {
		return fake.ListAccountSettingsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccountSettingsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListAccountSettingsRequestCallCount() int {
	fake.listAccountSettingsRequestMutex.RLock()
	defer fake.listAccountSettingsRequestMutex.RUnlock()
	return len(fake.listAccountSettingsRequestArgsForCall)
}

func (fake *FakeECSClient) ListAccountSettingsRequestCalls(stub func(*ecs.ListAccountSettingsInput) (*request.Request, *ecs.ListAccountSettingsOutput)) {
	fake.listAccountSettingsRequestMutex.Lock()
	defer fake.listAccountSettingsRequestMutex.Unlock()
	fake.ListAccountSettingsRequestStub = stub
}

func (fake *FakeECSClient) ListAccountSettingsRequestArgsForCall(i int) *ecs.ListAccountSettingsInput {
	fake.listAccountSettingsRequestMutex.RLock()
	defer fake.listAccountSettingsRequestMutex.RUnlock()
	argsForCall := fake.listAccountSettingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListAccountSettingsRequestReturns(result1 *request.Request, result2 *ecs.ListAccountSettingsOutput) {
	fake.listAccountSettingsRequestMutex.Lock()
	defer fake.listAccountSettingsRequestMutex.Unlock()
	fake.ListAccountSettingsRequestStub = nil
	fake.listAccountSettingsRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListAccountSettingsOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListAccountSettingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListAccountSettingsOutput) {
	fake.listAccountSettingsRequestMutex.Lock()
	defer fake.listAccountSettingsRequestMutex.Unlock()
	fake.ListAccountSettingsRequestStub = nil
	if fake.listAccountSettingsRequestReturnsOnCall == nil {
		fake.listAccountSettingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListAccountSettingsOutput
		})
	}
	fake.listAccountSettingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListAccountSettingsOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListAccountSettingsWithContext(arg1 context.Context, arg2 *ecs.ListAccountSettingsInput, arg3 ...request.Option) (*ecs.ListAccountSettingsOutput, error) {
	fake.listAccountSettingsWithContextMutex.Lock()
	ret, specificReturn := fake.listAccountSettingsWithContextReturnsOnCall[len(fake.listAccountSettingsWithContextArgsForCall)]
	fake.listAccountSettingsWithContextArgsForCall = append(fake.listAccountSettingsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListAccountSettingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListAccountSettingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAccountSettingsWithContextMutex.Unlock()
	if fake.ListAccountSettingsWithContextStub != nil {
		return fake.ListAccountSettingsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAccountSettingsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListAccountSettingsWithContextCallCount() int {
	fake.listAccountSettingsWithContextMutex.RLock()
	defer fake.listAccountSettingsWithContextMutex.RUnlock()
	return len(fake.listAccountSettingsWithContextArgsForCall)
}

func (fake *FakeECSClient) ListAccountSettingsWithContextCalls(stub func(context.Context, *ecs.ListAccountSettingsInput, ...request.Option) (*ecs.ListAccountSettingsOutput, error)) {
	fake.listAccountSettingsWithContextMutex.Lock()
	defer fake.listAccountSettingsWithContextMutex.Unlock()
	fake.ListAccountSettingsWithContextStub = stub
}

func (fake *FakeECSClient) ListAccountSettingsWithContextArgsForCall(i int) (context.Context, *ecs.ListAccountSettingsInput, []request.Option) {
	fake.listAccountSettingsWithContextMutex.RLock()
	defer fake.listAccountSettingsWithContextMutex.RUnlock()
	argsForCall := fake.listAccountSettingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListAccountSettingsWithContextReturns(result1 *ecs.ListAccountSettingsOutput, result2 error) {
	fake.listAccountSettingsWithContextMutex.Lock()
	defer fake.listAccountSettingsWithContextMutex.Unlock()
	fake.ListAccountSettingsWithContextStub = nil
	fake.listAccountSettingsWithContextReturns = struct {
		result1 *ecs.ListAccountSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListAccountSettingsWithContextReturnsOnCall(i int, result1 *ecs.ListAccountSettingsOutput, result2 error) {
	fake.listAccountSettingsWithContextMutex.Lock()
	defer fake.listAccountSettingsWithContextMutex.Unlock()
	fake.ListAccountSettingsWithContextStub = nil
	if fake.listAccountSettingsWithContextReturnsOnCall == nil {
		fake.listAccountSettingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListAccountSettingsOutput
			result2 error
		})
	}
	fake.listAccountSettingsWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListAccountSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListAttributes(arg1 *ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error) {
	fake.listAttributesMutex.Lock()
	ret, specificReturn := fake.listAttributesReturnsOnCall[len(fake.listAttributesArgsForCall)]
	fake.listAttributesArgsForCall = append(fake.listAttributesArgsForCall, struct {
		arg1 *ecs.ListAttributesInput
	}{arg1})
	fake.recordInvocation("ListAttributes", []interface{}{arg1})
	fake.listAttributesMutex.Unlock()
	if fake.ListAttributesStub != nil {
		return fake.ListAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListAttributesCallCount() int {
	fake.listAttributesMutex.RLock()
	defer fake.listAttributesMutex.RUnlock()
	return len(fake.listAttributesArgsForCall)
}

func (fake *FakeECSClient) ListAttributesCalls(stub func(*ecs.ListAttributesInput) (*ecs.ListAttributesOutput, error)) {
	fake.listAttributesMutex.Lock()
	defer fake.listAttributesMutex.Unlock()
	fake.ListAttributesStub = stub
}

func (fake *FakeECSClient) ListAttributesArgsForCall(i int) *ecs.ListAttributesInput {
	fake.listAttributesMutex.RLock()
	defer fake.listAttributesMutex.RUnlock()
	argsForCall := fake.listAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListAttributesReturns(result1 *ecs.ListAttributesOutput, result2 error) {
	fake.listAttributesMutex.Lock()
	defer fake.listAttributesMutex.Unlock()
	fake.ListAttributesStub = nil
	fake.listAttributesReturns = struct {
		result1 *ecs.ListAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListAttributesReturnsOnCall(i int, result1 *ecs.ListAttributesOutput, result2 error) {
	fake.listAttributesMutex.Lock()
	defer fake.listAttributesMutex.Unlock()
	fake.ListAttributesStub = nil
	if fake.listAttributesReturnsOnCall == nil {
		fake.listAttributesReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListAttributesOutput
			result2 error
		})
	}
	fake.listAttributesReturnsOnCall[i] = struct {
		result1 *ecs.ListAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListAttributesPages(arg1 *ecs.ListAttributesInput, arg2 func(*ecs.ListAttributesOutput, bool) bool) error {
	fake.listAttributesPagesMutex.Lock()
	ret, specificReturn := fake.listAttributesPagesReturnsOnCall[len(fake.listAttributesPagesArgsForCall)]
	fake.listAttributesPagesArgsForCall = append(fake.listAttributesPagesArgsForCall, struct {
		arg1 *ecs.ListAttributesInput
		arg2 func(*ecs.ListAttributesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListAttributesPages", []interface{}{arg1, arg2})
	fake.listAttributesPagesMutex.Unlock()
	if fake.ListAttributesPagesStub != nil {
		return fake.ListAttributesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAttributesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListAttributesPagesCallCount() int {
	fake.listAttributesPagesMutex.RLock()
	defer fake.listAttributesPagesMutex.RUnlock()
	return len(fake.listAttributesPagesArgsForCall)
}

func (fake *FakeECSClient) ListAttributesPagesCalls(stub func(*ecs.ListAttributesInput, func(*ecs.ListAttributesOutput, bool) bool) error) {
	fake.listAttributesPagesMutex.Lock()
	defer fake.listAttributesPagesMutex.Unlock()
	fake.ListAttributesPagesStub = stub
}

func (fake *FakeECSClient) ListAttributesPagesArgsForCall(i int) (*ecs.ListAttributesInput, func(*ecs.ListAttributesOutput, bool) bool) {
	fake.listAttributesPagesMutex.RLock()
	defer fake.listAttributesPagesMutex.RUnlock()
	argsForCall := fake.listAttributesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeECSClient) ListAttributesPagesReturns(result1 error) {
	fake.listAttributesPagesMutex.Lock()
	defer fake.listAttributesPagesMutex.Unlock()
	fake.ListAttributesPagesStub = nil
	fake.listAttributesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListAttributesPagesReturnsOnCall(i int, result1 error) {
	fake.listAttributesPagesMutex.Lock()
	defer fake.listAttributesPagesMutex.Unlock()
	fake.ListAttributesPagesStub = nil
	if fake.listAttributesPagesReturnsOnCall == nil {
		fake.listAttributesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttributesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListAttributesPagesWithContext(arg1 context.Context, arg2 *ecs.ListAttributesInput, arg3 func(*ecs.ListAttributesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listAttributesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttributesPagesWithContextReturnsOnCall[len(fake.listAttributesPagesWithContextArgsForCall)]
	fake.listAttributesPagesWithContextArgsForCall = append(fake.listAttributesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListAttributesInput
		arg3 func(*ecs.ListAttributesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListAttributesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listAttributesPagesWithContextMutex.Unlock()
	if fake.ListAttributesPagesWithContextStub != nil {
		return fake.ListAttributesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listAttributesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListAttributesPagesWithContextCallCount() int {
	fake.listAttributesPagesWithContextMutex.RLock()
	defer fake.listAttributesPagesWithContextMutex.RUnlock()
	return len(fake.listAttributesPagesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListAttributesPagesWithContextCalls(stub func(context.Context, *ecs.ListAttributesInput, func(*ecs.ListAttributesOutput, bool) bool, ...request.Option) error) {
	fake.listAttributesPagesWithContextMutex.Lock()
	defer fake.listAttributesPagesWithContextMutex.Unlock()
	fake.ListAttributesPagesWithContextStub = stub
}

func (fake *FakeECSClient) ListAttributesPagesWithContextArgsForCall(i int) (context.Context, *ecs.ListAttributesInput, func(*ecs.ListAttributesOutput, bool) bool, []request.Option) {
	fake.listAttributesPagesWithContextMutex.RLock()
	defer fake.listAttributesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listAttributesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeECSClient) ListAttributesPagesWithContextReturns(result1 error) {
	fake.listAttributesPagesWithContextMutex.Lock()
	defer fake.listAttributesPagesWithContextMutex.Unlock()
	fake.ListAttributesPagesWithContextStub = nil
	fake.listAttributesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListAttributesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listAttributesPagesWithContextMutex.Lock()
	defer fake.listAttributesPagesWithContextMutex.Unlock()
	fake.ListAttributesPagesWithContextStub = nil
	if fake.listAttributesPagesWithContextReturnsOnCall == nil {
		fake.listAttributesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listAttributesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListAttributesRequest(arg1 *ecs.ListAttributesInput) (*request.Request, *ecs.ListAttributesOutput) {
	fake.listAttributesRequestMutex.Lock()
	ret, specificReturn := fake.listAttributesRequestReturnsOnCall[len(fake.listAttributesRequestArgsForCall)]
	fake.listAttributesRequestArgsForCall = append(fake.listAttributesRequestArgsForCall, struct {
		arg1 *ecs.ListAttributesInput
	}{arg1})
	fake.recordInvocation("ListAttributesRequest", []interface{}{arg1})
	fake.listAttributesRequestMutex.Unlock()
	if fake.ListAttributesRequestStub != nil {
		return fake.ListAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListAttributesRequestCallCount() int {
	fake.listAttributesRequestMutex.RLock()
	defer fake.listAttributesRequestMutex.RUnlock()
	return len(fake.listAttributesRequestArgsForCall)
}

func (fake *FakeECSClient) ListAttributesRequestCalls(stub func(*ecs.ListAttributesInput) (*request.Request, *ecs.ListAttributesOutput)) {
	fake.listAttributesRequestMutex.Lock()
	defer fake.listAttributesRequestMutex.Unlock()
	fake.ListAttributesRequestStub = stub
}

func (fake *FakeECSClient) ListAttributesRequestArgsForCall(i int) *ecs.ListAttributesInput {
	fake.listAttributesRequestMutex.RLock()
	defer fake.listAttributesRequestMutex.RUnlock()
	argsForCall := fake.listAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListAttributesRequestReturns(result1 *request.Request, result2 *ecs.ListAttributesOutput) {
	fake.listAttributesRequestMutex.Lock()
	defer fake.listAttributesRequestMutex.Unlock()
	fake.ListAttributesRequestStub = nil
	fake.listAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListAttributesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListAttributesOutput) {
	fake.listAttributesRequestMutex.Lock()
	defer fake.listAttributesRequestMutex.Unlock()
	fake.ListAttributesRequestStub = nil
	if fake.listAttributesRequestReturnsOnCall == nil {
		fake.listAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListAttributesOutput
		})
	}
	fake.listAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListAttributesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListAttributesWithContext(arg1 context.Context, arg2 *ecs.ListAttributesInput, arg3 ...request.Option) (*ecs.ListAttributesOutput, error) {
	fake.listAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.listAttributesWithContextReturnsOnCall[len(fake.listAttributesWithContextArgsForCall)]
	fake.listAttributesWithContextArgsForCall = append(fake.listAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listAttributesWithContextMutex.Unlock()
	if fake.ListAttributesWithContextStub != nil {
		return fake.ListAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListAttributesWithContextCallCount() int {
	fake.listAttributesWithContextMutex.RLock()
	defer fake.listAttributesWithContextMutex.RUnlock()
	return len(fake.listAttributesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListAttributesWithContextCalls(stub func(context.Context, *ecs.ListAttributesInput, ...request.Option) (*ecs.ListAttributesOutput, error)) {
	fake.listAttributesWithContextMutex.Lock()
	defer fake.listAttributesWithContextMutex.Unlock()
	fake.ListAttributesWithContextStub = stub
}

func (fake *FakeECSClient) ListAttributesWithContextArgsForCall(i int) (context.Context, *ecs.ListAttributesInput, []request.Option) {
	fake.listAttributesWithContextMutex.RLock()
	defer fake.listAttributesWithContextMutex.RUnlock()
	argsForCall := fake.listAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListAttributesWithContextReturns(result1 *ecs.ListAttributesOutput, result2 error) {
	fake.listAttributesWithContextMutex.Lock()
	defer fake.listAttributesWithContextMutex.Unlock()
	fake.ListAttributesWithContextStub = nil
	fake.listAttributesWithContextReturns = struct {
		result1 *ecs.ListAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListAttributesWithContextReturnsOnCall(i int, result1 *ecs.ListAttributesOutput, result2 error) {
	fake.listAttributesWithContextMutex.Lock()
	defer fake.listAttributesWithContextMutex.Unlock()
	fake.ListAttributesWithContextStub = nil
	if fake.listAttributesWithContextReturnsOnCall == nil {
		fake.listAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListAttributesOutput
			result2 error
		})
	}
	fake.listAttributesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListClusters(arg1 *ecs.ListClustersInput) (*ecs.ListClustersOutput, error) {
	fake.listClustersMutex.Lock()
	ret, specificReturn := fake.listClustersReturnsOnCall[len(fake.listClustersArgsForCall)]
	fake.listClustersArgsForCall = append(fake.listClustersArgsForCall, struct {
		arg1 *ecs.ListClustersInput
	}{arg1})
	fake.recordInvocation("ListClusters", []interface{}{arg1})
	fake.listClustersMutex.Unlock()
	if fake.ListClustersStub != nil {
		return fake.ListClustersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listClustersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListClustersCallCount() int {
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	return len(fake.listClustersArgsForCall)
}

func (fake *FakeECSClient) ListClustersCalls(stub func(*ecs.ListClustersInput) (*ecs.ListClustersOutput, error)) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = stub
}

func (fake *FakeECSClient) ListClustersArgsForCall(i int) *ecs.ListClustersInput {
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	argsForCall := fake.listClustersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListClustersReturns(result1 *ecs.ListClustersOutput, result2 error) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = nil
	fake.listClustersReturns = struct {
		result1 *ecs.ListClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListClustersReturnsOnCall(i int, result1 *ecs.ListClustersOutput, result2 error) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = nil
	if fake.listClustersReturnsOnCall == nil {
		fake.listClustersReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListClustersOutput
			result2 error
		})
	}
	fake.listClustersReturnsOnCall[i] = struct {
		result1 *ecs.ListClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListClustersPages(arg1 *ecs.ListClustersInput, arg2 func(*ecs.ListClustersOutput, bool) bool) error {
	fake.listClustersPagesMutex.Lock()
	ret, specificReturn := fake.listClustersPagesReturnsOnCall[len(fake.listClustersPagesArgsForCall)]
	fake.listClustersPagesArgsForCall = append(fake.listClustersPagesArgsForCall, struct {
		arg1 *ecs.ListClustersInput
		arg2 func(*ecs.ListClustersOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListClustersPages", []interface{}{arg1, arg2})
	fake.listClustersPagesMutex.Unlock()
	if fake.ListClustersPagesStub != nil {
		return fake.ListClustersPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listClustersPagesReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListClustersPagesCallCount() int {
	fake.listClustersPagesMutex.RLock()
	defer fake.listClustersPagesMutex.RUnlock()
	return len(fake.listClustersPagesArgsForCall)
}

func (fake *FakeECSClient) ListClustersPagesCalls(stub func(*ecs.ListClustersInput, func(*ecs.ListClustersOutput, bool) bool) error) {
	fake.listClustersPagesMutex.Lock()
	defer fake.listClustersPagesMutex.Unlock()
	fake.ListClustersPagesStub = stub
}

func (fake *FakeECSClient) ListClustersPagesArgsForCall(i int) (*ecs.ListClustersInput, func(*ecs.ListClustersOutput, bool) bool) {
	fake.listClustersPagesMutex.RLock()
	defer fake.listClustersPagesMutex.RUnlock()
	argsForCall := fake.listClustersPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeECSClient) ListClustersPagesReturns(result1 error) {
	fake.listClustersPagesMutex.Lock()
	defer fake.listClustersPagesMutex.Unlock()
	fake.ListClustersPagesStub = nil
	fake.listClustersPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListClustersPagesReturnsOnCall(i int, result1 error) {
	fake.listClustersPagesMutex.Lock()
	defer fake.listClustersPagesMutex.Unlock()
	fake.ListClustersPagesStub = nil
	if fake.listClustersPagesReturnsOnCall == nil {
		fake.listClustersPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listClustersPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListClustersPagesWithContext(arg1 context.Context, arg2 *ecs.ListClustersInput, arg3 func(*ecs.ListClustersOutput, bool) bool, arg4 ...request.Option) error {
	fake.listClustersPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listClustersPagesWithContextReturnsOnCall[len(fake.listClustersPagesWithContextArgsForCall)]
	fake.listClustersPagesWithContextArgsForCall = append(fake.listClustersPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListClustersInput
		arg3 func(*ecs.ListClustersOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListClustersPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listClustersPagesWithContextMutex.Unlock()
	if fake.ListClustersPagesWithContextStub != nil {
		return fake.ListClustersPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listClustersPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListClustersPagesWithContextCallCount() int {
	fake.listClustersPagesWithContextMutex.RLock()
	defer fake.listClustersPagesWithContextMutex.RUnlock()
	return len(fake.listClustersPagesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListClustersPagesWithContextCalls(stub func(context.Context, *ecs.ListClustersInput, func(*ecs.ListClustersOutput, bool) bool, ...request.Option) error) {
	fake.listClustersPagesWithContextMutex.Lock()
	defer fake.listClustersPagesWithContextMutex.Unlock()
	fake.ListClustersPagesWithContextStub = stub
}

func (fake *FakeECSClient) ListClustersPagesWithContextArgsForCall(i int) (context.Context, *ecs.ListClustersInput, func(*ecs.ListClustersOutput, bool) bool, []request.Option) {
	fake.listClustersPagesWithContextMutex.RLock()
	defer fake.listClustersPagesWithContextMutex.RUnlock()
	argsForCall := fake.listClustersPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeECSClient) ListClustersPagesWithContextReturns(result1 error) {
	fake.listClustersPagesWithContextMutex.Lock()
	defer fake.listClustersPagesWithContextMutex.Unlock()
	fake.ListClustersPagesWithContextStub = nil
	fake.listClustersPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListClustersPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listClustersPagesWithContextMutex.Lock()
	defer fake.listClustersPagesWithContextMutex.Unlock()
	fake.ListClustersPagesWithContextStub = nil
	if fake.listClustersPagesWithContextReturnsOnCall == nil {
		fake.listClustersPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listClustersPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListClustersRequest(arg1 *ecs.ListClustersInput) (*request.Request, *ecs.ListClustersOutput) {
	fake.listClustersRequestMutex.Lock()
	ret, specificReturn := fake.listClustersRequestReturnsOnCall[len(fake.listClustersRequestArgsForCall)]
	fake.listClustersRequestArgsForCall = append(fake.listClustersRequestArgsForCall, struct {
		arg1 *ecs.ListClustersInput
	}{arg1})
	fake.recordInvocation("ListClustersRequest", []interface{}{arg1})
	fake.listClustersRequestMutex.Unlock()
	if fake.ListClustersRequestStub != nil {
		return fake.ListClustersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listClustersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListClustersRequestCallCount() int {
	fake.listClustersRequestMutex.RLock()
	defer fake.listClustersRequestMutex.RUnlock()
	return len(fake.listClustersRequestArgsForCall)
}

func (fake *FakeECSClient) ListClustersRequestCalls(stub func(*ecs.ListClustersInput) (*request.Request, *ecs.ListClustersOutput)) {
	fake.listClustersRequestMutex.Lock()
	defer fake.listClustersRequestMutex.Unlock()
	fake.ListClustersRequestStub = stub
}

func (fake *FakeECSClient) ListClustersRequestArgsForCall(i int) *ecs.ListClustersInput {
	fake.listClustersRequestMutex.RLock()
	defer fake.listClustersRequestMutex.RUnlock()
	argsForCall := fake.listClustersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListClustersRequestReturns(result1 *request.Request, result2 *ecs.ListClustersOutput) {
	fake.listClustersRequestMutex.Lock()
	defer fake.listClustersRequestMutex.Unlock()
	fake.ListClustersRequestStub = nil
	fake.listClustersRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListClustersOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListClustersRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListClustersOutput) {
	fake.listClustersRequestMutex.Lock()
	defer fake.listClustersRequestMutex.Unlock()
	fake.ListClustersRequestStub = nil
	if fake.listClustersRequestReturnsOnCall == nil {
		fake.listClustersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListClustersOutput
		})
	}
	fake.listClustersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListClustersOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListClustersWithContext(arg1 context.Context, arg2 *ecs.ListClustersInput, arg3 ...request.Option) (*ecs.ListClustersOutput, error) {
	fake.listClustersWithContextMutex.Lock()
	ret, specificReturn := fake.listClustersWithContextReturnsOnCall[len(fake.listClustersWithContextArgsForCall)]
	fake.listClustersWithContextArgsForCall = append(fake.listClustersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListClustersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListClustersWithContext", []interface{}{arg1, arg2, arg3})
	fake.listClustersWithContextMutex.Unlock()
	if fake.ListClustersWithContextStub != nil {
		return fake.ListClustersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listClustersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListClustersWithContextCallCount() int {
	fake.listClustersWithContextMutex.RLock()
	defer fake.listClustersWithContextMutex.RUnlock()
	return len(fake.listClustersWithContextArgsForCall)
}

func (fake *FakeECSClient) ListClustersWithContextCalls(stub func(context.Context, *ecs.ListClustersInput, ...request.Option) (*ecs.ListClustersOutput, error)) {
	fake.listClustersWithContextMutex.Lock()
	defer fake.listClustersWithContextMutex.Unlock()
	fake.ListClustersWithContextStub = stub
}

func (fake *FakeECSClient) ListClustersWithContextArgsForCall(i int) (context.Context, *ecs.ListClustersInput, []request.Option) {
	fake.listClustersWithContextMutex.RLock()
	defer fake.listClustersWithContextMutex.RUnlock()
	argsForCall := fake.listClustersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListClustersWithContextReturns(result1 *ecs.ListClustersOutput, result2 error) {
	fake.listClustersWithContextMutex.Lock()
	defer fake.listClustersWithContextMutex.Unlock()
	fake.ListClustersWithContextStub = nil
	fake.listClustersWithContextReturns = struct {
		result1 *ecs.ListClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListClustersWithContextReturnsOnCall(i int, result1 *ecs.ListClustersOutput, result2 error) {
	fake.listClustersWithContextMutex.Lock()
	defer fake.listClustersWithContextMutex.Unlock()
	fake.ListClustersWithContextStub = nil
	if fake.listClustersWithContextReturnsOnCall == nil {
		fake.listClustersWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListClustersOutput
			result2 error
		})
	}
	fake.listClustersWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListClustersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListContainerInstances(arg1 *ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error) {
	fake.listContainerInstancesMutex.Lock()
	ret, specificReturn := fake.listContainerInstancesReturnsOnCall[len(fake.listContainerInstancesArgsForCall)]
	fake.listContainerInstancesArgsForCall = append(fake.listContainerInstancesArgsForCall, struct {
		arg1 *ecs.ListContainerInstancesInput
	}{arg1})
	fake.recordInvocation("ListContainerInstances", []interface{}{arg1})
	fake.listContainerInstancesMutex.Unlock()
	if fake.ListContainerInstancesStub != nil {
		return fake.ListContainerInstancesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listContainerInstancesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListContainerInstancesCallCount() int {
	fake.listContainerInstancesMutex.RLock()
	defer fake.listContainerInstancesMutex.RUnlock()
	return len(fake.listContainerInstancesArgsForCall)
}

func (fake *FakeECSClient) ListContainerInstancesCalls(stub func(*ecs.ListContainerInstancesInput) (*ecs.ListContainerInstancesOutput, error)) {
	fake.listContainerInstancesMutex.Lock()
	defer fake.listContainerInstancesMutex.Unlock()
	fake.ListContainerInstancesStub = stub
}

func (fake *FakeECSClient) ListContainerInstancesArgsForCall(i int) *ecs.ListContainerInstancesInput {
	fake.listContainerInstancesMutex.RLock()
	defer fake.listContainerInstancesMutex.RUnlock()
	argsForCall := fake.listContainerInstancesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListContainerInstancesReturns(result1 *ecs.ListContainerInstancesOutput, result2 error) {
	fake.listContainerInstancesMutex.Lock()
	defer fake.listContainerInstancesMutex.Unlock()
	fake.ListContainerInstancesStub = nil
	fake.listContainerInstancesReturns = struct {
		result1 *ecs.ListContainerInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListContainerInstancesReturnsOnCall(i int, result1 *ecs.ListContainerInstancesOutput, result2 error) {
	fake.listContainerInstancesMutex.Lock()
	defer fake.listContainerInstancesMutex.Unlock()
	fake.ListContainerInstancesStub = nil
	if fake.listContainerInstancesReturnsOnCall == nil {
		fake.listContainerInstancesReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListContainerInstancesOutput
			result2 error
		})
	}
	fake.listContainerInstancesReturnsOnCall[i] = struct {
		result1 *ecs.ListContainerInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListContainerInstancesPages(arg1 *ecs.ListContainerInstancesInput, arg2 func(*ecs.ListContainerInstancesOutput, bool) bool) error {
	fake.listContainerInstancesPagesMutex.Lock()
	ret, specificReturn := fake.listContainerInstancesPagesReturnsOnCall[len(fake.listContainerInstancesPagesArgsForCall)]
	fake.listContainerInstancesPagesArgsForCall = append(fake.listContainerInstancesPagesArgsForCall, struct {
		arg1 *ecs.ListContainerInstancesInput
		arg2 func(*ecs.ListContainerInstancesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListContainerInstancesPages", []interface{}{arg1, arg2})
	fake.listContainerInstancesPagesMutex.Unlock()
	if fake.ListContainerInstancesPagesStub != nil {
		return fake.ListContainerInstancesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listContainerInstancesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListContainerInstancesPagesCallCount() int {
	fake.listContainerInstancesPagesMutex.RLock()
	defer fake.listContainerInstancesPagesMutex.RUnlock()
	return len(fake.listContainerInstancesPagesArgsForCall)
}

func (fake *FakeECSClient) ListContainerInstancesPagesCalls(stub func(*ecs.ListContainerInstancesInput, func(*ecs.ListContainerInstancesOutput, bool) bool) error) {
	fake.listContainerInstancesPagesMutex.Lock()
	defer fake.listContainerInstancesPagesMutex.Unlock()
	fake.ListContainerInstancesPagesStub = stub
}

func (fake *FakeECSClient) ListContainerInstancesPagesArgsForCall(i int) (*ecs.ListContainerInstancesInput, func(*ecs.ListContainerInstancesOutput, bool) bool) {
	fake.listContainerInstancesPagesMutex.RLock()
	defer fake.listContainerInstancesPagesMutex.RUnlock()
	argsForCall := fake.listContainerInstancesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeECSClient) ListContainerInstancesPagesReturns(result1 error) {
	fake.listContainerInstancesPagesMutex.Lock()
	defer fake.listContainerInstancesPagesMutex.Unlock()
	fake.ListContainerInstancesPagesStub = nil
	fake.listContainerInstancesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListContainerInstancesPagesReturnsOnCall(i int, result1 error) {
	fake.listContainerInstancesPagesMutex.Lock()
	defer fake.listContainerInstancesPagesMutex.Unlock()
	fake.ListContainerInstancesPagesStub = nil
	if fake.listContainerInstancesPagesReturnsOnCall == nil {
		fake.listContainerInstancesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listContainerInstancesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListContainerInstancesPagesWithContext(arg1 context.Context, arg2 *ecs.ListContainerInstancesInput, arg3 func(*ecs.ListContainerInstancesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listContainerInstancesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listContainerInstancesPagesWithContextReturnsOnCall[len(fake.listContainerInstancesPagesWithContextArgsForCall)]
	fake.listContainerInstancesPagesWithContextArgsForCall = append(fake.listContainerInstancesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListContainerInstancesInput
		arg3 func(*ecs.ListContainerInstancesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListContainerInstancesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listContainerInstancesPagesWithContextMutex.Unlock()
	if fake.ListContainerInstancesPagesWithContextStub != nil {
		return fake.ListContainerInstancesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listContainerInstancesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListContainerInstancesPagesWithContextCallCount() int {
	fake.listContainerInstancesPagesWithContextMutex.RLock()
	defer fake.listContainerInstancesPagesWithContextMutex.RUnlock()
	return len(fake.listContainerInstancesPagesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListContainerInstancesPagesWithContextCalls(stub func(context.Context, *ecs.ListContainerInstancesInput, func(*ecs.ListContainerInstancesOutput, bool) bool, ...request.Option) error) {
	fake.listContainerInstancesPagesWithContextMutex.Lock()
	defer fake.listContainerInstancesPagesWithContextMutex.Unlock()
	fake.ListContainerInstancesPagesWithContextStub = stub
}

func (fake *FakeECSClient) ListContainerInstancesPagesWithContextArgsForCall(i int) (context.Context, *ecs.ListContainerInstancesInput, func(*ecs.ListContainerInstancesOutput, bool) bool, []request.Option) {
	fake.listContainerInstancesPagesWithContextMutex.RLock()
	defer fake.listContainerInstancesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listContainerInstancesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeECSClient) ListContainerInstancesPagesWithContextReturns(result1 error) {
	fake.listContainerInstancesPagesWithContextMutex.Lock()
	defer fake.listContainerInstancesPagesWithContextMutex.Unlock()
	fake.ListContainerInstancesPagesWithContextStub = nil
	fake.listContainerInstancesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListContainerInstancesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listContainerInstancesPagesWithContextMutex.Lock()
	defer fake.listContainerInstancesPagesWithContextMutex.Unlock()
	fake.ListContainerInstancesPagesWithContextStub = nil
	if fake.listContainerInstancesPagesWithContextReturnsOnCall == nil {
		fake.listContainerInstancesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listContainerInstancesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListContainerInstancesRequest(arg1 *ecs.ListContainerInstancesInput) (*request.Request, *ecs.ListContainerInstancesOutput) {
	fake.listContainerInstancesRequestMutex.Lock()
	ret, specificReturn := fake.listContainerInstancesRequestReturnsOnCall[len(fake.listContainerInstancesRequestArgsForCall)]
	fake.listContainerInstancesRequestArgsForCall = append(fake.listContainerInstancesRequestArgsForCall, struct {
		arg1 *ecs.ListContainerInstancesInput
	}{arg1})
	fake.recordInvocation("ListContainerInstancesRequest", []interface{}{arg1})
	fake.listContainerInstancesRequestMutex.Unlock()
	if fake.ListContainerInstancesRequestStub != nil {
		return fake.ListContainerInstancesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listContainerInstancesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListContainerInstancesRequestCallCount() int {
	fake.listContainerInstancesRequestMutex.RLock()
	defer fake.listContainerInstancesRequestMutex.RUnlock()
	return len(fake.listContainerInstancesRequestArgsForCall)
}

func (fake *FakeECSClient) ListContainerInstancesRequestCalls(stub func(*ecs.ListContainerInstancesInput) (*request.Request, *ecs.ListContainerInstancesOutput)) {
	fake.listContainerInstancesRequestMutex.Lock()
	defer fake.listContainerInstancesRequestMutex.Unlock()
	fake.ListContainerInstancesRequestStub = stub
}

func (fake *FakeECSClient) ListContainerInstancesRequestArgsForCall(i int) *ecs.ListContainerInstancesInput {
	fake.listContainerInstancesRequestMutex.RLock()
	defer fake.listContainerInstancesRequestMutex.RUnlock()
	argsForCall := fake.listContainerInstancesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListContainerInstancesRequestReturns(result1 *request.Request, result2 *ecs.ListContainerInstancesOutput) {
	fake.listContainerInstancesRequestMutex.Lock()
	defer fake.listContainerInstancesRequestMutex.Unlock()
	fake.ListContainerInstancesRequestStub = nil
	fake.listContainerInstancesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListContainerInstancesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListContainerInstancesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListContainerInstancesOutput) {
	fake.listContainerInstancesRequestMutex.Lock()
	defer fake.listContainerInstancesRequestMutex.Unlock()
	fake.ListContainerInstancesRequestStub = nil
	if fake.listContainerInstancesRequestReturnsOnCall == nil {
		fake.listContainerInstancesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListContainerInstancesOutput
		})
	}
	fake.listContainerInstancesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListContainerInstancesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListContainerInstancesWithContext(arg1 context.Context, arg2 *ecs.ListContainerInstancesInput, arg3 ...request.Option) (*ecs.ListContainerInstancesOutput, error) {
	fake.listContainerInstancesWithContextMutex.Lock()
	ret, specificReturn := fake.listContainerInstancesWithContextReturnsOnCall[len(fake.listContainerInstancesWithContextArgsForCall)]
	fake.listContainerInstancesWithContextArgsForCall = append(fake.listContainerInstancesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListContainerInstancesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListContainerInstancesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listContainerInstancesWithContextMutex.Unlock()
	if fake.ListContainerInstancesWithContextStub != nil {
		return fake.ListContainerInstancesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listContainerInstancesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListContainerInstancesWithContextCallCount() int {
	fake.listContainerInstancesWithContextMutex.RLock()
	defer fake.listContainerInstancesWithContextMutex.RUnlock()
	return len(fake.listContainerInstancesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListContainerInstancesWithContextCalls(stub func(context.Context, *ecs.ListContainerInstancesInput, ...request.Option) (*ecs.ListContainerInstancesOutput, error)) {
	fake.listContainerInstancesWithContextMutex.Lock()
	defer fake.listContainerInstancesWithContextMutex.Unlock()
	fake.ListContainerInstancesWithContextStub = stub
}

func (fake *FakeECSClient) ListContainerInstancesWithContextArgsForCall(i int) (context.Context, *ecs.ListContainerInstancesInput, []request.Option) {
	fake.listContainerInstancesWithContextMutex.RLock()
	defer fake.listContainerInstancesWithContextMutex.RUnlock()
	argsForCall := fake.listContainerInstancesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListContainerInstancesWithContextReturns(result1 *ecs.ListContainerInstancesOutput, result2 error) {
	fake.listContainerInstancesWithContextMutex.Lock()
	defer fake.listContainerInstancesWithContextMutex.Unlock()
	fake.ListContainerInstancesWithContextStub = nil
	fake.listContainerInstancesWithContextReturns = struct {
		result1 *ecs.ListContainerInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListContainerInstancesWithContextReturnsOnCall(i int, result1 *ecs.ListContainerInstancesOutput, result2 error) {
	fake.listContainerInstancesWithContextMutex.Lock()
	defer fake.listContainerInstancesWithContextMutex.Unlock()
	fake.ListContainerInstancesWithContextStub = nil
	if fake.listContainerInstancesWithContextReturnsOnCall == nil {
		fake.listContainerInstancesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListContainerInstancesOutput
			result2 error
		})
	}
	fake.listContainerInstancesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListContainerInstancesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListServices(arg1 *ecs.ListServicesInput) (*ecs.ListServicesOutput, error) {
	fake.listServicesMutex.Lock()
	ret, specificReturn := fake.listServicesReturnsOnCall[len(fake.listServicesArgsForCall)]
	fake.listServicesArgsForCall = append(fake.listServicesArgsForCall, struct {
		arg1 *ecs.ListServicesInput
	}{arg1})
	fake.recordInvocation("ListServices", []interface{}{arg1})
	fake.listServicesMutex.Unlock()
	if fake.ListServicesStub != nil {
		return fake.ListServicesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListServicesCallCount() int {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	return len(fake.listServicesArgsForCall)
}

func (fake *FakeECSClient) ListServicesCalls(stub func(*ecs.ListServicesInput) (*ecs.ListServicesOutput, error)) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = stub
}

func (fake *FakeECSClient) ListServicesArgsForCall(i int) *ecs.ListServicesInput {
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	argsForCall := fake.listServicesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListServicesReturns(result1 *ecs.ListServicesOutput, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	fake.listServicesReturns = struct {
		result1 *ecs.ListServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListServicesReturnsOnCall(i int, result1 *ecs.ListServicesOutput, result2 error) {
	fake.listServicesMutex.Lock()
	defer fake.listServicesMutex.Unlock()
	fake.ListServicesStub = nil
	if fake.listServicesReturnsOnCall == nil {
		fake.listServicesReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListServicesOutput
			result2 error
		})
	}
	fake.listServicesReturnsOnCall[i] = struct {
		result1 *ecs.ListServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListServicesPages(arg1 *ecs.ListServicesInput, arg2 func(*ecs.ListServicesOutput, bool) bool) error {
	fake.listServicesPagesMutex.Lock()
	ret, specificReturn := fake.listServicesPagesReturnsOnCall[len(fake.listServicesPagesArgsForCall)]
	fake.listServicesPagesArgsForCall = append(fake.listServicesPagesArgsForCall, struct {
		arg1 *ecs.ListServicesInput
		arg2 func(*ecs.ListServicesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListServicesPages", []interface{}{arg1, arg2})
	fake.listServicesPagesMutex.Unlock()
	if fake.ListServicesPagesStub != nil {
		return fake.ListServicesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listServicesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListServicesPagesCallCount() int {
	fake.listServicesPagesMutex.RLock()
	defer fake.listServicesPagesMutex.RUnlock()
	return len(fake.listServicesPagesArgsForCall)
}

func (fake *FakeECSClient) ListServicesPagesCalls(stub func(*ecs.ListServicesInput, func(*ecs.ListServicesOutput, bool) bool) error) {
	fake.listServicesPagesMutex.Lock()
	defer fake.listServicesPagesMutex.Unlock()
	fake.ListServicesPagesStub = stub
}

func (fake *FakeECSClient) ListServicesPagesArgsForCall(i int) (*ecs.ListServicesInput, func(*ecs.ListServicesOutput, bool) bool) {
	fake.listServicesPagesMutex.RLock()
	defer fake.listServicesPagesMutex.RUnlock()
	argsForCall := fake.listServicesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeECSClient) ListServicesPagesReturns(result1 error) {
	fake.listServicesPagesMutex.Lock()
	defer fake.listServicesPagesMutex.Unlock()
	fake.ListServicesPagesStub = nil
	fake.listServicesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListServicesPagesReturnsOnCall(i int, result1 error) {
	fake.listServicesPagesMutex.Lock()
	defer fake.listServicesPagesMutex.Unlock()
	fake.ListServicesPagesStub = nil
	if fake.listServicesPagesReturnsOnCall == nil {
		fake.listServicesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServicesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListServicesPagesWithContext(arg1 context.Context, arg2 *ecs.ListServicesInput, arg3 func(*ecs.ListServicesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listServicesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listServicesPagesWithContextReturnsOnCall[len(fake.listServicesPagesWithContextArgsForCall)]
	fake.listServicesPagesWithContextArgsForCall = append(fake.listServicesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListServicesInput
		arg3 func(*ecs.ListServicesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListServicesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listServicesPagesWithContextMutex.Unlock()
	if fake.ListServicesPagesWithContextStub != nil {
		return fake.ListServicesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listServicesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListServicesPagesWithContextCallCount() int {
	fake.listServicesPagesWithContextMutex.RLock()
	defer fake.listServicesPagesWithContextMutex.RUnlock()
	return len(fake.listServicesPagesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListServicesPagesWithContextCalls(stub func(context.Context, *ecs.ListServicesInput, func(*ecs.ListServicesOutput, bool) bool, ...request.Option) error) {
	fake.listServicesPagesWithContextMutex.Lock()
	defer fake.listServicesPagesWithContextMutex.Unlock()
	fake.ListServicesPagesWithContextStub = stub
}

func (fake *FakeECSClient) ListServicesPagesWithContextArgsForCall(i int) (context.Context, *ecs.ListServicesInput, func(*ecs.ListServicesOutput, bool) bool, []request.Option) {
	fake.listServicesPagesWithContextMutex.RLock()
	defer fake.listServicesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listServicesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeECSClient) ListServicesPagesWithContextReturns(result1 error) {
	fake.listServicesPagesWithContextMutex.Lock()
	defer fake.listServicesPagesWithContextMutex.Unlock()
	fake.ListServicesPagesWithContextStub = nil
	fake.listServicesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListServicesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listServicesPagesWithContextMutex.Lock()
	defer fake.listServicesPagesWithContextMutex.Unlock()
	fake.ListServicesPagesWithContextStub = nil
	if fake.listServicesPagesWithContextReturnsOnCall == nil {
		fake.listServicesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listServicesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListServicesRequest(arg1 *ecs.ListServicesInput) (*request.Request, *ecs.ListServicesOutput) {
	fake.listServicesRequestMutex.Lock()
	ret, specificReturn := fake.listServicesRequestReturnsOnCall[len(fake.listServicesRequestArgsForCall)]
	fake.listServicesRequestArgsForCall = append(fake.listServicesRequestArgsForCall, struct {
		arg1 *ecs.ListServicesInput
	}{arg1})
	fake.recordInvocation("ListServicesRequest", []interface{}{arg1})
	fake.listServicesRequestMutex.Unlock()
	if fake.ListServicesRequestStub != nil {
		return fake.ListServicesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListServicesRequestCallCount() int {
	fake.listServicesRequestMutex.RLock()
	defer fake.listServicesRequestMutex.RUnlock()
	return len(fake.listServicesRequestArgsForCall)
}

func (fake *FakeECSClient) ListServicesRequestCalls(stub func(*ecs.ListServicesInput) (*request.Request, *ecs.ListServicesOutput)) {
	fake.listServicesRequestMutex.Lock()
	defer fake.listServicesRequestMutex.Unlock()
	fake.ListServicesRequestStub = stub
}

func (fake *FakeECSClient) ListServicesRequestArgsForCall(i int) *ecs.ListServicesInput {
	fake.listServicesRequestMutex.RLock()
	defer fake.listServicesRequestMutex.RUnlock()
	argsForCall := fake.listServicesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListServicesRequestReturns(result1 *request.Request, result2 *ecs.ListServicesOutput) {
	fake.listServicesRequestMutex.Lock()
	defer fake.listServicesRequestMutex.Unlock()
	fake.ListServicesRequestStub = nil
	fake.listServicesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListServicesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListServicesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListServicesOutput) {
	fake.listServicesRequestMutex.Lock()
	defer fake.listServicesRequestMutex.Unlock()
	fake.ListServicesRequestStub = nil
	if fake.listServicesRequestReturnsOnCall == nil {
		fake.listServicesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListServicesOutput
		})
	}
	fake.listServicesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListServicesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListServicesWithContext(arg1 context.Context, arg2 *ecs.ListServicesInput, arg3 ...request.Option) (*ecs.ListServicesOutput, error) {
	fake.listServicesWithContextMutex.Lock()
	ret, specificReturn := fake.listServicesWithContextReturnsOnCall[len(fake.listServicesWithContextArgsForCall)]
	fake.listServicesWithContextArgsForCall = append(fake.listServicesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListServicesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListServicesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listServicesWithContextMutex.Unlock()
	if fake.ListServicesWithContextStub != nil {
		return fake.ListServicesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listServicesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListServicesWithContextCallCount() int {
	fake.listServicesWithContextMutex.RLock()
	defer fake.listServicesWithContextMutex.RUnlock()
	return len(fake.listServicesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListServicesWithContextCalls(stub func(context.Context, *ecs.ListServicesInput, ...request.Option) (*ecs.ListServicesOutput, error)) {
	fake.listServicesWithContextMutex.Lock()
	defer fake.listServicesWithContextMutex.Unlock()
	fake.ListServicesWithContextStub = stub
}

func (fake *FakeECSClient) ListServicesWithContextArgsForCall(i int) (context.Context, *ecs.ListServicesInput, []request.Option) {
	fake.listServicesWithContextMutex.RLock()
	defer fake.listServicesWithContextMutex.RUnlock()
	argsForCall := fake.listServicesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListServicesWithContextReturns(result1 *ecs.ListServicesOutput, result2 error) {
	fake.listServicesWithContextMutex.Lock()
	defer fake.listServicesWithContextMutex.Unlock()
	fake.ListServicesWithContextStub = nil
	fake.listServicesWithContextReturns = struct {
		result1 *ecs.ListServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListServicesWithContextReturnsOnCall(i int, result1 *ecs.ListServicesOutput, result2 error) {
	fake.listServicesWithContextMutex.Lock()
	defer fake.listServicesWithContextMutex.Unlock()
	fake.ListServicesWithContextStub = nil
	if fake.listServicesWithContextReturnsOnCall == nil {
		fake.listServicesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListServicesOutput
			result2 error
		})
	}
	fake.listServicesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListServicesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTagsForResource(arg1 *ecs.ListTagsForResourceInput) (*ecs.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceReturnsOnCall[len(fake.listTagsForResourceArgsForCall)]
	fake.listTagsForResourceArgsForCall = append(fake.listTagsForResourceArgsForCall, struct {
		arg1 *ecs.ListTagsForResourceInput
	}{arg1})
	fake.recordInvocation("ListTagsForResource", []interface{}{arg1})
	fake.listTagsForResourceMutex.Unlock()
	if fake.ListTagsForResourceStub != nil {
		return fake.ListTagsForResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTagsForResourceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTagsForResourceCallCount() int {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	return len(fake.listTagsForResourceArgsForCall)
}

func (fake *FakeECSClient) ListTagsForResourceCalls(stub func(*ecs.ListTagsForResourceInput) (*ecs.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = stub
}

func (fake *FakeECSClient) ListTagsForResourceArgsForCall(i int) *ecs.ListTagsForResourceInput {
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	argsForCall := fake.listTagsForResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListTagsForResourceReturns(result1 *ecs.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	fake.listTagsForResourceReturns = struct {
		result1 *ecs.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTagsForResourceReturnsOnCall(i int, result1 *ecs.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceMutex.Lock()
	defer fake.listTagsForResourceMutex.Unlock()
	fake.ListTagsForResourceStub = nil
	if fake.listTagsForResourceReturnsOnCall == nil {
		fake.listTagsForResourceReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceReturnsOnCall[i] = struct {
		result1 *ecs.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTagsForResourceRequest(arg1 *ecs.ListTagsForResourceInput) (*request.Request, *ecs.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceRequestReturnsOnCall[len(fake.listTagsForResourceRequestArgsForCall)]
	fake.listTagsForResourceRequestArgsForCall = append(fake.listTagsForResourceRequestArgsForCall, struct {
		arg1 *ecs.ListTagsForResourceInput
	}{arg1})
	fake.recordInvocation("ListTagsForResourceRequest", []interface{}{arg1})
	fake.listTagsForResourceRequestMutex.Unlock()
	if fake.ListTagsForResourceRequestStub != nil {
		return fake.ListTagsForResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTagsForResourceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTagsForResourceRequestCallCount() int {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	return len(fake.listTagsForResourceRequestArgsForCall)
}

func (fake *FakeECSClient) ListTagsForResourceRequestCalls(stub func(*ecs.ListTagsForResourceInput) (*request.Request, *ecs.ListTagsForResourceOutput)) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = stub
}

func (fake *FakeECSClient) ListTagsForResourceRequestArgsForCall(i int) *ecs.ListTagsForResourceInput {
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	argsForCall := fake.listTagsForResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListTagsForResourceRequestReturns(result1 *request.Request, result2 *ecs.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	fake.listTagsForResourceRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListTagsForResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListTagsForResourceOutput) {
	fake.listTagsForResourceRequestMutex.Lock()
	defer fake.listTagsForResourceRequestMutex.Unlock()
	fake.ListTagsForResourceRequestStub = nil
	if fake.listTagsForResourceRequestReturnsOnCall == nil {
		fake.listTagsForResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListTagsForResourceOutput
		})
	}
	fake.listTagsForResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListTagsForResourceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListTagsForResourceWithContext(arg1 context.Context, arg2 *ecs.ListTagsForResourceInput, arg3 ...request.Option) (*ecs.ListTagsForResourceOutput, error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	ret, specificReturn := fake.listTagsForResourceWithContextReturnsOnCall[len(fake.listTagsForResourceWithContextArgsForCall)]
	fake.listTagsForResourceWithContextArgsForCall = append(fake.listTagsForResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListTagsForResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListTagsForResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTagsForResourceWithContextMutex.Unlock()
	if fake.ListTagsForResourceWithContextStub != nil {
		return fake.ListTagsForResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTagsForResourceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTagsForResourceWithContextCallCount() int {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	return len(fake.listTagsForResourceWithContextArgsForCall)
}

func (fake *FakeECSClient) ListTagsForResourceWithContextCalls(stub func(context.Context, *ecs.ListTagsForResourceInput, ...request.Option) (*ecs.ListTagsForResourceOutput, error)) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = stub
}

func (fake *FakeECSClient) ListTagsForResourceWithContextArgsForCall(i int) (context.Context, *ecs.ListTagsForResourceInput, []request.Option) {
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	argsForCall := fake.listTagsForResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListTagsForResourceWithContextReturns(result1 *ecs.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	fake.listTagsForResourceWithContextReturns = struct {
		result1 *ecs.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTagsForResourceWithContextReturnsOnCall(i int, result1 *ecs.ListTagsForResourceOutput, result2 error) {
	fake.listTagsForResourceWithContextMutex.Lock()
	defer fake.listTagsForResourceWithContextMutex.Unlock()
	fake.ListTagsForResourceWithContextStub = nil
	if fake.listTagsForResourceWithContextReturnsOnCall == nil {
		fake.listTagsForResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListTagsForResourceOutput
			result2 error
		})
	}
	fake.listTagsForResourceWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListTagsForResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionFamilies(arg1 *ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	fake.listTaskDefinitionFamiliesMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionFamiliesReturnsOnCall[len(fake.listTaskDefinitionFamiliesArgsForCall)]
	fake.listTaskDefinitionFamiliesArgsForCall = append(fake.listTaskDefinitionFamiliesArgsForCall, struct {
		arg1 *ecs.ListTaskDefinitionFamiliesInput
	}{arg1})
	fake.recordInvocation("ListTaskDefinitionFamilies", []interface{}{arg1})
	fake.listTaskDefinitionFamiliesMutex.Unlock()
	if fake.ListTaskDefinitionFamiliesStub != nil {
		return fake.ListTaskDefinitionFamiliesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTaskDefinitionFamiliesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesCallCount() int {
	fake.listTaskDefinitionFamiliesMutex.RLock()
	defer fake.listTaskDefinitionFamiliesMutex.RUnlock()
	return len(fake.listTaskDefinitionFamiliesArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesCalls(stub func(*ecs.ListTaskDefinitionFamiliesInput) (*ecs.ListTaskDefinitionFamiliesOutput, error)) {
	fake.listTaskDefinitionFamiliesMutex.Lock()
	defer fake.listTaskDefinitionFamiliesMutex.Unlock()
	fake.ListTaskDefinitionFamiliesStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesArgsForCall(i int) *ecs.ListTaskDefinitionFamiliesInput {
	fake.listTaskDefinitionFamiliesMutex.RLock()
	defer fake.listTaskDefinitionFamiliesMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionFamiliesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesReturns(result1 *ecs.ListTaskDefinitionFamiliesOutput, result2 error) {
	fake.listTaskDefinitionFamiliesMutex.Lock()
	defer fake.listTaskDefinitionFamiliesMutex.Unlock()
	fake.ListTaskDefinitionFamiliesStub = nil
	fake.listTaskDefinitionFamiliesReturns = struct {
		result1 *ecs.ListTaskDefinitionFamiliesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesReturnsOnCall(i int, result1 *ecs.ListTaskDefinitionFamiliesOutput, result2 error) {
	fake.listTaskDefinitionFamiliesMutex.Lock()
	defer fake.listTaskDefinitionFamiliesMutex.Unlock()
	fake.ListTaskDefinitionFamiliesStub = nil
	if fake.listTaskDefinitionFamiliesReturnsOnCall == nil {
		fake.listTaskDefinitionFamiliesReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListTaskDefinitionFamiliesOutput
			result2 error
		})
	}
	fake.listTaskDefinitionFamiliesReturnsOnCall[i] = struct {
		result1 *ecs.ListTaskDefinitionFamiliesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPages(arg1 *ecs.ListTaskDefinitionFamiliesInput, arg2 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool) error {
	fake.listTaskDefinitionFamiliesPagesMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionFamiliesPagesReturnsOnCall[len(fake.listTaskDefinitionFamiliesPagesArgsForCall)]
	fake.listTaskDefinitionFamiliesPagesArgsForCall = append(fake.listTaskDefinitionFamiliesPagesArgsForCall, struct {
		arg1 *ecs.ListTaskDefinitionFamiliesInput
		arg2 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListTaskDefinitionFamiliesPages", []interface{}{arg1, arg2})
	fake.listTaskDefinitionFamiliesPagesMutex.Unlock()
	if fake.ListTaskDefinitionFamiliesPagesStub != nil {
		return fake.ListTaskDefinitionFamiliesPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listTaskDefinitionFamiliesPagesReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesCallCount() int {
	fake.listTaskDefinitionFamiliesPagesMutex.RLock()
	defer fake.listTaskDefinitionFamiliesPagesMutex.RUnlock()
	return len(fake.listTaskDefinitionFamiliesPagesArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesCalls(stub func(*ecs.ListTaskDefinitionFamiliesInput, func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool) error) {
	fake.listTaskDefinitionFamiliesPagesMutex.Lock()
	defer fake.listTaskDefinitionFamiliesPagesMutex.Unlock()
	fake.ListTaskDefinitionFamiliesPagesStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesArgsForCall(i int) (*ecs.ListTaskDefinitionFamiliesInput, func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool) {
	fake.listTaskDefinitionFamiliesPagesMutex.RLock()
	defer fake.listTaskDefinitionFamiliesPagesMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionFamiliesPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesReturns(result1 error) {
	fake.listTaskDefinitionFamiliesPagesMutex.Lock()
	defer fake.listTaskDefinitionFamiliesPagesMutex.Unlock()
	fake.ListTaskDefinitionFamiliesPagesStub = nil
	fake.listTaskDefinitionFamiliesPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesReturnsOnCall(i int, result1 error) {
	fake.listTaskDefinitionFamiliesPagesMutex.Lock()
	defer fake.listTaskDefinitionFamiliesPagesMutex.Unlock()
	fake.ListTaskDefinitionFamiliesPagesStub = nil
	if fake.listTaskDefinitionFamiliesPagesReturnsOnCall == nil {
		fake.listTaskDefinitionFamiliesPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listTaskDefinitionFamiliesPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesWithContext(arg1 context.Context, arg2 *ecs.ListTaskDefinitionFamiliesInput, arg3 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool, arg4 ...request.Option) error {
	fake.listTaskDefinitionFamiliesPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionFamiliesPagesWithContextReturnsOnCall[len(fake.listTaskDefinitionFamiliesPagesWithContextArgsForCall)]
	fake.listTaskDefinitionFamiliesPagesWithContextArgsForCall = append(fake.listTaskDefinitionFamiliesPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListTaskDefinitionFamiliesInput
		arg3 func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListTaskDefinitionFamiliesPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listTaskDefinitionFamiliesPagesWithContextMutex.Unlock()
	if fake.ListTaskDefinitionFamiliesPagesWithContextStub != nil {
		return fake.ListTaskDefinitionFamiliesPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listTaskDefinitionFamiliesPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesWithContextCallCount() int {
	fake.listTaskDefinitionFamiliesPagesWithContextMutex.RLock()
	defer fake.listTaskDefinitionFamiliesPagesWithContextMutex.RUnlock()
	return len(fake.listTaskDefinitionFamiliesPagesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesWithContextCalls(stub func(context.Context, *ecs.ListTaskDefinitionFamiliesInput, func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool, ...request.Option) error) {
	fake.listTaskDefinitionFamiliesPagesWithContextMutex.Lock()
	defer fake.listTaskDefinitionFamiliesPagesWithContextMutex.Unlock()
	fake.ListTaskDefinitionFamiliesPagesWithContextStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesWithContextArgsForCall(i int) (context.Context, *ecs.ListTaskDefinitionFamiliesInput, func(*ecs.ListTaskDefinitionFamiliesOutput, bool) bool, []request.Option) {
	fake.listTaskDefinitionFamiliesPagesWithContextMutex.RLock()
	defer fake.listTaskDefinitionFamiliesPagesWithContextMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionFamiliesPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesWithContextReturns(result1 error) {
	fake.listTaskDefinitionFamiliesPagesWithContextMutex.Lock()
	defer fake.listTaskDefinitionFamiliesPagesWithContextMutex.Unlock()
	fake.ListTaskDefinitionFamiliesPagesWithContextStub = nil
	fake.listTaskDefinitionFamiliesPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listTaskDefinitionFamiliesPagesWithContextMutex.Lock()
	defer fake.listTaskDefinitionFamiliesPagesWithContextMutex.Unlock()
	fake.ListTaskDefinitionFamiliesPagesWithContextStub = nil
	if fake.listTaskDefinitionFamiliesPagesWithContextReturnsOnCall == nil {
		fake.listTaskDefinitionFamiliesPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listTaskDefinitionFamiliesPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesRequest(arg1 *ecs.ListTaskDefinitionFamiliesInput) (*request.Request, *ecs.ListTaskDefinitionFamiliesOutput) {
	fake.listTaskDefinitionFamiliesRequestMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionFamiliesRequestReturnsOnCall[len(fake.listTaskDefinitionFamiliesRequestArgsForCall)]
	fake.listTaskDefinitionFamiliesRequestArgsForCall = append(fake.listTaskDefinitionFamiliesRequestArgsForCall, struct {
		arg1 *ecs.ListTaskDefinitionFamiliesInput
	}{arg1})
	fake.recordInvocation("ListTaskDefinitionFamiliesRequest", []interface{}{arg1})
	fake.listTaskDefinitionFamiliesRequestMutex.Unlock()
	if fake.ListTaskDefinitionFamiliesRequestStub != nil {
		return fake.ListTaskDefinitionFamiliesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTaskDefinitionFamiliesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesRequestCallCount() int {
	fake.listTaskDefinitionFamiliesRequestMutex.RLock()
	defer fake.listTaskDefinitionFamiliesRequestMutex.RUnlock()
	return len(fake.listTaskDefinitionFamiliesRequestArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesRequestCalls(stub func(*ecs.ListTaskDefinitionFamiliesInput) (*request.Request, *ecs.ListTaskDefinitionFamiliesOutput)) {
	fake.listTaskDefinitionFamiliesRequestMutex.Lock()
	defer fake.listTaskDefinitionFamiliesRequestMutex.Unlock()
	fake.ListTaskDefinitionFamiliesRequestStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesRequestArgsForCall(i int) *ecs.ListTaskDefinitionFamiliesInput {
	fake.listTaskDefinitionFamiliesRequestMutex.RLock()
	defer fake.listTaskDefinitionFamiliesRequestMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionFamiliesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesRequestReturns(result1 *request.Request, result2 *ecs.ListTaskDefinitionFamiliesOutput) {
	fake.listTaskDefinitionFamiliesRequestMutex.Lock()
	defer fake.listTaskDefinitionFamiliesRequestMutex.Unlock()
	fake.ListTaskDefinitionFamiliesRequestStub = nil
	fake.listTaskDefinitionFamiliesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListTaskDefinitionFamiliesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListTaskDefinitionFamiliesOutput) {
	fake.listTaskDefinitionFamiliesRequestMutex.Lock()
	defer fake.listTaskDefinitionFamiliesRequestMutex.Unlock()
	fake.ListTaskDefinitionFamiliesRequestStub = nil
	if fake.listTaskDefinitionFamiliesRequestReturnsOnCall == nil {
		fake.listTaskDefinitionFamiliesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListTaskDefinitionFamiliesOutput
		})
	}
	fake.listTaskDefinitionFamiliesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListTaskDefinitionFamiliesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesWithContext(arg1 context.Context, arg2 *ecs.ListTaskDefinitionFamiliesInput, arg3 ...request.Option) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	fake.listTaskDefinitionFamiliesWithContextMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionFamiliesWithContextReturnsOnCall[len(fake.listTaskDefinitionFamiliesWithContextArgsForCall)]
	fake.listTaskDefinitionFamiliesWithContextArgsForCall = append(fake.listTaskDefinitionFamiliesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListTaskDefinitionFamiliesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListTaskDefinitionFamiliesWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTaskDefinitionFamiliesWithContextMutex.Unlock()
	if fake.ListTaskDefinitionFamiliesWithContextStub != nil {
		return fake.ListTaskDefinitionFamiliesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTaskDefinitionFamiliesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesWithContextCallCount() int {
	fake.listTaskDefinitionFamiliesWithContextMutex.RLock()
	defer fake.listTaskDefinitionFamiliesWithContextMutex.RUnlock()
	return len(fake.listTaskDefinitionFamiliesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesWithContextCalls(stub func(context.Context, *ecs.ListTaskDefinitionFamiliesInput, ...request.Option) (*ecs.ListTaskDefinitionFamiliesOutput, error)) {
	fake.listTaskDefinitionFamiliesWithContextMutex.Lock()
	defer fake.listTaskDefinitionFamiliesWithContextMutex.Unlock()
	fake.ListTaskDefinitionFamiliesWithContextStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesWithContextArgsForCall(i int) (context.Context, *ecs.ListTaskDefinitionFamiliesInput, []request.Option) {
	fake.listTaskDefinitionFamiliesWithContextMutex.RLock()
	defer fake.listTaskDefinitionFamiliesWithContextMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionFamiliesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesWithContextReturns(result1 *ecs.ListTaskDefinitionFamiliesOutput, result2 error) {
	fake.listTaskDefinitionFamiliesWithContextMutex.Lock()
	defer fake.listTaskDefinitionFamiliesWithContextMutex.Unlock()
	fake.ListTaskDefinitionFamiliesWithContextStub = nil
	fake.listTaskDefinitionFamiliesWithContextReturns = struct {
		result1 *ecs.ListTaskDefinitionFamiliesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionFamiliesWithContextReturnsOnCall(i int, result1 *ecs.ListTaskDefinitionFamiliesOutput, result2 error) {
	fake.listTaskDefinitionFamiliesWithContextMutex.Lock()
	defer fake.listTaskDefinitionFamiliesWithContextMutex.Unlock()
	fake.ListTaskDefinitionFamiliesWithContextStub = nil
	if fake.listTaskDefinitionFamiliesWithContextReturnsOnCall == nil {
		fake.listTaskDefinitionFamiliesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListTaskDefinitionFamiliesOutput
			result2 error
		})
	}
	fake.listTaskDefinitionFamiliesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListTaskDefinitionFamiliesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitions(arg1 *ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error) {
	fake.listTaskDefinitionsMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionsReturnsOnCall[len(fake.listTaskDefinitionsArgsForCall)]
	fake.listTaskDefinitionsArgsForCall = append(fake.listTaskDefinitionsArgsForCall, struct {
		arg1 *ecs.ListTaskDefinitionsInput
	}{arg1})
	fake.recordInvocation("ListTaskDefinitions", []interface{}{arg1})
	fake.listTaskDefinitionsMutex.Unlock()
	if fake.ListTaskDefinitionsStub != nil {
		return fake.ListTaskDefinitionsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTaskDefinitionsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTaskDefinitionsCallCount() int {
	fake.listTaskDefinitionsMutex.RLock()
	defer fake.listTaskDefinitionsMutex.RUnlock()
	return len(fake.listTaskDefinitionsArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionsCalls(stub func(*ecs.ListTaskDefinitionsInput) (*ecs.ListTaskDefinitionsOutput, error)) {
	fake.listTaskDefinitionsMutex.Lock()
	defer fake.listTaskDefinitionsMutex.Unlock()
	fake.ListTaskDefinitionsStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionsArgsForCall(i int) *ecs.ListTaskDefinitionsInput {
	fake.listTaskDefinitionsMutex.RLock()
	defer fake.listTaskDefinitionsMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListTaskDefinitionsReturns(result1 *ecs.ListTaskDefinitionsOutput, result2 error) {
	fake.listTaskDefinitionsMutex.Lock()
	defer fake.listTaskDefinitionsMutex.Unlock()
	fake.ListTaskDefinitionsStub = nil
	fake.listTaskDefinitionsReturns = struct {
		result1 *ecs.ListTaskDefinitionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionsReturnsOnCall(i int, result1 *ecs.ListTaskDefinitionsOutput, result2 error) {
	fake.listTaskDefinitionsMutex.Lock()
	defer fake.listTaskDefinitionsMutex.Unlock()
	fake.ListTaskDefinitionsStub = nil
	if fake.listTaskDefinitionsReturnsOnCall == nil {
		fake.listTaskDefinitionsReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListTaskDefinitionsOutput
			result2 error
		})
	}
	fake.listTaskDefinitionsReturnsOnCall[i] = struct {
		result1 *ecs.ListTaskDefinitionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionsPages(arg1 *ecs.ListTaskDefinitionsInput, arg2 func(*ecs.ListTaskDefinitionsOutput, bool) bool) error {
	fake.listTaskDefinitionsPagesMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionsPagesReturnsOnCall[len(fake.listTaskDefinitionsPagesArgsForCall)]
	fake.listTaskDefinitionsPagesArgsForCall = append(fake.listTaskDefinitionsPagesArgsForCall, struct {
		arg1 *ecs.ListTaskDefinitionsInput
		arg2 func(*ecs.ListTaskDefinitionsOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListTaskDefinitionsPages", []interface{}{arg1, arg2})
	fake.listTaskDefinitionsPagesMutex.Unlock()
	if fake.ListTaskDefinitionsPagesStub != nil {
		return fake.ListTaskDefinitionsPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listTaskDefinitionsPagesReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesCallCount() int {
	fake.listTaskDefinitionsPagesMutex.RLock()
	defer fake.listTaskDefinitionsPagesMutex.RUnlock()
	return len(fake.listTaskDefinitionsPagesArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesCalls(stub func(*ecs.ListTaskDefinitionsInput, func(*ecs.ListTaskDefinitionsOutput, bool) bool) error) {
	fake.listTaskDefinitionsPagesMutex.Lock()
	defer fake.listTaskDefinitionsPagesMutex.Unlock()
	fake.ListTaskDefinitionsPagesStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesArgsForCall(i int) (*ecs.ListTaskDefinitionsInput, func(*ecs.ListTaskDefinitionsOutput, bool) bool) {
	fake.listTaskDefinitionsPagesMutex.RLock()
	defer fake.listTaskDefinitionsPagesMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionsPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesReturns(result1 error) {
	fake.listTaskDefinitionsPagesMutex.Lock()
	defer fake.listTaskDefinitionsPagesMutex.Unlock()
	fake.ListTaskDefinitionsPagesStub = nil
	fake.listTaskDefinitionsPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesReturnsOnCall(i int, result1 error) {
	fake.listTaskDefinitionsPagesMutex.Lock()
	defer fake.listTaskDefinitionsPagesMutex.Unlock()
	fake.ListTaskDefinitionsPagesStub = nil
	if fake.listTaskDefinitionsPagesReturnsOnCall == nil {
		fake.listTaskDefinitionsPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listTaskDefinitionsPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesWithContext(arg1 context.Context, arg2 *ecs.ListTaskDefinitionsInput, arg3 func(*ecs.ListTaskDefinitionsOutput, bool) bool, arg4 ...request.Option) error {
	fake.listTaskDefinitionsPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionsPagesWithContextReturnsOnCall[len(fake.listTaskDefinitionsPagesWithContextArgsForCall)]
	fake.listTaskDefinitionsPagesWithContextArgsForCall = append(fake.listTaskDefinitionsPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListTaskDefinitionsInput
		arg3 func(*ecs.ListTaskDefinitionsOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListTaskDefinitionsPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listTaskDefinitionsPagesWithContextMutex.Unlock()
	if fake.ListTaskDefinitionsPagesWithContextStub != nil {
		return fake.ListTaskDefinitionsPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listTaskDefinitionsPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesWithContextCallCount() int {
	fake.listTaskDefinitionsPagesWithContextMutex.RLock()
	defer fake.listTaskDefinitionsPagesWithContextMutex.RUnlock()
	return len(fake.listTaskDefinitionsPagesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesWithContextCalls(stub func(context.Context, *ecs.ListTaskDefinitionsInput, func(*ecs.ListTaskDefinitionsOutput, bool) bool, ...request.Option) error) {
	fake.listTaskDefinitionsPagesWithContextMutex.Lock()
	defer fake.listTaskDefinitionsPagesWithContextMutex.Unlock()
	fake.ListTaskDefinitionsPagesWithContextStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesWithContextArgsForCall(i int) (context.Context, *ecs.ListTaskDefinitionsInput, func(*ecs.ListTaskDefinitionsOutput, bool) bool, []request.Option) {
	fake.listTaskDefinitionsPagesWithContextMutex.RLock()
	defer fake.listTaskDefinitionsPagesWithContextMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionsPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesWithContextReturns(result1 error) {
	fake.listTaskDefinitionsPagesWithContextMutex.Lock()
	defer fake.listTaskDefinitionsPagesWithContextMutex.Unlock()
	fake.ListTaskDefinitionsPagesWithContextStub = nil
	fake.listTaskDefinitionsPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTaskDefinitionsPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listTaskDefinitionsPagesWithContextMutex.Lock()
	defer fake.listTaskDefinitionsPagesWithContextMutex.Unlock()
	fake.ListTaskDefinitionsPagesWithContextStub = nil
	if fake.listTaskDefinitionsPagesWithContextReturnsOnCall == nil {
		fake.listTaskDefinitionsPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listTaskDefinitionsPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTaskDefinitionsRequest(arg1 *ecs.ListTaskDefinitionsInput) (*request.Request, *ecs.ListTaskDefinitionsOutput) {
	fake.listTaskDefinitionsRequestMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionsRequestReturnsOnCall[len(fake.listTaskDefinitionsRequestArgsForCall)]
	fake.listTaskDefinitionsRequestArgsForCall = append(fake.listTaskDefinitionsRequestArgsForCall, struct {
		arg1 *ecs.ListTaskDefinitionsInput
	}{arg1})
	fake.recordInvocation("ListTaskDefinitionsRequest", []interface{}{arg1})
	fake.listTaskDefinitionsRequestMutex.Unlock()
	if fake.ListTaskDefinitionsRequestStub != nil {
		return fake.ListTaskDefinitionsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTaskDefinitionsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTaskDefinitionsRequestCallCount() int {
	fake.listTaskDefinitionsRequestMutex.RLock()
	defer fake.listTaskDefinitionsRequestMutex.RUnlock()
	return len(fake.listTaskDefinitionsRequestArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionsRequestCalls(stub func(*ecs.ListTaskDefinitionsInput) (*request.Request, *ecs.ListTaskDefinitionsOutput)) {
	fake.listTaskDefinitionsRequestMutex.Lock()
	defer fake.listTaskDefinitionsRequestMutex.Unlock()
	fake.ListTaskDefinitionsRequestStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionsRequestArgsForCall(i int) *ecs.ListTaskDefinitionsInput {
	fake.listTaskDefinitionsRequestMutex.RLock()
	defer fake.listTaskDefinitionsRequestMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListTaskDefinitionsRequestReturns(result1 *request.Request, result2 *ecs.ListTaskDefinitionsOutput) {
	fake.listTaskDefinitionsRequestMutex.Lock()
	defer fake.listTaskDefinitionsRequestMutex.Unlock()
	fake.ListTaskDefinitionsRequestStub = nil
	fake.listTaskDefinitionsRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListTaskDefinitionsOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListTaskDefinitionsOutput) {
	fake.listTaskDefinitionsRequestMutex.Lock()
	defer fake.listTaskDefinitionsRequestMutex.Unlock()
	fake.ListTaskDefinitionsRequestStub = nil
	if fake.listTaskDefinitionsRequestReturnsOnCall == nil {
		fake.listTaskDefinitionsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListTaskDefinitionsOutput
		})
	}
	fake.listTaskDefinitionsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListTaskDefinitionsOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionsWithContext(arg1 context.Context, arg2 *ecs.ListTaskDefinitionsInput, arg3 ...request.Option) (*ecs.ListTaskDefinitionsOutput, error) {
	fake.listTaskDefinitionsWithContextMutex.Lock()
	ret, specificReturn := fake.listTaskDefinitionsWithContextReturnsOnCall[len(fake.listTaskDefinitionsWithContextArgsForCall)]
	fake.listTaskDefinitionsWithContextArgsForCall = append(fake.listTaskDefinitionsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListTaskDefinitionsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListTaskDefinitionsWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTaskDefinitionsWithContextMutex.Unlock()
	if fake.ListTaskDefinitionsWithContextStub != nil {
		return fake.ListTaskDefinitionsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTaskDefinitionsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTaskDefinitionsWithContextCallCount() int {
	fake.listTaskDefinitionsWithContextMutex.RLock()
	defer fake.listTaskDefinitionsWithContextMutex.RUnlock()
	return len(fake.listTaskDefinitionsWithContextArgsForCall)
}

func (fake *FakeECSClient) ListTaskDefinitionsWithContextCalls(stub func(context.Context, *ecs.ListTaskDefinitionsInput, ...request.Option) (*ecs.ListTaskDefinitionsOutput, error)) {
	fake.listTaskDefinitionsWithContextMutex.Lock()
	defer fake.listTaskDefinitionsWithContextMutex.Unlock()
	fake.ListTaskDefinitionsWithContextStub = stub
}

func (fake *FakeECSClient) ListTaskDefinitionsWithContextArgsForCall(i int) (context.Context, *ecs.ListTaskDefinitionsInput, []request.Option) {
	fake.listTaskDefinitionsWithContextMutex.RLock()
	defer fake.listTaskDefinitionsWithContextMutex.RUnlock()
	argsForCall := fake.listTaskDefinitionsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListTaskDefinitionsWithContextReturns(result1 *ecs.ListTaskDefinitionsOutput, result2 error) {
	fake.listTaskDefinitionsWithContextMutex.Lock()
	defer fake.listTaskDefinitionsWithContextMutex.Unlock()
	fake.ListTaskDefinitionsWithContextStub = nil
	fake.listTaskDefinitionsWithContextReturns = struct {
		result1 *ecs.ListTaskDefinitionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTaskDefinitionsWithContextReturnsOnCall(i int, result1 *ecs.ListTaskDefinitionsOutput, result2 error) {
	fake.listTaskDefinitionsWithContextMutex.Lock()
	defer fake.listTaskDefinitionsWithContextMutex.Unlock()
	fake.ListTaskDefinitionsWithContextStub = nil
	if fake.listTaskDefinitionsWithContextReturnsOnCall == nil {
		fake.listTaskDefinitionsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListTaskDefinitionsOutput
			result2 error
		})
	}
	fake.listTaskDefinitionsWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListTaskDefinitionsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTasks(arg1 *ecs.ListTasksInput) (*ecs.ListTasksOutput, error) {
	fake.listTasksMutex.Lock()
	ret, specificReturn := fake.listTasksReturnsOnCall[len(fake.listTasksArgsForCall)]
	fake.listTasksArgsForCall = append(fake.listTasksArgsForCall, struct {
		arg1 *ecs.ListTasksInput
	}{arg1})
	fake.recordInvocation("ListTasks", []interface{}{arg1})
	fake.listTasksMutex.Unlock()
	if fake.ListTasksStub != nil {
		return fake.ListTasksStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTasksReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTasksCallCount() int {
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	return len(fake.listTasksArgsForCall)
}

func (fake *FakeECSClient) ListTasksCalls(stub func(*ecs.ListTasksInput) (*ecs.ListTasksOutput, error)) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = stub
}

func (fake *FakeECSClient) ListTasksArgsForCall(i int) *ecs.ListTasksInput {
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	argsForCall := fake.listTasksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListTasksReturns(result1 *ecs.ListTasksOutput, result2 error) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = nil
	fake.listTasksReturns = struct {
		result1 *ecs.ListTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTasksReturnsOnCall(i int, result1 *ecs.ListTasksOutput, result2 error) {
	fake.listTasksMutex.Lock()
	defer fake.listTasksMutex.Unlock()
	fake.ListTasksStub = nil
	if fake.listTasksReturnsOnCall == nil {
		fake.listTasksReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListTasksOutput
			result2 error
		})
	}
	fake.listTasksReturnsOnCall[i] = struct {
		result1 *ecs.ListTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTasksPages(arg1 *ecs.ListTasksInput, arg2 func(*ecs.ListTasksOutput, bool) bool) error {
	fake.listTasksPagesMutex.Lock()
	ret, specificReturn := fake.listTasksPagesReturnsOnCall[len(fake.listTasksPagesArgsForCall)]
	fake.listTasksPagesArgsForCall = append(fake.listTasksPagesArgsForCall, struct {
		arg1 *ecs.ListTasksInput
		arg2 func(*ecs.ListTasksOutput, bool) bool
	}{arg1, arg2})
	fake.recordInvocation("ListTasksPages", []interface{}{arg1, arg2})
	fake.listTasksPagesMutex.Unlock()
	if fake.ListTasksPagesStub != nil {
		return fake.ListTasksPagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listTasksPagesReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListTasksPagesCallCount() int {
	fake.listTasksPagesMutex.RLock()
	defer fake.listTasksPagesMutex.RUnlock()
	return len(fake.listTasksPagesArgsForCall)
}

func (fake *FakeECSClient) ListTasksPagesCalls(stub func(*ecs.ListTasksInput, func(*ecs.ListTasksOutput, bool) bool) error) {
	fake.listTasksPagesMutex.Lock()
	defer fake.listTasksPagesMutex.Unlock()
	fake.ListTasksPagesStub = stub
}

func (fake *FakeECSClient) ListTasksPagesArgsForCall(i int) (*ecs.ListTasksInput, func(*ecs.ListTasksOutput, bool) bool) {
	fake.listTasksPagesMutex.RLock()
	defer fake.listTasksPagesMutex.RUnlock()
	argsForCall := fake.listTasksPagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeECSClient) ListTasksPagesReturns(result1 error) {
	fake.listTasksPagesMutex.Lock()
	defer fake.listTasksPagesMutex.Unlock()
	fake.ListTasksPagesStub = nil
	fake.listTasksPagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTasksPagesReturnsOnCall(i int, result1 error) {
	fake.listTasksPagesMutex.Lock()
	defer fake.listTasksPagesMutex.Unlock()
	fake.ListTasksPagesStub = nil
	if fake.listTasksPagesReturnsOnCall == nil {
		fake.listTasksPagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listTasksPagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTasksPagesWithContext(arg1 context.Context, arg2 *ecs.ListTasksInput, arg3 func(*ecs.ListTasksOutput, bool) bool, arg4 ...request.Option) error {
	fake.listTasksPagesWithContextMutex.Lock()
	ret, specificReturn := fake.listTasksPagesWithContextReturnsOnCall[len(fake.listTasksPagesWithContextArgsForCall)]
	fake.listTasksPagesWithContextArgsForCall = append(fake.listTasksPagesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListTasksInput
		arg3 func(*ecs.ListTasksOutput, bool) bool
		arg4 []request.Option
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("ListTasksPagesWithContext", []interface{}{arg1, arg2, arg3, arg4})
	fake.listTasksPagesWithContextMutex.Unlock()
	if fake.ListTasksPagesWithContextStub != nil {
		return fake.ListTasksPagesWithContextStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listTasksPagesWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) ListTasksPagesWithContextCallCount() int {
	fake.listTasksPagesWithContextMutex.RLock()
	defer fake.listTasksPagesWithContextMutex.RUnlock()
	return len(fake.listTasksPagesWithContextArgsForCall)
}

func (fake *FakeECSClient) ListTasksPagesWithContextCalls(stub func(context.Context, *ecs.ListTasksInput, func(*ecs.ListTasksOutput, bool) bool, ...request.Option) error) {
	fake.listTasksPagesWithContextMutex.Lock()
	defer fake.listTasksPagesWithContextMutex.Unlock()
	fake.ListTasksPagesWithContextStub = stub
}

func (fake *FakeECSClient) ListTasksPagesWithContextArgsForCall(i int) (context.Context, *ecs.ListTasksInput, func(*ecs.ListTasksOutput, bool) bool, []request.Option) {
	fake.listTasksPagesWithContextMutex.RLock()
	defer fake.listTasksPagesWithContextMutex.RUnlock()
	argsForCall := fake.listTasksPagesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *FakeECSClient) ListTasksPagesWithContextReturns(result1 error) {
	fake.listTasksPagesWithContextMutex.Lock()
	defer fake.listTasksPagesWithContextMutex.Unlock()
	fake.ListTasksPagesWithContextStub = nil
	fake.listTasksPagesWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTasksPagesWithContextReturnsOnCall(i int, result1 error) {
	fake.listTasksPagesWithContextMutex.Lock()
	defer fake.listTasksPagesWithContextMutex.Unlock()
	fake.ListTasksPagesWithContextStub = nil
	if fake.listTasksPagesWithContextReturnsOnCall == nil {
		fake.listTasksPagesWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listTasksPagesWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) ListTasksRequest(arg1 *ecs.ListTasksInput) (*request.Request, *ecs.ListTasksOutput) {
	fake.listTasksRequestMutex.Lock()
	ret, specificReturn := fake.listTasksRequestReturnsOnCall[len(fake.listTasksRequestArgsForCall)]
	fake.listTasksRequestArgsForCall = append(fake.listTasksRequestArgsForCall, struct {
		arg1 *ecs.ListTasksInput
	}{arg1})
	fake.recordInvocation("ListTasksRequest", []interface{}{arg1})
	fake.listTasksRequestMutex.Unlock()
	if fake.ListTasksRequestStub != nil {
		return fake.ListTasksRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTasksRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTasksRequestCallCount() int {
	fake.listTasksRequestMutex.RLock()
	defer fake.listTasksRequestMutex.RUnlock()
	return len(fake.listTasksRequestArgsForCall)
}

func (fake *FakeECSClient) ListTasksRequestCalls(stub func(*ecs.ListTasksInput) (*request.Request, *ecs.ListTasksOutput)) {
	fake.listTasksRequestMutex.Lock()
	defer fake.listTasksRequestMutex.Unlock()
	fake.ListTasksRequestStub = stub
}

func (fake *FakeECSClient) ListTasksRequestArgsForCall(i int) *ecs.ListTasksInput {
	fake.listTasksRequestMutex.RLock()
	defer fake.listTasksRequestMutex.RUnlock()
	argsForCall := fake.listTasksRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) ListTasksRequestReturns(result1 *request.Request, result2 *ecs.ListTasksOutput) {
	fake.listTasksRequestMutex.Lock()
	defer fake.listTasksRequestMutex.Unlock()
	fake.ListTasksRequestStub = nil
	fake.listTasksRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.ListTasksOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListTasksRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.ListTasksOutput) {
	fake.listTasksRequestMutex.Lock()
	defer fake.listTasksRequestMutex.Unlock()
	fake.ListTasksRequestStub = nil
	if fake.listTasksRequestReturnsOnCall == nil {
		fake.listTasksRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.ListTasksOutput
		})
	}
	fake.listTasksRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.ListTasksOutput
	}{result1, result2}
}

func (fake *FakeECSClient) ListTasksWithContext(arg1 context.Context, arg2 *ecs.ListTasksInput, arg3 ...request.Option) (*ecs.ListTasksOutput, error) {
	fake.listTasksWithContextMutex.Lock()
	ret, specificReturn := fake.listTasksWithContextReturnsOnCall[len(fake.listTasksWithContextArgsForCall)]
	fake.listTasksWithContextArgsForCall = append(fake.listTasksWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.ListTasksInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("ListTasksWithContext", []interface{}{arg1, arg2, arg3})
	fake.listTasksWithContextMutex.Unlock()
	if fake.ListTasksWithContextStub != nil {
		return fake.ListTasksWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listTasksWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) ListTasksWithContextCallCount() int {
	fake.listTasksWithContextMutex.RLock()
	defer fake.listTasksWithContextMutex.RUnlock()
	return len(fake.listTasksWithContextArgsForCall)
}

func (fake *FakeECSClient) ListTasksWithContextCalls(stub func(context.Context, *ecs.ListTasksInput, ...request.Option) (*ecs.ListTasksOutput, error)) {
	fake.listTasksWithContextMutex.Lock()
	defer fake.listTasksWithContextMutex.Unlock()
	fake.ListTasksWithContextStub = stub
}

func (fake *FakeECSClient) ListTasksWithContextArgsForCall(i int) (context.Context, *ecs.ListTasksInput, []request.Option) {
	fake.listTasksWithContextMutex.RLock()
	defer fake.listTasksWithContextMutex.RUnlock()
	argsForCall := fake.listTasksWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) ListTasksWithContextReturns(result1 *ecs.ListTasksOutput, result2 error) {
	fake.listTasksWithContextMutex.Lock()
	defer fake.listTasksWithContextMutex.Unlock()
	fake.ListTasksWithContextStub = nil
	fake.listTasksWithContextReturns = struct {
		result1 *ecs.ListTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) ListTasksWithContextReturnsOnCall(i int, result1 *ecs.ListTasksOutput, result2 error) {
	fake.listTasksWithContextMutex.Lock()
	defer fake.listTasksWithContextMutex.Unlock()
	fake.ListTasksWithContextStub = nil
	if fake.listTasksWithContextReturnsOnCall == nil {
		fake.listTasksWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.ListTasksOutput
			result2 error
		})
	}
	fake.listTasksWithContextReturnsOnCall[i] = struct {
		result1 *ecs.ListTasksOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSetting(arg1 *ecs.PutAccountSettingInput) (*ecs.PutAccountSettingOutput, error) {
	fake.putAccountSettingMutex.Lock()
	ret, specificReturn := fake.putAccountSettingReturnsOnCall[len(fake.putAccountSettingArgsForCall)]
	fake.putAccountSettingArgsForCall = append(fake.putAccountSettingArgsForCall, struct {
		arg1 *ecs.PutAccountSettingInput
	}{arg1})
	fake.recordInvocation("PutAccountSetting", []interface{}{arg1})
	fake.putAccountSettingMutex.Unlock()
	if fake.PutAccountSettingStub != nil {
		return fake.PutAccountSettingStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAccountSettingReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAccountSettingCallCount() int {
	fake.putAccountSettingMutex.RLock()
	defer fake.putAccountSettingMutex.RUnlock()
	return len(fake.putAccountSettingArgsForCall)
}

func (fake *FakeECSClient) PutAccountSettingCalls(stub func(*ecs.PutAccountSettingInput) (*ecs.PutAccountSettingOutput, error)) {
	fake.putAccountSettingMutex.Lock()
	defer fake.putAccountSettingMutex.Unlock()
	fake.PutAccountSettingStub = stub
}

func (fake *FakeECSClient) PutAccountSettingArgsForCall(i int) *ecs.PutAccountSettingInput {
	fake.putAccountSettingMutex.RLock()
	defer fake.putAccountSettingMutex.RUnlock()
	argsForCall := fake.putAccountSettingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) PutAccountSettingReturns(result1 *ecs.PutAccountSettingOutput, result2 error) {
	fake.putAccountSettingMutex.Lock()
	defer fake.putAccountSettingMutex.Unlock()
	fake.PutAccountSettingStub = nil
	fake.putAccountSettingReturns = struct {
		result1 *ecs.PutAccountSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingReturnsOnCall(i int, result1 *ecs.PutAccountSettingOutput, result2 error) {
	fake.putAccountSettingMutex.Lock()
	defer fake.putAccountSettingMutex.Unlock()
	fake.PutAccountSettingStub = nil
	if fake.putAccountSettingReturnsOnCall == nil {
		fake.putAccountSettingReturnsOnCall = make(map[int]struct {
			result1 *ecs.PutAccountSettingOutput
			result2 error
		})
	}
	fake.putAccountSettingReturnsOnCall[i] = struct {
		result1 *ecs.PutAccountSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingDefault(arg1 *ecs.PutAccountSettingDefaultInput) (*ecs.PutAccountSettingDefaultOutput, error) {
	fake.putAccountSettingDefaultMutex.Lock()
	ret, specificReturn := fake.putAccountSettingDefaultReturnsOnCall[len(fake.putAccountSettingDefaultArgsForCall)]
	fake.putAccountSettingDefaultArgsForCall = append(fake.putAccountSettingDefaultArgsForCall, struct {
		arg1 *ecs.PutAccountSettingDefaultInput
	}{arg1})
	fake.recordInvocation("PutAccountSettingDefault", []interface{}{arg1})
	fake.putAccountSettingDefaultMutex.Unlock()
	if fake.PutAccountSettingDefaultStub != nil {
		return fake.PutAccountSettingDefaultStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAccountSettingDefaultReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAccountSettingDefaultCallCount() int {
	fake.putAccountSettingDefaultMutex.RLock()
	defer fake.putAccountSettingDefaultMutex.RUnlock()
	return len(fake.putAccountSettingDefaultArgsForCall)
}

func (fake *FakeECSClient) PutAccountSettingDefaultCalls(stub func(*ecs.PutAccountSettingDefaultInput) (*ecs.PutAccountSettingDefaultOutput, error)) {
	fake.putAccountSettingDefaultMutex.Lock()
	defer fake.putAccountSettingDefaultMutex.Unlock()
	fake.PutAccountSettingDefaultStub = stub
}

func (fake *FakeECSClient) PutAccountSettingDefaultArgsForCall(i int) *ecs.PutAccountSettingDefaultInput {
	fake.putAccountSettingDefaultMutex.RLock()
	defer fake.putAccountSettingDefaultMutex.RUnlock()
	argsForCall := fake.putAccountSettingDefaultArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) PutAccountSettingDefaultReturns(result1 *ecs.PutAccountSettingDefaultOutput, result2 error) {
	fake.putAccountSettingDefaultMutex.Lock()
	defer fake.putAccountSettingDefaultMutex.Unlock()
	fake.PutAccountSettingDefaultStub = nil
	fake.putAccountSettingDefaultReturns = struct {
		result1 *ecs.PutAccountSettingDefaultOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingDefaultReturnsOnCall(i int, result1 *ecs.PutAccountSettingDefaultOutput, result2 error) {
	fake.putAccountSettingDefaultMutex.Lock()
	defer fake.putAccountSettingDefaultMutex.Unlock()
	fake.PutAccountSettingDefaultStub = nil
	if fake.putAccountSettingDefaultReturnsOnCall == nil {
		fake.putAccountSettingDefaultReturnsOnCall = make(map[int]struct {
			result1 *ecs.PutAccountSettingDefaultOutput
			result2 error
		})
	}
	fake.putAccountSettingDefaultReturnsOnCall[i] = struct {
		result1 *ecs.PutAccountSettingDefaultOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingDefaultRequest(arg1 *ecs.PutAccountSettingDefaultInput) (*request.Request, *ecs.PutAccountSettingDefaultOutput) {
	fake.putAccountSettingDefaultRequestMutex.Lock()
	ret, specificReturn := fake.putAccountSettingDefaultRequestReturnsOnCall[len(fake.putAccountSettingDefaultRequestArgsForCall)]
	fake.putAccountSettingDefaultRequestArgsForCall = append(fake.putAccountSettingDefaultRequestArgsForCall, struct {
		arg1 *ecs.PutAccountSettingDefaultInput
	}{arg1})
	fake.recordInvocation("PutAccountSettingDefaultRequest", []interface{}{arg1})
	fake.putAccountSettingDefaultRequestMutex.Unlock()
	if fake.PutAccountSettingDefaultRequestStub != nil {
		return fake.PutAccountSettingDefaultRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAccountSettingDefaultRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAccountSettingDefaultRequestCallCount() int {
	fake.putAccountSettingDefaultRequestMutex.RLock()
	defer fake.putAccountSettingDefaultRequestMutex.RUnlock()
	return len(fake.putAccountSettingDefaultRequestArgsForCall)
}

func (fake *FakeECSClient) PutAccountSettingDefaultRequestCalls(stub func(*ecs.PutAccountSettingDefaultInput) (*request.Request, *ecs.PutAccountSettingDefaultOutput)) {
	fake.putAccountSettingDefaultRequestMutex.Lock()
	defer fake.putAccountSettingDefaultRequestMutex.Unlock()
	fake.PutAccountSettingDefaultRequestStub = stub
}

func (fake *FakeECSClient) PutAccountSettingDefaultRequestArgsForCall(i int) *ecs.PutAccountSettingDefaultInput {
	fake.putAccountSettingDefaultRequestMutex.RLock()
	defer fake.putAccountSettingDefaultRequestMutex.RUnlock()
	argsForCall := fake.putAccountSettingDefaultRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) PutAccountSettingDefaultRequestReturns(result1 *request.Request, result2 *ecs.PutAccountSettingDefaultOutput) {
	fake.putAccountSettingDefaultRequestMutex.Lock()
	defer fake.putAccountSettingDefaultRequestMutex.Unlock()
	fake.PutAccountSettingDefaultRequestStub = nil
	fake.putAccountSettingDefaultRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.PutAccountSettingDefaultOutput
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingDefaultRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.PutAccountSettingDefaultOutput) {
	fake.putAccountSettingDefaultRequestMutex.Lock()
	defer fake.putAccountSettingDefaultRequestMutex.Unlock()
	fake.PutAccountSettingDefaultRequestStub = nil
	if fake.putAccountSettingDefaultRequestReturnsOnCall == nil {
		fake.putAccountSettingDefaultRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.PutAccountSettingDefaultOutput
		})
	}
	fake.putAccountSettingDefaultRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.PutAccountSettingDefaultOutput
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingDefaultWithContext(arg1 context.Context, arg2 *ecs.PutAccountSettingDefaultInput, arg3 ...request.Option) (*ecs.PutAccountSettingDefaultOutput, error) {
	fake.putAccountSettingDefaultWithContextMutex.Lock()
	ret, specificReturn := fake.putAccountSettingDefaultWithContextReturnsOnCall[len(fake.putAccountSettingDefaultWithContextArgsForCall)]
	fake.putAccountSettingDefaultWithContextArgsForCall = append(fake.putAccountSettingDefaultWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.PutAccountSettingDefaultInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutAccountSettingDefaultWithContext", []interface{}{arg1, arg2, arg3})
	fake.putAccountSettingDefaultWithContextMutex.Unlock()
	if fake.PutAccountSettingDefaultWithContextStub != nil {
		return fake.PutAccountSettingDefaultWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAccountSettingDefaultWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAccountSettingDefaultWithContextCallCount() int {
	fake.putAccountSettingDefaultWithContextMutex.RLock()
	defer fake.putAccountSettingDefaultWithContextMutex.RUnlock()
	return len(fake.putAccountSettingDefaultWithContextArgsForCall)
}

func (fake *FakeECSClient) PutAccountSettingDefaultWithContextCalls(stub func(context.Context, *ecs.PutAccountSettingDefaultInput, ...request.Option) (*ecs.PutAccountSettingDefaultOutput, error)) {
	fake.putAccountSettingDefaultWithContextMutex.Lock()
	defer fake.putAccountSettingDefaultWithContextMutex.Unlock()
	fake.PutAccountSettingDefaultWithContextStub = stub
}

func (fake *FakeECSClient) PutAccountSettingDefaultWithContextArgsForCall(i int) (context.Context, *ecs.PutAccountSettingDefaultInput, []request.Option) {
	fake.putAccountSettingDefaultWithContextMutex.RLock()
	defer fake.putAccountSettingDefaultWithContextMutex.RUnlock()
	argsForCall := fake.putAccountSettingDefaultWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) PutAccountSettingDefaultWithContextReturns(result1 *ecs.PutAccountSettingDefaultOutput, result2 error) {
	fake.putAccountSettingDefaultWithContextMutex.Lock()
	defer fake.putAccountSettingDefaultWithContextMutex.Unlock()
	fake.PutAccountSettingDefaultWithContextStub = nil
	fake.putAccountSettingDefaultWithContextReturns = struct {
		result1 *ecs.PutAccountSettingDefaultOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingDefaultWithContextReturnsOnCall(i int, result1 *ecs.PutAccountSettingDefaultOutput, result2 error) {
	fake.putAccountSettingDefaultWithContextMutex.Lock()
	defer fake.putAccountSettingDefaultWithContextMutex.Unlock()
	fake.PutAccountSettingDefaultWithContextStub = nil
	if fake.putAccountSettingDefaultWithContextReturnsOnCall == nil {
		fake.putAccountSettingDefaultWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.PutAccountSettingDefaultOutput
			result2 error
		})
	}
	fake.putAccountSettingDefaultWithContextReturnsOnCall[i] = struct {
		result1 *ecs.PutAccountSettingDefaultOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingRequest(arg1 *ecs.PutAccountSettingInput) (*request.Request, *ecs.PutAccountSettingOutput) {
	fake.putAccountSettingRequestMutex.Lock()
	ret, specificReturn := fake.putAccountSettingRequestReturnsOnCall[len(fake.putAccountSettingRequestArgsForCall)]
	fake.putAccountSettingRequestArgsForCall = append(fake.putAccountSettingRequestArgsForCall, struct {
		arg1 *ecs.PutAccountSettingInput
	}{arg1})
	fake.recordInvocation("PutAccountSettingRequest", []interface{}{arg1})
	fake.putAccountSettingRequestMutex.Unlock()
	if fake.PutAccountSettingRequestStub != nil {
		return fake.PutAccountSettingRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAccountSettingRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAccountSettingRequestCallCount() int {
	fake.putAccountSettingRequestMutex.RLock()
	defer fake.putAccountSettingRequestMutex.RUnlock()
	return len(fake.putAccountSettingRequestArgsForCall)
}

func (fake *FakeECSClient) PutAccountSettingRequestCalls(stub func(*ecs.PutAccountSettingInput) (*request.Request, *ecs.PutAccountSettingOutput)) {
	fake.putAccountSettingRequestMutex.Lock()
	defer fake.putAccountSettingRequestMutex.Unlock()
	fake.PutAccountSettingRequestStub = stub
}

func (fake *FakeECSClient) PutAccountSettingRequestArgsForCall(i int) *ecs.PutAccountSettingInput {
	fake.putAccountSettingRequestMutex.RLock()
	defer fake.putAccountSettingRequestMutex.RUnlock()
	argsForCall := fake.putAccountSettingRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) PutAccountSettingRequestReturns(result1 *request.Request, result2 *ecs.PutAccountSettingOutput) {
	fake.putAccountSettingRequestMutex.Lock()
	defer fake.putAccountSettingRequestMutex.Unlock()
	fake.PutAccountSettingRequestStub = nil
	fake.putAccountSettingRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.PutAccountSettingOutput
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.PutAccountSettingOutput) {
	fake.putAccountSettingRequestMutex.Lock()
	defer fake.putAccountSettingRequestMutex.Unlock()
	fake.PutAccountSettingRequestStub = nil
	if fake.putAccountSettingRequestReturnsOnCall == nil {
		fake.putAccountSettingRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.PutAccountSettingOutput
		})
	}
	fake.putAccountSettingRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.PutAccountSettingOutput
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingWithContext(arg1 context.Context, arg2 *ecs.PutAccountSettingInput, arg3 ...request.Option) (*ecs.PutAccountSettingOutput, error) {
	fake.putAccountSettingWithContextMutex.Lock()
	ret, specificReturn := fake.putAccountSettingWithContextReturnsOnCall[len(fake.putAccountSettingWithContextArgsForCall)]
	fake.putAccountSettingWithContextArgsForCall = append(fake.putAccountSettingWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.PutAccountSettingInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutAccountSettingWithContext", []interface{}{arg1, arg2, arg3})
	fake.putAccountSettingWithContextMutex.Unlock()
	if fake.PutAccountSettingWithContextStub != nil {
		return fake.PutAccountSettingWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAccountSettingWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAccountSettingWithContextCallCount() int {
	fake.putAccountSettingWithContextMutex.RLock()
	defer fake.putAccountSettingWithContextMutex.RUnlock()
	return len(fake.putAccountSettingWithContextArgsForCall)
}

func (fake *FakeECSClient) PutAccountSettingWithContextCalls(stub func(context.Context, *ecs.PutAccountSettingInput, ...request.Option) (*ecs.PutAccountSettingOutput, error)) {
	fake.putAccountSettingWithContextMutex.Lock()
	defer fake.putAccountSettingWithContextMutex.Unlock()
	fake.PutAccountSettingWithContextStub = stub
}

func (fake *FakeECSClient) PutAccountSettingWithContextArgsForCall(i int) (context.Context, *ecs.PutAccountSettingInput, []request.Option) {
	fake.putAccountSettingWithContextMutex.RLock()
	defer fake.putAccountSettingWithContextMutex.RUnlock()
	argsForCall := fake.putAccountSettingWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) PutAccountSettingWithContextReturns(result1 *ecs.PutAccountSettingOutput, result2 error) {
	fake.putAccountSettingWithContextMutex.Lock()
	defer fake.putAccountSettingWithContextMutex.Unlock()
	fake.PutAccountSettingWithContextStub = nil
	fake.putAccountSettingWithContextReturns = struct {
		result1 *ecs.PutAccountSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAccountSettingWithContextReturnsOnCall(i int, result1 *ecs.PutAccountSettingOutput, result2 error) {
	fake.putAccountSettingWithContextMutex.Lock()
	defer fake.putAccountSettingWithContextMutex.Unlock()
	fake.PutAccountSettingWithContextStub = nil
	if fake.putAccountSettingWithContextReturnsOnCall == nil {
		fake.putAccountSettingWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.PutAccountSettingOutput
			result2 error
		})
	}
	fake.putAccountSettingWithContextReturnsOnCall[i] = struct {
		result1 *ecs.PutAccountSettingOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAttributes(arg1 *ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error) {
	fake.putAttributesMutex.Lock()
	ret, specificReturn := fake.putAttributesReturnsOnCall[len(fake.putAttributesArgsForCall)]
	fake.putAttributesArgsForCall = append(fake.putAttributesArgsForCall, struct {
		arg1 *ecs.PutAttributesInput
	}{arg1})
	fake.recordInvocation("PutAttributes", []interface{}{arg1})
	fake.putAttributesMutex.Unlock()
	if fake.PutAttributesStub != nil {
		return fake.PutAttributesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAttributesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAttributesCallCount() int {
	fake.putAttributesMutex.RLock()
	defer fake.putAttributesMutex.RUnlock()
	return len(fake.putAttributesArgsForCall)
}

func (fake *FakeECSClient) PutAttributesCalls(stub func(*ecs.PutAttributesInput) (*ecs.PutAttributesOutput, error)) {
	fake.putAttributesMutex.Lock()
	defer fake.putAttributesMutex.Unlock()
	fake.PutAttributesStub = stub
}

func (fake *FakeECSClient) PutAttributesArgsForCall(i int) *ecs.PutAttributesInput {
	fake.putAttributesMutex.RLock()
	defer fake.putAttributesMutex.RUnlock()
	argsForCall := fake.putAttributesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) PutAttributesReturns(result1 *ecs.PutAttributesOutput, result2 error) {
	fake.putAttributesMutex.Lock()
	defer fake.putAttributesMutex.Unlock()
	fake.PutAttributesStub = nil
	fake.putAttributesReturns = struct {
		result1 *ecs.PutAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAttributesReturnsOnCall(i int, result1 *ecs.PutAttributesOutput, result2 error) {
	fake.putAttributesMutex.Lock()
	defer fake.putAttributesMutex.Unlock()
	fake.PutAttributesStub = nil
	if fake.putAttributesReturnsOnCall == nil {
		fake.putAttributesReturnsOnCall = make(map[int]struct {
			result1 *ecs.PutAttributesOutput
			result2 error
		})
	}
	fake.putAttributesReturnsOnCall[i] = struct {
		result1 *ecs.PutAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAttributesRequest(arg1 *ecs.PutAttributesInput) (*request.Request, *ecs.PutAttributesOutput) {
	fake.putAttributesRequestMutex.Lock()
	ret, specificReturn := fake.putAttributesRequestReturnsOnCall[len(fake.putAttributesRequestArgsForCall)]
	fake.putAttributesRequestArgsForCall = append(fake.putAttributesRequestArgsForCall, struct {
		arg1 *ecs.PutAttributesInput
	}{arg1})
	fake.recordInvocation("PutAttributesRequest", []interface{}{arg1})
	fake.putAttributesRequestMutex.Unlock()
	if fake.PutAttributesRequestStub != nil {
		return fake.PutAttributesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAttributesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAttributesRequestCallCount() int {
	fake.putAttributesRequestMutex.RLock()
	defer fake.putAttributesRequestMutex.RUnlock()
	return len(fake.putAttributesRequestArgsForCall)
}

func (fake *FakeECSClient) PutAttributesRequestCalls(stub func(*ecs.PutAttributesInput) (*request.Request, *ecs.PutAttributesOutput)) {
	fake.putAttributesRequestMutex.Lock()
	defer fake.putAttributesRequestMutex.Unlock()
	fake.PutAttributesRequestStub = stub
}

func (fake *FakeECSClient) PutAttributesRequestArgsForCall(i int) *ecs.PutAttributesInput {
	fake.putAttributesRequestMutex.RLock()
	defer fake.putAttributesRequestMutex.RUnlock()
	argsForCall := fake.putAttributesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) PutAttributesRequestReturns(result1 *request.Request, result2 *ecs.PutAttributesOutput) {
	fake.putAttributesRequestMutex.Lock()
	defer fake.putAttributesRequestMutex.Unlock()
	fake.PutAttributesRequestStub = nil
	fake.putAttributesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.PutAttributesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) PutAttributesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.PutAttributesOutput) {
	fake.putAttributesRequestMutex.Lock()
	defer fake.putAttributesRequestMutex.Unlock()
	fake.PutAttributesRequestStub = nil
	if fake.putAttributesRequestReturnsOnCall == nil {
		fake.putAttributesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.PutAttributesOutput
		})
	}
	fake.putAttributesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.PutAttributesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) PutAttributesWithContext(arg1 context.Context, arg2 *ecs.PutAttributesInput, arg3 ...request.Option) (*ecs.PutAttributesOutput, error) {
	fake.putAttributesWithContextMutex.Lock()
	ret, specificReturn := fake.putAttributesWithContextReturnsOnCall[len(fake.putAttributesWithContextArgsForCall)]
	fake.putAttributesWithContextArgsForCall = append(fake.putAttributesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.PutAttributesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutAttributesWithContext", []interface{}{arg1, arg2, arg3})
	fake.putAttributesWithContextMutex.Unlock()
	if fake.PutAttributesWithContextStub != nil {
		return fake.PutAttributesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putAttributesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutAttributesWithContextCallCount() int {
	fake.putAttributesWithContextMutex.RLock()
	defer fake.putAttributesWithContextMutex.RUnlock()
	return len(fake.putAttributesWithContextArgsForCall)
}

func (fake *FakeECSClient) PutAttributesWithContextCalls(stub func(context.Context, *ecs.PutAttributesInput, ...request.Option) (*ecs.PutAttributesOutput, error)) {
	fake.putAttributesWithContextMutex.Lock()
	defer fake.putAttributesWithContextMutex.Unlock()
	fake.PutAttributesWithContextStub = stub
}

func (fake *FakeECSClient) PutAttributesWithContextArgsForCall(i int) (context.Context, *ecs.PutAttributesInput, []request.Option) {
	fake.putAttributesWithContextMutex.RLock()
	defer fake.putAttributesWithContextMutex.RUnlock()
	argsForCall := fake.putAttributesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) PutAttributesWithContextReturns(result1 *ecs.PutAttributesOutput, result2 error) {
	fake.putAttributesWithContextMutex.Lock()
	defer fake.putAttributesWithContextMutex.Unlock()
	fake.PutAttributesWithContextStub = nil
	fake.putAttributesWithContextReturns = struct {
		result1 *ecs.PutAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutAttributesWithContextReturnsOnCall(i int, result1 *ecs.PutAttributesOutput, result2 error) {
	fake.putAttributesWithContextMutex.Lock()
	defer fake.putAttributesWithContextMutex.Unlock()
	fake.PutAttributesWithContextStub = nil
	if fake.putAttributesWithContextReturnsOnCall == nil {
		fake.putAttributesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.PutAttributesOutput
			result2 error
		})
	}
	fake.putAttributesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.PutAttributesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutClusterCapacityProviders(arg1 *ecs.PutClusterCapacityProvidersInput) (*ecs.PutClusterCapacityProvidersOutput, error) {
	fake.putClusterCapacityProvidersMutex.Lock()
	ret, specificReturn := fake.putClusterCapacityProvidersReturnsOnCall[len(fake.putClusterCapacityProvidersArgsForCall)]
	fake.putClusterCapacityProvidersArgsForCall = append(fake.putClusterCapacityProvidersArgsForCall, struct {
		arg1 *ecs.PutClusterCapacityProvidersInput
	}{arg1})
	fake.recordInvocation("PutClusterCapacityProviders", []interface{}{arg1})
	fake.putClusterCapacityProvidersMutex.Unlock()
	if fake.PutClusterCapacityProvidersStub != nil {
		return fake.PutClusterCapacityProvidersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putClusterCapacityProvidersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutClusterCapacityProvidersCallCount() int {
	fake.putClusterCapacityProvidersMutex.RLock()
	defer fake.putClusterCapacityProvidersMutex.RUnlock()
	return len(fake.putClusterCapacityProvidersArgsForCall)
}

func (fake *FakeECSClient) PutClusterCapacityProvidersCalls(stub func(*ecs.PutClusterCapacityProvidersInput) (*ecs.PutClusterCapacityProvidersOutput, error)) {
	fake.putClusterCapacityProvidersMutex.Lock()
	defer fake.putClusterCapacityProvidersMutex.Unlock()
	fake.PutClusterCapacityProvidersStub = stub
}

func (fake *FakeECSClient) PutClusterCapacityProvidersArgsForCall(i int) *ecs.PutClusterCapacityProvidersInput {
	fake.putClusterCapacityProvidersMutex.RLock()
	defer fake.putClusterCapacityProvidersMutex.RUnlock()
	argsForCall := fake.putClusterCapacityProvidersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) PutClusterCapacityProvidersReturns(result1 *ecs.PutClusterCapacityProvidersOutput, result2 error) {
	fake.putClusterCapacityProvidersMutex.Lock()
	defer fake.putClusterCapacityProvidersMutex.Unlock()
	fake.PutClusterCapacityProvidersStub = nil
	fake.putClusterCapacityProvidersReturns = struct {
		result1 *ecs.PutClusterCapacityProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutClusterCapacityProvidersReturnsOnCall(i int, result1 *ecs.PutClusterCapacityProvidersOutput, result2 error) {
	fake.putClusterCapacityProvidersMutex.Lock()
	defer fake.putClusterCapacityProvidersMutex.Unlock()
	fake.PutClusterCapacityProvidersStub = nil
	if fake.putClusterCapacityProvidersReturnsOnCall == nil {
		fake.putClusterCapacityProvidersReturnsOnCall = make(map[int]struct {
			result1 *ecs.PutClusterCapacityProvidersOutput
			result2 error
		})
	}
	fake.putClusterCapacityProvidersReturnsOnCall[i] = struct {
		result1 *ecs.PutClusterCapacityProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutClusterCapacityProvidersRequest(arg1 *ecs.PutClusterCapacityProvidersInput) (*request.Request, *ecs.PutClusterCapacityProvidersOutput) {
	fake.putClusterCapacityProvidersRequestMutex.Lock()
	ret, specificReturn := fake.putClusterCapacityProvidersRequestReturnsOnCall[len(fake.putClusterCapacityProvidersRequestArgsForCall)]
	fake.putClusterCapacityProvidersRequestArgsForCall = append(fake.putClusterCapacityProvidersRequestArgsForCall, struct {
		arg1 *ecs.PutClusterCapacityProvidersInput
	}{arg1})
	fake.recordInvocation("PutClusterCapacityProvidersRequest", []interface{}{arg1})
	fake.putClusterCapacityProvidersRequestMutex.Unlock()
	if fake.PutClusterCapacityProvidersRequestStub != nil {
		return fake.PutClusterCapacityProvidersRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putClusterCapacityProvidersRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutClusterCapacityProvidersRequestCallCount() int {
	fake.putClusterCapacityProvidersRequestMutex.RLock()
	defer fake.putClusterCapacityProvidersRequestMutex.RUnlock()
	return len(fake.putClusterCapacityProvidersRequestArgsForCall)
}

func (fake *FakeECSClient) PutClusterCapacityProvidersRequestCalls(stub func(*ecs.PutClusterCapacityProvidersInput) (*request.Request, *ecs.PutClusterCapacityProvidersOutput)) {
	fake.putClusterCapacityProvidersRequestMutex.Lock()
	defer fake.putClusterCapacityProvidersRequestMutex.Unlock()
	fake.PutClusterCapacityProvidersRequestStub = stub
}

func (fake *FakeECSClient) PutClusterCapacityProvidersRequestArgsForCall(i int) *ecs.PutClusterCapacityProvidersInput {
	fake.putClusterCapacityProvidersRequestMutex.RLock()
	defer fake.putClusterCapacityProvidersRequestMutex.RUnlock()
	argsForCall := fake.putClusterCapacityProvidersRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) PutClusterCapacityProvidersRequestReturns(result1 *request.Request, result2 *ecs.PutClusterCapacityProvidersOutput) {
	fake.putClusterCapacityProvidersRequestMutex.Lock()
	defer fake.putClusterCapacityProvidersRequestMutex.Unlock()
	fake.PutClusterCapacityProvidersRequestStub = nil
	fake.putClusterCapacityProvidersRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.PutClusterCapacityProvidersOutput
	}{result1, result2}
}

func (fake *FakeECSClient) PutClusterCapacityProvidersRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.PutClusterCapacityProvidersOutput) {
	fake.putClusterCapacityProvidersRequestMutex.Lock()
	defer fake.putClusterCapacityProvidersRequestMutex.Unlock()
	fake.PutClusterCapacityProvidersRequestStub = nil
	if fake.putClusterCapacityProvidersRequestReturnsOnCall == nil {
		fake.putClusterCapacityProvidersRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.PutClusterCapacityProvidersOutput
		})
	}
	fake.putClusterCapacityProvidersRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.PutClusterCapacityProvidersOutput
	}{result1, result2}
}

func (fake *FakeECSClient) PutClusterCapacityProvidersWithContext(arg1 context.Context, arg2 *ecs.PutClusterCapacityProvidersInput, arg3 ...request.Option) (*ecs.PutClusterCapacityProvidersOutput, error) {
	fake.putClusterCapacityProvidersWithContextMutex.Lock()
	ret, specificReturn := fake.putClusterCapacityProvidersWithContextReturnsOnCall[len(fake.putClusterCapacityProvidersWithContextArgsForCall)]
	fake.putClusterCapacityProvidersWithContextArgsForCall = append(fake.putClusterCapacityProvidersWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.PutClusterCapacityProvidersInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("PutClusterCapacityProvidersWithContext", []interface{}{arg1, arg2, arg3})
	fake.putClusterCapacityProvidersWithContextMutex.Unlock()
	if fake.PutClusterCapacityProvidersWithContextStub != nil {
		return fake.PutClusterCapacityProvidersWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.putClusterCapacityProvidersWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) PutClusterCapacityProvidersWithContextCallCount() int {
	fake.putClusterCapacityProvidersWithContextMutex.RLock()
	defer fake.putClusterCapacityProvidersWithContextMutex.RUnlock()
	return len(fake.putClusterCapacityProvidersWithContextArgsForCall)
}

func (fake *FakeECSClient) PutClusterCapacityProvidersWithContextCalls(stub func(context.Context, *ecs.PutClusterCapacityProvidersInput, ...request.Option) (*ecs.PutClusterCapacityProvidersOutput, error)) {
	fake.putClusterCapacityProvidersWithContextMutex.Lock()
	defer fake.putClusterCapacityProvidersWithContextMutex.Unlock()
	fake.PutClusterCapacityProvidersWithContextStub = stub
}

func (fake *FakeECSClient) PutClusterCapacityProvidersWithContextArgsForCall(i int) (context.Context, *ecs.PutClusterCapacityProvidersInput, []request.Option) {
	fake.putClusterCapacityProvidersWithContextMutex.RLock()
	defer fake.putClusterCapacityProvidersWithContextMutex.RUnlock()
	argsForCall := fake.putClusterCapacityProvidersWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) PutClusterCapacityProvidersWithContextReturns(result1 *ecs.PutClusterCapacityProvidersOutput, result2 error) {
	fake.putClusterCapacityProvidersWithContextMutex.Lock()
	defer fake.putClusterCapacityProvidersWithContextMutex.Unlock()
	fake.PutClusterCapacityProvidersWithContextStub = nil
	fake.putClusterCapacityProvidersWithContextReturns = struct {
		result1 *ecs.PutClusterCapacityProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) PutClusterCapacityProvidersWithContextReturnsOnCall(i int, result1 *ecs.PutClusterCapacityProvidersOutput, result2 error) {
	fake.putClusterCapacityProvidersWithContextMutex.Lock()
	defer fake.putClusterCapacityProvidersWithContextMutex.Unlock()
	fake.PutClusterCapacityProvidersWithContextStub = nil
	if fake.putClusterCapacityProvidersWithContextReturnsOnCall == nil {
		fake.putClusterCapacityProvidersWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.PutClusterCapacityProvidersOutput
			result2 error
		})
	}
	fake.putClusterCapacityProvidersWithContextReturnsOnCall[i] = struct {
		result1 *ecs.PutClusterCapacityProvidersOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterContainerInstance(arg1 *ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error) {
	fake.registerContainerInstanceMutex.Lock()
	ret, specificReturn := fake.registerContainerInstanceReturnsOnCall[len(fake.registerContainerInstanceArgsForCall)]
	fake.registerContainerInstanceArgsForCall = append(fake.registerContainerInstanceArgsForCall, struct {
		arg1 *ecs.RegisterContainerInstanceInput
	}{arg1})
	fake.recordInvocation("RegisterContainerInstance", []interface{}{arg1})
	fake.registerContainerInstanceMutex.Unlock()
	if fake.RegisterContainerInstanceStub != nil {
		return fake.RegisterContainerInstanceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerContainerInstanceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RegisterContainerInstanceCallCount() int {
	fake.registerContainerInstanceMutex.RLock()
	defer fake.registerContainerInstanceMutex.RUnlock()
	return len(fake.registerContainerInstanceArgsForCall)
}

func (fake *FakeECSClient) RegisterContainerInstanceCalls(stub func(*ecs.RegisterContainerInstanceInput) (*ecs.RegisterContainerInstanceOutput, error)) {
	fake.registerContainerInstanceMutex.Lock()
	defer fake.registerContainerInstanceMutex.Unlock()
	fake.RegisterContainerInstanceStub = stub
}

func (fake *FakeECSClient) RegisterContainerInstanceArgsForCall(i int) *ecs.RegisterContainerInstanceInput {
	fake.registerContainerInstanceMutex.RLock()
	defer fake.registerContainerInstanceMutex.RUnlock()
	argsForCall := fake.registerContainerInstanceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) RegisterContainerInstanceReturns(result1 *ecs.RegisterContainerInstanceOutput, result2 error) {
	fake.registerContainerInstanceMutex.Lock()
	defer fake.registerContainerInstanceMutex.Unlock()
	fake.RegisterContainerInstanceStub = nil
	fake.registerContainerInstanceReturns = struct {
		result1 *ecs.RegisterContainerInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterContainerInstanceReturnsOnCall(i int, result1 *ecs.RegisterContainerInstanceOutput, result2 error) {
	fake.registerContainerInstanceMutex.Lock()
	defer fake.registerContainerInstanceMutex.Unlock()
	fake.RegisterContainerInstanceStub = nil
	if fake.registerContainerInstanceReturnsOnCall == nil {
		fake.registerContainerInstanceReturnsOnCall = make(map[int]struct {
			result1 *ecs.RegisterContainerInstanceOutput
			result2 error
		})
	}
	fake.registerContainerInstanceReturnsOnCall[i] = struct {
		result1 *ecs.RegisterContainerInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterContainerInstanceRequest(arg1 *ecs.RegisterContainerInstanceInput) (*request.Request, *ecs.RegisterContainerInstanceOutput) {
	fake.registerContainerInstanceRequestMutex.Lock()
	ret, specificReturn := fake.registerContainerInstanceRequestReturnsOnCall[len(fake.registerContainerInstanceRequestArgsForCall)]
	fake.registerContainerInstanceRequestArgsForCall = append(fake.registerContainerInstanceRequestArgsForCall, struct {
		arg1 *ecs.RegisterContainerInstanceInput
	}{arg1})
	fake.recordInvocation("RegisterContainerInstanceRequest", []interface{}{arg1})
	fake.registerContainerInstanceRequestMutex.Unlock()
	if fake.RegisterContainerInstanceRequestStub != nil {
		return fake.RegisterContainerInstanceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerContainerInstanceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RegisterContainerInstanceRequestCallCount() int {
	fake.registerContainerInstanceRequestMutex.RLock()
	defer fake.registerContainerInstanceRequestMutex.RUnlock()
	return len(fake.registerContainerInstanceRequestArgsForCall)
}

func (fake *FakeECSClient) RegisterContainerInstanceRequestCalls(stub func(*ecs.RegisterContainerInstanceInput) (*request.Request, *ecs.RegisterContainerInstanceOutput)) {
	fake.registerContainerInstanceRequestMutex.Lock()
	defer fake.registerContainerInstanceRequestMutex.Unlock()
	fake.RegisterContainerInstanceRequestStub = stub
}

func (fake *FakeECSClient) RegisterContainerInstanceRequestArgsForCall(i int) *ecs.RegisterContainerInstanceInput {
	fake.registerContainerInstanceRequestMutex.RLock()
	defer fake.registerContainerInstanceRequestMutex.RUnlock()
	argsForCall := fake.registerContainerInstanceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) RegisterContainerInstanceRequestReturns(result1 *request.Request, result2 *ecs.RegisterContainerInstanceOutput) {
	fake.registerContainerInstanceRequestMutex.Lock()
	defer fake.registerContainerInstanceRequestMutex.Unlock()
	fake.RegisterContainerInstanceRequestStub = nil
	fake.registerContainerInstanceRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.RegisterContainerInstanceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterContainerInstanceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.RegisterContainerInstanceOutput) {
	fake.registerContainerInstanceRequestMutex.Lock()
	defer fake.registerContainerInstanceRequestMutex.Unlock()
	fake.RegisterContainerInstanceRequestStub = nil
	if fake.registerContainerInstanceRequestReturnsOnCall == nil {
		fake.registerContainerInstanceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.RegisterContainerInstanceOutput
		})
	}
	fake.registerContainerInstanceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.RegisterContainerInstanceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterContainerInstanceWithContext(arg1 context.Context, arg2 *ecs.RegisterContainerInstanceInput, arg3 ...request.Option) (*ecs.RegisterContainerInstanceOutput, error) {
	fake.registerContainerInstanceWithContextMutex.Lock()
	ret, specificReturn := fake.registerContainerInstanceWithContextReturnsOnCall[len(fake.registerContainerInstanceWithContextArgsForCall)]
	fake.registerContainerInstanceWithContextArgsForCall = append(fake.registerContainerInstanceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.RegisterContainerInstanceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RegisterContainerInstanceWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerContainerInstanceWithContextMutex.Unlock()
	if fake.RegisterContainerInstanceWithContextStub != nil {
		return fake.RegisterContainerInstanceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerContainerInstanceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RegisterContainerInstanceWithContextCallCount() int {
	fake.registerContainerInstanceWithContextMutex.RLock()
	defer fake.registerContainerInstanceWithContextMutex.RUnlock()
	return len(fake.registerContainerInstanceWithContextArgsForCall)
}

func (fake *FakeECSClient) RegisterContainerInstanceWithContextCalls(stub func(context.Context, *ecs.RegisterContainerInstanceInput, ...request.Option) (*ecs.RegisterContainerInstanceOutput, error)) {
	fake.registerContainerInstanceWithContextMutex.Lock()
	defer fake.registerContainerInstanceWithContextMutex.Unlock()
	fake.RegisterContainerInstanceWithContextStub = stub
}

func (fake *FakeECSClient) RegisterContainerInstanceWithContextArgsForCall(i int) (context.Context, *ecs.RegisterContainerInstanceInput, []request.Option) {
	fake.registerContainerInstanceWithContextMutex.RLock()
	defer fake.registerContainerInstanceWithContextMutex.RUnlock()
	argsForCall := fake.registerContainerInstanceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) RegisterContainerInstanceWithContextReturns(result1 *ecs.RegisterContainerInstanceOutput, result2 error) {
	fake.registerContainerInstanceWithContextMutex.Lock()
	defer fake.registerContainerInstanceWithContextMutex.Unlock()
	fake.RegisterContainerInstanceWithContextStub = nil
	fake.registerContainerInstanceWithContextReturns = struct {
		result1 *ecs.RegisterContainerInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterContainerInstanceWithContextReturnsOnCall(i int, result1 *ecs.RegisterContainerInstanceOutput, result2 error) {
	fake.registerContainerInstanceWithContextMutex.Lock()
	defer fake.registerContainerInstanceWithContextMutex.Unlock()
	fake.RegisterContainerInstanceWithContextStub = nil
	if fake.registerContainerInstanceWithContextReturnsOnCall == nil {
		fake.registerContainerInstanceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.RegisterContainerInstanceOutput
			result2 error
		})
	}
	fake.registerContainerInstanceWithContextReturnsOnCall[i] = struct {
		result1 *ecs.RegisterContainerInstanceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterTaskDefinition(arg1 *ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error) {
	fake.registerTaskDefinitionMutex.Lock()
	ret, specificReturn := fake.registerTaskDefinitionReturnsOnCall[len(fake.registerTaskDefinitionArgsForCall)]
	fake.registerTaskDefinitionArgsForCall = append(fake.registerTaskDefinitionArgsForCall, struct {
		arg1 *ecs.RegisterTaskDefinitionInput
	}{arg1})
	fake.recordInvocation("RegisterTaskDefinition", []interface{}{arg1})
	fake.registerTaskDefinitionMutex.Unlock()
	if fake.RegisterTaskDefinitionStub != nil {
		return fake.RegisterTaskDefinitionStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerTaskDefinitionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RegisterTaskDefinitionCallCount() int {
	fake.registerTaskDefinitionMutex.RLock()
	defer fake.registerTaskDefinitionMutex.RUnlock()
	return len(fake.registerTaskDefinitionArgsForCall)
}

func (fake *FakeECSClient) RegisterTaskDefinitionCalls(stub func(*ecs.RegisterTaskDefinitionInput) (*ecs.RegisterTaskDefinitionOutput, error)) {
	fake.registerTaskDefinitionMutex.Lock()
	defer fake.registerTaskDefinitionMutex.Unlock()
	fake.RegisterTaskDefinitionStub = stub
}

func (fake *FakeECSClient) RegisterTaskDefinitionArgsForCall(i int) *ecs.RegisterTaskDefinitionInput {
	fake.registerTaskDefinitionMutex.RLock()
	defer fake.registerTaskDefinitionMutex.RUnlock()
	argsForCall := fake.registerTaskDefinitionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) RegisterTaskDefinitionReturns(result1 *ecs.RegisterTaskDefinitionOutput, result2 error) {
	fake.registerTaskDefinitionMutex.Lock()
	defer fake.registerTaskDefinitionMutex.Unlock()
	fake.RegisterTaskDefinitionStub = nil
	fake.registerTaskDefinitionReturns = struct {
		result1 *ecs.RegisterTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterTaskDefinitionReturnsOnCall(i int, result1 *ecs.RegisterTaskDefinitionOutput, result2 error) {
	fake.registerTaskDefinitionMutex.Lock()
	defer fake.registerTaskDefinitionMutex.Unlock()
	fake.RegisterTaskDefinitionStub = nil
	if fake.registerTaskDefinitionReturnsOnCall == nil {
		fake.registerTaskDefinitionReturnsOnCall = make(map[int]struct {
			result1 *ecs.RegisterTaskDefinitionOutput
			result2 error
		})
	}
	fake.registerTaskDefinitionReturnsOnCall[i] = struct {
		result1 *ecs.RegisterTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterTaskDefinitionRequest(arg1 *ecs.RegisterTaskDefinitionInput) (*request.Request, *ecs.RegisterTaskDefinitionOutput) {
	fake.registerTaskDefinitionRequestMutex.Lock()
	ret, specificReturn := fake.registerTaskDefinitionRequestReturnsOnCall[len(fake.registerTaskDefinitionRequestArgsForCall)]
	fake.registerTaskDefinitionRequestArgsForCall = append(fake.registerTaskDefinitionRequestArgsForCall, struct {
		arg1 *ecs.RegisterTaskDefinitionInput
	}{arg1})
	fake.recordInvocation("RegisterTaskDefinitionRequest", []interface{}{arg1})
	fake.registerTaskDefinitionRequestMutex.Unlock()
	if fake.RegisterTaskDefinitionRequestStub != nil {
		return fake.RegisterTaskDefinitionRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerTaskDefinitionRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RegisterTaskDefinitionRequestCallCount() int {
	fake.registerTaskDefinitionRequestMutex.RLock()
	defer fake.registerTaskDefinitionRequestMutex.RUnlock()
	return len(fake.registerTaskDefinitionRequestArgsForCall)
}

func (fake *FakeECSClient) RegisterTaskDefinitionRequestCalls(stub func(*ecs.RegisterTaskDefinitionInput) (*request.Request, *ecs.RegisterTaskDefinitionOutput)) {
	fake.registerTaskDefinitionRequestMutex.Lock()
	defer fake.registerTaskDefinitionRequestMutex.Unlock()
	fake.RegisterTaskDefinitionRequestStub = stub
}

func (fake *FakeECSClient) RegisterTaskDefinitionRequestArgsForCall(i int) *ecs.RegisterTaskDefinitionInput {
	fake.registerTaskDefinitionRequestMutex.RLock()
	defer fake.registerTaskDefinitionRequestMutex.RUnlock()
	argsForCall := fake.registerTaskDefinitionRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) RegisterTaskDefinitionRequestReturns(result1 *request.Request, result2 *ecs.RegisterTaskDefinitionOutput) {
	fake.registerTaskDefinitionRequestMutex.Lock()
	defer fake.registerTaskDefinitionRequestMutex.Unlock()
	fake.RegisterTaskDefinitionRequestStub = nil
	fake.registerTaskDefinitionRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.RegisterTaskDefinitionOutput
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterTaskDefinitionRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.RegisterTaskDefinitionOutput) {
	fake.registerTaskDefinitionRequestMutex.Lock()
	defer fake.registerTaskDefinitionRequestMutex.Unlock()
	fake.RegisterTaskDefinitionRequestStub = nil
	if fake.registerTaskDefinitionRequestReturnsOnCall == nil {
		fake.registerTaskDefinitionRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.RegisterTaskDefinitionOutput
		})
	}
	fake.registerTaskDefinitionRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.RegisterTaskDefinitionOutput
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterTaskDefinitionWithContext(arg1 context.Context, arg2 *ecs.RegisterTaskDefinitionInput, arg3 ...request.Option) (*ecs.RegisterTaskDefinitionOutput, error) {
	fake.registerTaskDefinitionWithContextMutex.Lock()
	ret, specificReturn := fake.registerTaskDefinitionWithContextReturnsOnCall[len(fake.registerTaskDefinitionWithContextArgsForCall)]
	fake.registerTaskDefinitionWithContextArgsForCall = append(fake.registerTaskDefinitionWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.RegisterTaskDefinitionInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RegisterTaskDefinitionWithContext", []interface{}{arg1, arg2, arg3})
	fake.registerTaskDefinitionWithContextMutex.Unlock()
	if fake.RegisterTaskDefinitionWithContextStub != nil {
		return fake.RegisterTaskDefinitionWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.registerTaskDefinitionWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RegisterTaskDefinitionWithContextCallCount() int {
	fake.registerTaskDefinitionWithContextMutex.RLock()
	defer fake.registerTaskDefinitionWithContextMutex.RUnlock()
	return len(fake.registerTaskDefinitionWithContextArgsForCall)
}

func (fake *FakeECSClient) RegisterTaskDefinitionWithContextCalls(stub func(context.Context, *ecs.RegisterTaskDefinitionInput, ...request.Option) (*ecs.RegisterTaskDefinitionOutput, error)) {
	fake.registerTaskDefinitionWithContextMutex.Lock()
	defer fake.registerTaskDefinitionWithContextMutex.Unlock()
	fake.RegisterTaskDefinitionWithContextStub = stub
}

func (fake *FakeECSClient) RegisterTaskDefinitionWithContextArgsForCall(i int) (context.Context, *ecs.RegisterTaskDefinitionInput, []request.Option) {
	fake.registerTaskDefinitionWithContextMutex.RLock()
	defer fake.registerTaskDefinitionWithContextMutex.RUnlock()
	argsForCall := fake.registerTaskDefinitionWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) RegisterTaskDefinitionWithContextReturns(result1 *ecs.RegisterTaskDefinitionOutput, result2 error) {
	fake.registerTaskDefinitionWithContextMutex.Lock()
	defer fake.registerTaskDefinitionWithContextMutex.Unlock()
	fake.RegisterTaskDefinitionWithContextStub = nil
	fake.registerTaskDefinitionWithContextReturns = struct {
		result1 *ecs.RegisterTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RegisterTaskDefinitionWithContextReturnsOnCall(i int, result1 *ecs.RegisterTaskDefinitionOutput, result2 error) {
	fake.registerTaskDefinitionWithContextMutex.Lock()
	defer fake.registerTaskDefinitionWithContextMutex.Unlock()
	fake.RegisterTaskDefinitionWithContextStub = nil
	if fake.registerTaskDefinitionWithContextReturnsOnCall == nil {
		fake.registerTaskDefinitionWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.RegisterTaskDefinitionOutput
			result2 error
		})
	}
	fake.registerTaskDefinitionWithContextReturnsOnCall[i] = struct {
		result1 *ecs.RegisterTaskDefinitionOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RunTask(arg1 *ecs.RunTaskInput) (*ecs.RunTaskOutput, error) {
	fake.runTaskMutex.Lock()
	ret, specificReturn := fake.runTaskReturnsOnCall[len(fake.runTaskArgsForCall)]
	fake.runTaskArgsForCall = append(fake.runTaskArgsForCall, struct {
		arg1 *ecs.RunTaskInput
	}{arg1})
	fake.recordInvocation("RunTask", []interface{}{arg1})
	fake.runTaskMutex.Unlock()
	if fake.RunTaskStub != nil {
		return fake.RunTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RunTaskCallCount() int {
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	return len(fake.runTaskArgsForCall)
}

func (fake *FakeECSClient) RunTaskCalls(stub func(*ecs.RunTaskInput) (*ecs.RunTaskOutput, error)) {
	fake.runTaskMutex.Lock()
	defer fake.runTaskMutex.Unlock()
	fake.RunTaskStub = stub
}

func (fake *FakeECSClient) RunTaskArgsForCall(i int) *ecs.RunTaskInput {
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	argsForCall := fake.runTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) RunTaskReturns(result1 *ecs.RunTaskOutput, result2 error) {
	fake.runTaskMutex.Lock()
	defer fake.runTaskMutex.Unlock()
	fake.RunTaskStub = nil
	fake.runTaskReturns = struct {
		result1 *ecs.RunTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RunTaskReturnsOnCall(i int, result1 *ecs.RunTaskOutput, result2 error) {
	fake.runTaskMutex.Lock()
	defer fake.runTaskMutex.Unlock()
	fake.RunTaskStub = nil
	if fake.runTaskReturnsOnCall == nil {
		fake.runTaskReturnsOnCall = make(map[int]struct {
			result1 *ecs.RunTaskOutput
			result2 error
		})
	}
	fake.runTaskReturnsOnCall[i] = struct {
		result1 *ecs.RunTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RunTaskRequest(arg1 *ecs.RunTaskInput) (*request.Request, *ecs.RunTaskOutput) {
	fake.runTaskRequestMutex.Lock()
	ret, specificReturn := fake.runTaskRequestReturnsOnCall[len(fake.runTaskRequestArgsForCall)]
	fake.runTaskRequestArgsForCall = append(fake.runTaskRequestArgsForCall, struct {
		arg1 *ecs.RunTaskInput
	}{arg1})
	fake.recordInvocation("RunTaskRequest", []interface{}{arg1})
	fake.runTaskRequestMutex.Unlock()
	if fake.RunTaskRequestStub != nil {
		return fake.RunTaskRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runTaskRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RunTaskRequestCallCount() int {
	fake.runTaskRequestMutex.RLock()
	defer fake.runTaskRequestMutex.RUnlock()
	return len(fake.runTaskRequestArgsForCall)
}

func (fake *FakeECSClient) RunTaskRequestCalls(stub func(*ecs.RunTaskInput) (*request.Request, *ecs.RunTaskOutput)) {
	fake.runTaskRequestMutex.Lock()
	defer fake.runTaskRequestMutex.Unlock()
	fake.RunTaskRequestStub = stub
}

func (fake *FakeECSClient) RunTaskRequestArgsForCall(i int) *ecs.RunTaskInput {
	fake.runTaskRequestMutex.RLock()
	defer fake.runTaskRequestMutex.RUnlock()
	argsForCall := fake.runTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) RunTaskRequestReturns(result1 *request.Request, result2 *ecs.RunTaskOutput) {
	fake.runTaskRequestMutex.Lock()
	defer fake.runTaskRequestMutex.Unlock()
	fake.RunTaskRequestStub = nil
	fake.runTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.RunTaskOutput
	}{result1, result2}
}

func (fake *FakeECSClient) RunTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.RunTaskOutput) {
	fake.runTaskRequestMutex.Lock()
	defer fake.runTaskRequestMutex.Unlock()
	fake.RunTaskRequestStub = nil
	if fake.runTaskRequestReturnsOnCall == nil {
		fake.runTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.RunTaskOutput
		})
	}
	fake.runTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.RunTaskOutput
	}{result1, result2}
}

func (fake *FakeECSClient) RunTaskWithContext(arg1 context.Context, arg2 *ecs.RunTaskInput, arg3 ...request.Option) (*ecs.RunTaskOutput, error) {
	fake.runTaskWithContextMutex.Lock()
	ret, specificReturn := fake.runTaskWithContextReturnsOnCall[len(fake.runTaskWithContextArgsForCall)]
	fake.runTaskWithContextArgsForCall = append(fake.runTaskWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.RunTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("RunTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.runTaskWithContextMutex.Unlock()
	if fake.RunTaskWithContextStub != nil {
		return fake.RunTaskWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.runTaskWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) RunTaskWithContextCallCount() int {
	fake.runTaskWithContextMutex.RLock()
	defer fake.runTaskWithContextMutex.RUnlock()
	return len(fake.runTaskWithContextArgsForCall)
}

func (fake *FakeECSClient) RunTaskWithContextCalls(stub func(context.Context, *ecs.RunTaskInput, ...request.Option) (*ecs.RunTaskOutput, error)) {
	fake.runTaskWithContextMutex.Lock()
	defer fake.runTaskWithContextMutex.Unlock()
	fake.RunTaskWithContextStub = stub
}

func (fake *FakeECSClient) RunTaskWithContextArgsForCall(i int) (context.Context, *ecs.RunTaskInput, []request.Option) {
	fake.runTaskWithContextMutex.RLock()
	defer fake.runTaskWithContextMutex.RUnlock()
	argsForCall := fake.runTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) RunTaskWithContextReturns(result1 *ecs.RunTaskOutput, result2 error) {
	fake.runTaskWithContextMutex.Lock()
	defer fake.runTaskWithContextMutex.Unlock()
	fake.RunTaskWithContextStub = nil
	fake.runTaskWithContextReturns = struct {
		result1 *ecs.RunTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) RunTaskWithContextReturnsOnCall(i int, result1 *ecs.RunTaskOutput, result2 error) {
	fake.runTaskWithContextMutex.Lock()
	defer fake.runTaskWithContextMutex.Unlock()
	fake.RunTaskWithContextStub = nil
	if fake.runTaskWithContextReturnsOnCall == nil {
		fake.runTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.RunTaskOutput
			result2 error
		})
	}
	fake.runTaskWithContextReturnsOnCall[i] = struct {
		result1 *ecs.RunTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) StartTask(arg1 *ecs.StartTaskInput) (*ecs.StartTaskOutput, error) {
	fake.startTaskMutex.Lock()
	ret, specificReturn := fake.startTaskReturnsOnCall[len(fake.startTaskArgsForCall)]
	fake.startTaskArgsForCall = append(fake.startTaskArgsForCall, struct {
		arg1 *ecs.StartTaskInput
	}{arg1})
	fake.recordInvocation("StartTask", []interface{}{arg1})
	fake.startTaskMutex.Unlock()
	if fake.StartTaskStub != nil {
		return fake.StartTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) StartTaskCallCount() int {
	fake.startTaskMutex.RLock()
	defer fake.startTaskMutex.RUnlock()
	return len(fake.startTaskArgsForCall)
}

func (fake *FakeECSClient) StartTaskCalls(stub func(*ecs.StartTaskInput) (*ecs.StartTaskOutput, error)) {
	fake.startTaskMutex.Lock()
	defer fake.startTaskMutex.Unlock()
	fake.StartTaskStub = stub
}

func (fake *FakeECSClient) StartTaskArgsForCall(i int) *ecs.StartTaskInput {
	fake.startTaskMutex.RLock()
	defer fake.startTaskMutex.RUnlock()
	argsForCall := fake.startTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) StartTaskReturns(result1 *ecs.StartTaskOutput, result2 error) {
	fake.startTaskMutex.Lock()
	defer fake.startTaskMutex.Unlock()
	fake.StartTaskStub = nil
	fake.startTaskReturns = struct {
		result1 *ecs.StartTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) StartTaskReturnsOnCall(i int, result1 *ecs.StartTaskOutput, result2 error) {
	fake.startTaskMutex.Lock()
	defer fake.startTaskMutex.Unlock()
	fake.StartTaskStub = nil
	if fake.startTaskReturnsOnCall == nil {
		fake.startTaskReturnsOnCall = make(map[int]struct {
			result1 *ecs.StartTaskOutput
			result2 error
		})
	}
	fake.startTaskReturnsOnCall[i] = struct {
		result1 *ecs.StartTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) StartTaskRequest(arg1 *ecs.StartTaskInput) (*request.Request, *ecs.StartTaskOutput) {
	fake.startTaskRequestMutex.Lock()
	ret, specificReturn := fake.startTaskRequestReturnsOnCall[len(fake.startTaskRequestArgsForCall)]
	fake.startTaskRequestArgsForCall = append(fake.startTaskRequestArgsForCall, struct {
		arg1 *ecs.StartTaskInput
	}{arg1})
	fake.recordInvocation("StartTaskRequest", []interface{}{arg1})
	fake.startTaskRequestMutex.Unlock()
	if fake.StartTaskRequestStub != nil {
		return fake.StartTaskRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startTaskRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) StartTaskRequestCallCount() int {
	fake.startTaskRequestMutex.RLock()
	defer fake.startTaskRequestMutex.RUnlock()
	return len(fake.startTaskRequestArgsForCall)
}

func (fake *FakeECSClient) StartTaskRequestCalls(stub func(*ecs.StartTaskInput) (*request.Request, *ecs.StartTaskOutput)) {
	fake.startTaskRequestMutex.Lock()
	defer fake.startTaskRequestMutex.Unlock()
	fake.StartTaskRequestStub = stub
}

func (fake *FakeECSClient) StartTaskRequestArgsForCall(i int) *ecs.StartTaskInput {
	fake.startTaskRequestMutex.RLock()
	defer fake.startTaskRequestMutex.RUnlock()
	argsForCall := fake.startTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) StartTaskRequestReturns(result1 *request.Request, result2 *ecs.StartTaskOutput) {
	fake.startTaskRequestMutex.Lock()
	defer fake.startTaskRequestMutex.Unlock()
	fake.StartTaskRequestStub = nil
	fake.startTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.StartTaskOutput
	}{result1, result2}
}

func (fake *FakeECSClient) StartTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.StartTaskOutput) {
	fake.startTaskRequestMutex.Lock()
	defer fake.startTaskRequestMutex.Unlock()
	fake.StartTaskRequestStub = nil
	if fake.startTaskRequestReturnsOnCall == nil {
		fake.startTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.StartTaskOutput
		})
	}
	fake.startTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.StartTaskOutput
	}{result1, result2}
}

func (fake *FakeECSClient) StartTaskWithContext(arg1 context.Context, arg2 *ecs.StartTaskInput, arg3 ...request.Option) (*ecs.StartTaskOutput, error) {
	fake.startTaskWithContextMutex.Lock()
	ret, specificReturn := fake.startTaskWithContextReturnsOnCall[len(fake.startTaskWithContextArgsForCall)]
	fake.startTaskWithContextArgsForCall = append(fake.startTaskWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.StartTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("StartTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.startTaskWithContextMutex.Unlock()
	if fake.StartTaskWithContextStub != nil {
		return fake.StartTaskWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.startTaskWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) StartTaskWithContextCallCount() int {
	fake.startTaskWithContextMutex.RLock()
	defer fake.startTaskWithContextMutex.RUnlock()
	return len(fake.startTaskWithContextArgsForCall)
}

func (fake *FakeECSClient) StartTaskWithContextCalls(stub func(context.Context, *ecs.StartTaskInput, ...request.Option) (*ecs.StartTaskOutput, error)) {
	fake.startTaskWithContextMutex.Lock()
	defer fake.startTaskWithContextMutex.Unlock()
	fake.StartTaskWithContextStub = stub
}

func (fake *FakeECSClient) StartTaskWithContextArgsForCall(i int) (context.Context, *ecs.StartTaskInput, []request.Option) {
	fake.startTaskWithContextMutex.RLock()
	defer fake.startTaskWithContextMutex.RUnlock()
	argsForCall := fake.startTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) StartTaskWithContextReturns(result1 *ecs.StartTaskOutput, result2 error) {
	fake.startTaskWithContextMutex.Lock()
	defer fake.startTaskWithContextMutex.Unlock()
	fake.StartTaskWithContextStub = nil
	fake.startTaskWithContextReturns = struct {
		result1 *ecs.StartTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) StartTaskWithContextReturnsOnCall(i int, result1 *ecs.StartTaskOutput, result2 error) {
	fake.startTaskWithContextMutex.Lock()
	defer fake.startTaskWithContextMutex.Unlock()
	fake.StartTaskWithContextStub = nil
	if fake.startTaskWithContextReturnsOnCall == nil {
		fake.startTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.StartTaskOutput
			result2 error
		})
	}
	fake.startTaskWithContextReturnsOnCall[i] = struct {
		result1 *ecs.StartTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) StopTask(arg1 *ecs.StopTaskInput) (*ecs.StopTaskOutput, error) {
	fake.stopTaskMutex.Lock()
	ret, specificReturn := fake.stopTaskReturnsOnCall[len(fake.stopTaskArgsForCall)]
	fake.stopTaskArgsForCall = append(fake.stopTaskArgsForCall, struct {
		arg1 *ecs.StopTaskInput
	}{arg1})
	fake.recordInvocation("StopTask", []interface{}{arg1})
	fake.stopTaskMutex.Unlock()
	if fake.StopTaskStub != nil {
		return fake.StopTaskStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stopTaskReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) StopTaskCallCount() int {
	fake.stopTaskMutex.RLock()
	defer fake.stopTaskMutex.RUnlock()
	return len(fake.stopTaskArgsForCall)
}

func (fake *FakeECSClient) StopTaskCalls(stub func(*ecs.StopTaskInput) (*ecs.StopTaskOutput, error)) {
	fake.stopTaskMutex.Lock()
	defer fake.stopTaskMutex.Unlock()
	fake.StopTaskStub = stub
}

func (fake *FakeECSClient) StopTaskArgsForCall(i int) *ecs.StopTaskInput {
	fake.stopTaskMutex.RLock()
	defer fake.stopTaskMutex.RUnlock()
	argsForCall := fake.stopTaskArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) StopTaskReturns(result1 *ecs.StopTaskOutput, result2 error) {
	fake.stopTaskMutex.Lock()
	defer fake.stopTaskMutex.Unlock()
	fake.StopTaskStub = nil
	fake.stopTaskReturns = struct {
		result1 *ecs.StopTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) StopTaskReturnsOnCall(i int, result1 *ecs.StopTaskOutput, result2 error) {
	fake.stopTaskMutex.Lock()
	defer fake.stopTaskMutex.Unlock()
	fake.StopTaskStub = nil
	if fake.stopTaskReturnsOnCall == nil {
		fake.stopTaskReturnsOnCall = make(map[int]struct {
			result1 *ecs.StopTaskOutput
			result2 error
		})
	}
	fake.stopTaskReturnsOnCall[i] = struct {
		result1 *ecs.StopTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) StopTaskRequest(arg1 *ecs.StopTaskInput) (*request.Request, *ecs.StopTaskOutput) {
	fake.stopTaskRequestMutex.Lock()
	ret, specificReturn := fake.stopTaskRequestReturnsOnCall[len(fake.stopTaskRequestArgsForCall)]
	fake.stopTaskRequestArgsForCall = append(fake.stopTaskRequestArgsForCall, struct {
		arg1 *ecs.StopTaskInput
	}{arg1})
	fake.recordInvocation("StopTaskRequest", []interface{}{arg1})
	fake.stopTaskRequestMutex.Unlock()
	if fake.StopTaskRequestStub != nil {
		return fake.StopTaskRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stopTaskRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) StopTaskRequestCallCount() int {
	fake.stopTaskRequestMutex.RLock()
	defer fake.stopTaskRequestMutex.RUnlock()
	return len(fake.stopTaskRequestArgsForCall)
}

func (fake *FakeECSClient) StopTaskRequestCalls(stub func(*ecs.StopTaskInput) (*request.Request, *ecs.StopTaskOutput)) {
	fake.stopTaskRequestMutex.Lock()
	defer fake.stopTaskRequestMutex.Unlock()
	fake.StopTaskRequestStub = stub
}

func (fake *FakeECSClient) StopTaskRequestArgsForCall(i int) *ecs.StopTaskInput {
	fake.stopTaskRequestMutex.RLock()
	defer fake.stopTaskRequestMutex.RUnlock()
	argsForCall := fake.stopTaskRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) StopTaskRequestReturns(result1 *request.Request, result2 *ecs.StopTaskOutput) {
	fake.stopTaskRequestMutex.Lock()
	defer fake.stopTaskRequestMutex.Unlock()
	fake.StopTaskRequestStub = nil
	fake.stopTaskRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.StopTaskOutput
	}{result1, result2}
}

func (fake *FakeECSClient) StopTaskRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.StopTaskOutput) {
	fake.stopTaskRequestMutex.Lock()
	defer fake.stopTaskRequestMutex.Unlock()
	fake.StopTaskRequestStub = nil
	if fake.stopTaskRequestReturnsOnCall == nil {
		fake.stopTaskRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.StopTaskOutput
		})
	}
	fake.stopTaskRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.StopTaskOutput
	}{result1, result2}
}

func (fake *FakeECSClient) StopTaskWithContext(arg1 context.Context, arg2 *ecs.StopTaskInput, arg3 ...request.Option) (*ecs.StopTaskOutput, error) {
	fake.stopTaskWithContextMutex.Lock()
	ret, specificReturn := fake.stopTaskWithContextReturnsOnCall[len(fake.stopTaskWithContextArgsForCall)]
	fake.stopTaskWithContextArgsForCall = append(fake.stopTaskWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.StopTaskInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("StopTaskWithContext", []interface{}{arg1, arg2, arg3})
	fake.stopTaskWithContextMutex.Unlock()
	if fake.StopTaskWithContextStub != nil {
		return fake.StopTaskWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.stopTaskWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) StopTaskWithContextCallCount() int {
	fake.stopTaskWithContextMutex.RLock()
	defer fake.stopTaskWithContextMutex.RUnlock()
	return len(fake.stopTaskWithContextArgsForCall)
}

func (fake *FakeECSClient) StopTaskWithContextCalls(stub func(context.Context, *ecs.StopTaskInput, ...request.Option) (*ecs.StopTaskOutput, error)) {
	fake.stopTaskWithContextMutex.Lock()
	defer fake.stopTaskWithContextMutex.Unlock()
	fake.StopTaskWithContextStub = stub
}

func (fake *FakeECSClient) StopTaskWithContextArgsForCall(i int) (context.Context, *ecs.StopTaskInput, []request.Option) {
	fake.stopTaskWithContextMutex.RLock()
	defer fake.stopTaskWithContextMutex.RUnlock()
	argsForCall := fake.stopTaskWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) StopTaskWithContextReturns(result1 *ecs.StopTaskOutput, result2 error) {
	fake.stopTaskWithContextMutex.Lock()
	defer fake.stopTaskWithContextMutex.Unlock()
	fake.StopTaskWithContextStub = nil
	fake.stopTaskWithContextReturns = struct {
		result1 *ecs.StopTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) StopTaskWithContextReturnsOnCall(i int, result1 *ecs.StopTaskOutput, result2 error) {
	fake.stopTaskWithContextMutex.Lock()
	defer fake.stopTaskWithContextMutex.Unlock()
	fake.StopTaskWithContextStub = nil
	if fake.stopTaskWithContextReturnsOnCall == nil {
		fake.stopTaskWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.StopTaskOutput
			result2 error
		})
	}
	fake.stopTaskWithContextReturnsOnCall[i] = struct {
		result1 *ecs.StopTaskOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitAttachmentStateChanges(arg1 *ecs.SubmitAttachmentStateChangesInput) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	fake.submitAttachmentStateChangesMutex.Lock()
	ret, specificReturn := fake.submitAttachmentStateChangesReturnsOnCall[len(fake.submitAttachmentStateChangesArgsForCall)]
	fake.submitAttachmentStateChangesArgsForCall = append(fake.submitAttachmentStateChangesArgsForCall, struct {
		arg1 *ecs.SubmitAttachmentStateChangesInput
	}{arg1})
	fake.recordInvocation("SubmitAttachmentStateChanges", []interface{}{arg1})
	fake.submitAttachmentStateChangesMutex.Unlock()
	if fake.SubmitAttachmentStateChangesStub != nil {
		return fake.SubmitAttachmentStateChangesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitAttachmentStateChangesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesCallCount() int {
	fake.submitAttachmentStateChangesMutex.RLock()
	defer fake.submitAttachmentStateChangesMutex.RUnlock()
	return len(fake.submitAttachmentStateChangesArgsForCall)
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesCalls(stub func(*ecs.SubmitAttachmentStateChangesInput) (*ecs.SubmitAttachmentStateChangesOutput, error)) {
	fake.submitAttachmentStateChangesMutex.Lock()
	defer fake.submitAttachmentStateChangesMutex.Unlock()
	fake.SubmitAttachmentStateChangesStub = stub
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesArgsForCall(i int) *ecs.SubmitAttachmentStateChangesInput {
	fake.submitAttachmentStateChangesMutex.RLock()
	defer fake.submitAttachmentStateChangesMutex.RUnlock()
	argsForCall := fake.submitAttachmentStateChangesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesReturns(result1 *ecs.SubmitAttachmentStateChangesOutput, result2 error) {
	fake.submitAttachmentStateChangesMutex.Lock()
	defer fake.submitAttachmentStateChangesMutex.Unlock()
	fake.SubmitAttachmentStateChangesStub = nil
	fake.submitAttachmentStateChangesReturns = struct {
		result1 *ecs.SubmitAttachmentStateChangesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesReturnsOnCall(i int, result1 *ecs.SubmitAttachmentStateChangesOutput, result2 error) {
	fake.submitAttachmentStateChangesMutex.Lock()
	defer fake.submitAttachmentStateChangesMutex.Unlock()
	fake.SubmitAttachmentStateChangesStub = nil
	if fake.submitAttachmentStateChangesReturnsOnCall == nil {
		fake.submitAttachmentStateChangesReturnsOnCall = make(map[int]struct {
			result1 *ecs.SubmitAttachmentStateChangesOutput
			result2 error
		})
	}
	fake.submitAttachmentStateChangesReturnsOnCall[i] = struct {
		result1 *ecs.SubmitAttachmentStateChangesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesRequest(arg1 *ecs.SubmitAttachmentStateChangesInput) (*request.Request, *ecs.SubmitAttachmentStateChangesOutput) {
	fake.submitAttachmentStateChangesRequestMutex.Lock()
	ret, specificReturn := fake.submitAttachmentStateChangesRequestReturnsOnCall[len(fake.submitAttachmentStateChangesRequestArgsForCall)]
	fake.submitAttachmentStateChangesRequestArgsForCall = append(fake.submitAttachmentStateChangesRequestArgsForCall, struct {
		arg1 *ecs.SubmitAttachmentStateChangesInput
	}{arg1})
	fake.recordInvocation("SubmitAttachmentStateChangesRequest", []interface{}{arg1})
	fake.submitAttachmentStateChangesRequestMutex.Unlock()
	if fake.SubmitAttachmentStateChangesRequestStub != nil {
		return fake.SubmitAttachmentStateChangesRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitAttachmentStateChangesRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesRequestCallCount() int {
	fake.submitAttachmentStateChangesRequestMutex.RLock()
	defer fake.submitAttachmentStateChangesRequestMutex.RUnlock()
	return len(fake.submitAttachmentStateChangesRequestArgsForCall)
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesRequestCalls(stub func(*ecs.SubmitAttachmentStateChangesInput) (*request.Request, *ecs.SubmitAttachmentStateChangesOutput)) {
	fake.submitAttachmentStateChangesRequestMutex.Lock()
	defer fake.submitAttachmentStateChangesRequestMutex.Unlock()
	fake.SubmitAttachmentStateChangesRequestStub = stub
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesRequestArgsForCall(i int) *ecs.SubmitAttachmentStateChangesInput {
	fake.submitAttachmentStateChangesRequestMutex.RLock()
	defer fake.submitAttachmentStateChangesRequestMutex.RUnlock()
	argsForCall := fake.submitAttachmentStateChangesRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesRequestReturns(result1 *request.Request, result2 *ecs.SubmitAttachmentStateChangesOutput) {
	fake.submitAttachmentStateChangesRequestMutex.Lock()
	defer fake.submitAttachmentStateChangesRequestMutex.Unlock()
	fake.SubmitAttachmentStateChangesRequestStub = nil
	fake.submitAttachmentStateChangesRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.SubmitAttachmentStateChangesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.SubmitAttachmentStateChangesOutput) {
	fake.submitAttachmentStateChangesRequestMutex.Lock()
	defer fake.submitAttachmentStateChangesRequestMutex.Unlock()
	fake.SubmitAttachmentStateChangesRequestStub = nil
	if fake.submitAttachmentStateChangesRequestReturnsOnCall == nil {
		fake.submitAttachmentStateChangesRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.SubmitAttachmentStateChangesOutput
		})
	}
	fake.submitAttachmentStateChangesRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.SubmitAttachmentStateChangesOutput
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesWithContext(arg1 context.Context, arg2 *ecs.SubmitAttachmentStateChangesInput, arg3 ...request.Option) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	fake.submitAttachmentStateChangesWithContextMutex.Lock()
	ret, specificReturn := fake.submitAttachmentStateChangesWithContextReturnsOnCall[len(fake.submitAttachmentStateChangesWithContextArgsForCall)]
	fake.submitAttachmentStateChangesWithContextArgsForCall = append(fake.submitAttachmentStateChangesWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.SubmitAttachmentStateChangesInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SubmitAttachmentStateChangesWithContext", []interface{}{arg1, arg2, arg3})
	fake.submitAttachmentStateChangesWithContextMutex.Unlock()
	if fake.SubmitAttachmentStateChangesWithContextStub != nil {
		return fake.SubmitAttachmentStateChangesWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitAttachmentStateChangesWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesWithContextCallCount() int {
	fake.submitAttachmentStateChangesWithContextMutex.RLock()
	defer fake.submitAttachmentStateChangesWithContextMutex.RUnlock()
	return len(fake.submitAttachmentStateChangesWithContextArgsForCall)
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesWithContextCalls(stub func(context.Context, *ecs.SubmitAttachmentStateChangesInput, ...request.Option) (*ecs.SubmitAttachmentStateChangesOutput, error)) {
	fake.submitAttachmentStateChangesWithContextMutex.Lock()
	defer fake.submitAttachmentStateChangesWithContextMutex.Unlock()
	fake.SubmitAttachmentStateChangesWithContextStub = stub
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesWithContextArgsForCall(i int) (context.Context, *ecs.SubmitAttachmentStateChangesInput, []request.Option) {
	fake.submitAttachmentStateChangesWithContextMutex.RLock()
	defer fake.submitAttachmentStateChangesWithContextMutex.RUnlock()
	argsForCall := fake.submitAttachmentStateChangesWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesWithContextReturns(result1 *ecs.SubmitAttachmentStateChangesOutput, result2 error) {
	fake.submitAttachmentStateChangesWithContextMutex.Lock()
	defer fake.submitAttachmentStateChangesWithContextMutex.Unlock()
	fake.SubmitAttachmentStateChangesWithContextStub = nil
	fake.submitAttachmentStateChangesWithContextReturns = struct {
		result1 *ecs.SubmitAttachmentStateChangesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitAttachmentStateChangesWithContextReturnsOnCall(i int, result1 *ecs.SubmitAttachmentStateChangesOutput, result2 error) {
	fake.submitAttachmentStateChangesWithContextMutex.Lock()
	defer fake.submitAttachmentStateChangesWithContextMutex.Unlock()
	fake.SubmitAttachmentStateChangesWithContextStub = nil
	if fake.submitAttachmentStateChangesWithContextReturnsOnCall == nil {
		fake.submitAttachmentStateChangesWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.SubmitAttachmentStateChangesOutput
			result2 error
		})
	}
	fake.submitAttachmentStateChangesWithContextReturnsOnCall[i] = struct {
		result1 *ecs.SubmitAttachmentStateChangesOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitContainerStateChange(arg1 *ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error) {
	fake.submitContainerStateChangeMutex.Lock()
	ret, specificReturn := fake.submitContainerStateChangeReturnsOnCall[len(fake.submitContainerStateChangeArgsForCall)]
	fake.submitContainerStateChangeArgsForCall = append(fake.submitContainerStateChangeArgsForCall, struct {
		arg1 *ecs.SubmitContainerStateChangeInput
	}{arg1})
	fake.recordInvocation("SubmitContainerStateChange", []interface{}{arg1})
	fake.submitContainerStateChangeMutex.Unlock()
	if fake.SubmitContainerStateChangeStub != nil {
		return fake.SubmitContainerStateChangeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitContainerStateChangeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitContainerStateChangeCallCount() int {
	fake.submitContainerStateChangeMutex.RLock()
	defer fake.submitContainerStateChangeMutex.RUnlock()
	return len(fake.submitContainerStateChangeArgsForCall)
}

func (fake *FakeECSClient) SubmitContainerStateChangeCalls(stub func(*ecs.SubmitContainerStateChangeInput) (*ecs.SubmitContainerStateChangeOutput, error)) {
	fake.submitContainerStateChangeMutex.Lock()
	defer fake.submitContainerStateChangeMutex.Unlock()
	fake.SubmitContainerStateChangeStub = stub
}

func (fake *FakeECSClient) SubmitContainerStateChangeArgsForCall(i int) *ecs.SubmitContainerStateChangeInput {
	fake.submitContainerStateChangeMutex.RLock()
	defer fake.submitContainerStateChangeMutex.RUnlock()
	argsForCall := fake.submitContainerStateChangeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) SubmitContainerStateChangeReturns(result1 *ecs.SubmitContainerStateChangeOutput, result2 error) {
	fake.submitContainerStateChangeMutex.Lock()
	defer fake.submitContainerStateChangeMutex.Unlock()
	fake.SubmitContainerStateChangeStub = nil
	fake.submitContainerStateChangeReturns = struct {
		result1 *ecs.SubmitContainerStateChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitContainerStateChangeReturnsOnCall(i int, result1 *ecs.SubmitContainerStateChangeOutput, result2 error) {
	fake.submitContainerStateChangeMutex.Lock()
	defer fake.submitContainerStateChangeMutex.Unlock()
	fake.SubmitContainerStateChangeStub = nil
	if fake.submitContainerStateChangeReturnsOnCall == nil {
		fake.submitContainerStateChangeReturnsOnCall = make(map[int]struct {
			result1 *ecs.SubmitContainerStateChangeOutput
			result2 error
		})
	}
	fake.submitContainerStateChangeReturnsOnCall[i] = struct {
		result1 *ecs.SubmitContainerStateChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitContainerStateChangeRequest(arg1 *ecs.SubmitContainerStateChangeInput) (*request.Request, *ecs.SubmitContainerStateChangeOutput) {
	fake.submitContainerStateChangeRequestMutex.Lock()
	ret, specificReturn := fake.submitContainerStateChangeRequestReturnsOnCall[len(fake.submitContainerStateChangeRequestArgsForCall)]
	fake.submitContainerStateChangeRequestArgsForCall = append(fake.submitContainerStateChangeRequestArgsForCall, struct {
		arg1 *ecs.SubmitContainerStateChangeInput
	}{arg1})
	fake.recordInvocation("SubmitContainerStateChangeRequest", []interface{}{arg1})
	fake.submitContainerStateChangeRequestMutex.Unlock()
	if fake.SubmitContainerStateChangeRequestStub != nil {
		return fake.SubmitContainerStateChangeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitContainerStateChangeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitContainerStateChangeRequestCallCount() int {
	fake.submitContainerStateChangeRequestMutex.RLock()
	defer fake.submitContainerStateChangeRequestMutex.RUnlock()
	return len(fake.submitContainerStateChangeRequestArgsForCall)
}

func (fake *FakeECSClient) SubmitContainerStateChangeRequestCalls(stub func(*ecs.SubmitContainerStateChangeInput) (*request.Request, *ecs.SubmitContainerStateChangeOutput)) {
	fake.submitContainerStateChangeRequestMutex.Lock()
	defer fake.submitContainerStateChangeRequestMutex.Unlock()
	fake.SubmitContainerStateChangeRequestStub = stub
}

func (fake *FakeECSClient) SubmitContainerStateChangeRequestArgsForCall(i int) *ecs.SubmitContainerStateChangeInput {
	fake.submitContainerStateChangeRequestMutex.RLock()
	defer fake.submitContainerStateChangeRequestMutex.RUnlock()
	argsForCall := fake.submitContainerStateChangeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) SubmitContainerStateChangeRequestReturns(result1 *request.Request, result2 *ecs.SubmitContainerStateChangeOutput) {
	fake.submitContainerStateChangeRequestMutex.Lock()
	defer fake.submitContainerStateChangeRequestMutex.Unlock()
	fake.SubmitContainerStateChangeRequestStub = nil
	fake.submitContainerStateChangeRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.SubmitContainerStateChangeOutput
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitContainerStateChangeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.SubmitContainerStateChangeOutput) {
	fake.submitContainerStateChangeRequestMutex.Lock()
	defer fake.submitContainerStateChangeRequestMutex.Unlock()
	fake.SubmitContainerStateChangeRequestStub = nil
	if fake.submitContainerStateChangeRequestReturnsOnCall == nil {
		fake.submitContainerStateChangeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.SubmitContainerStateChangeOutput
		})
	}
	fake.submitContainerStateChangeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.SubmitContainerStateChangeOutput
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitContainerStateChangeWithContext(arg1 context.Context, arg2 *ecs.SubmitContainerStateChangeInput, arg3 ...request.Option) (*ecs.SubmitContainerStateChangeOutput, error) {
	fake.submitContainerStateChangeWithContextMutex.Lock()
	ret, specificReturn := fake.submitContainerStateChangeWithContextReturnsOnCall[len(fake.submitContainerStateChangeWithContextArgsForCall)]
	fake.submitContainerStateChangeWithContextArgsForCall = append(fake.submitContainerStateChangeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.SubmitContainerStateChangeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SubmitContainerStateChangeWithContext", []interface{}{arg1, arg2, arg3})
	fake.submitContainerStateChangeWithContextMutex.Unlock()
	if fake.SubmitContainerStateChangeWithContextStub != nil {
		return fake.SubmitContainerStateChangeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitContainerStateChangeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitContainerStateChangeWithContextCallCount() int {
	fake.submitContainerStateChangeWithContextMutex.RLock()
	defer fake.submitContainerStateChangeWithContextMutex.RUnlock()
	return len(fake.submitContainerStateChangeWithContextArgsForCall)
}

func (fake *FakeECSClient) SubmitContainerStateChangeWithContextCalls(stub func(context.Context, *ecs.SubmitContainerStateChangeInput, ...request.Option) (*ecs.SubmitContainerStateChangeOutput, error)) {
	fake.submitContainerStateChangeWithContextMutex.Lock()
	defer fake.submitContainerStateChangeWithContextMutex.Unlock()
	fake.SubmitContainerStateChangeWithContextStub = stub
}

func (fake *FakeECSClient) SubmitContainerStateChangeWithContextArgsForCall(i int) (context.Context, *ecs.SubmitContainerStateChangeInput, []request.Option) {
	fake.submitContainerStateChangeWithContextMutex.RLock()
	defer fake.submitContainerStateChangeWithContextMutex.RUnlock()
	argsForCall := fake.submitContainerStateChangeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) SubmitContainerStateChangeWithContextReturns(result1 *ecs.SubmitContainerStateChangeOutput, result2 error) {
	fake.submitContainerStateChangeWithContextMutex.Lock()
	defer fake.submitContainerStateChangeWithContextMutex.Unlock()
	fake.SubmitContainerStateChangeWithContextStub = nil
	fake.submitContainerStateChangeWithContextReturns = struct {
		result1 *ecs.SubmitContainerStateChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitContainerStateChangeWithContextReturnsOnCall(i int, result1 *ecs.SubmitContainerStateChangeOutput, result2 error) {
	fake.submitContainerStateChangeWithContextMutex.Lock()
	defer fake.submitContainerStateChangeWithContextMutex.Unlock()
	fake.SubmitContainerStateChangeWithContextStub = nil
	if fake.submitContainerStateChangeWithContextReturnsOnCall == nil {
		fake.submitContainerStateChangeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.SubmitContainerStateChangeOutput
			result2 error
		})
	}
	fake.submitContainerStateChangeWithContextReturnsOnCall[i] = struct {
		result1 *ecs.SubmitContainerStateChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitTaskStateChange(arg1 *ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error) {
	fake.submitTaskStateChangeMutex.Lock()
	ret, specificReturn := fake.submitTaskStateChangeReturnsOnCall[len(fake.submitTaskStateChangeArgsForCall)]
	fake.submitTaskStateChangeArgsForCall = append(fake.submitTaskStateChangeArgsForCall, struct {
		arg1 *ecs.SubmitTaskStateChangeInput
	}{arg1})
	fake.recordInvocation("SubmitTaskStateChange", []interface{}{arg1})
	fake.submitTaskStateChangeMutex.Unlock()
	if fake.SubmitTaskStateChangeStub != nil {
		return fake.SubmitTaskStateChangeStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitTaskStateChangeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitTaskStateChangeCallCount() int {
	fake.submitTaskStateChangeMutex.RLock()
	defer fake.submitTaskStateChangeMutex.RUnlock()
	return len(fake.submitTaskStateChangeArgsForCall)
}

func (fake *FakeECSClient) SubmitTaskStateChangeCalls(stub func(*ecs.SubmitTaskStateChangeInput) (*ecs.SubmitTaskStateChangeOutput, error)) {
	fake.submitTaskStateChangeMutex.Lock()
	defer fake.submitTaskStateChangeMutex.Unlock()
	fake.SubmitTaskStateChangeStub = stub
}

func (fake *FakeECSClient) SubmitTaskStateChangeArgsForCall(i int) *ecs.SubmitTaskStateChangeInput {
	fake.submitTaskStateChangeMutex.RLock()
	defer fake.submitTaskStateChangeMutex.RUnlock()
	argsForCall := fake.submitTaskStateChangeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) SubmitTaskStateChangeReturns(result1 *ecs.SubmitTaskStateChangeOutput, result2 error) {
	fake.submitTaskStateChangeMutex.Lock()
	defer fake.submitTaskStateChangeMutex.Unlock()
	fake.SubmitTaskStateChangeStub = nil
	fake.submitTaskStateChangeReturns = struct {
		result1 *ecs.SubmitTaskStateChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitTaskStateChangeReturnsOnCall(i int, result1 *ecs.SubmitTaskStateChangeOutput, result2 error) {
	fake.submitTaskStateChangeMutex.Lock()
	defer fake.submitTaskStateChangeMutex.Unlock()
	fake.SubmitTaskStateChangeStub = nil
	if fake.submitTaskStateChangeReturnsOnCall == nil {
		fake.submitTaskStateChangeReturnsOnCall = make(map[int]struct {
			result1 *ecs.SubmitTaskStateChangeOutput
			result2 error
		})
	}
	fake.submitTaskStateChangeReturnsOnCall[i] = struct {
		result1 *ecs.SubmitTaskStateChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitTaskStateChangeRequest(arg1 *ecs.SubmitTaskStateChangeInput) (*request.Request, *ecs.SubmitTaskStateChangeOutput) {
	fake.submitTaskStateChangeRequestMutex.Lock()
	ret, specificReturn := fake.submitTaskStateChangeRequestReturnsOnCall[len(fake.submitTaskStateChangeRequestArgsForCall)]
	fake.submitTaskStateChangeRequestArgsForCall = append(fake.submitTaskStateChangeRequestArgsForCall, struct {
		arg1 *ecs.SubmitTaskStateChangeInput
	}{arg1})
	fake.recordInvocation("SubmitTaskStateChangeRequest", []interface{}{arg1})
	fake.submitTaskStateChangeRequestMutex.Unlock()
	if fake.SubmitTaskStateChangeRequestStub != nil {
		return fake.SubmitTaskStateChangeRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitTaskStateChangeRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitTaskStateChangeRequestCallCount() int {
	fake.submitTaskStateChangeRequestMutex.RLock()
	defer fake.submitTaskStateChangeRequestMutex.RUnlock()
	return len(fake.submitTaskStateChangeRequestArgsForCall)
}

func (fake *FakeECSClient) SubmitTaskStateChangeRequestCalls(stub func(*ecs.SubmitTaskStateChangeInput) (*request.Request, *ecs.SubmitTaskStateChangeOutput)) {
	fake.submitTaskStateChangeRequestMutex.Lock()
	defer fake.submitTaskStateChangeRequestMutex.Unlock()
	fake.SubmitTaskStateChangeRequestStub = stub
}

func (fake *FakeECSClient) SubmitTaskStateChangeRequestArgsForCall(i int) *ecs.SubmitTaskStateChangeInput {
	fake.submitTaskStateChangeRequestMutex.RLock()
	defer fake.submitTaskStateChangeRequestMutex.RUnlock()
	argsForCall := fake.submitTaskStateChangeRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) SubmitTaskStateChangeRequestReturns(result1 *request.Request, result2 *ecs.SubmitTaskStateChangeOutput) {
	fake.submitTaskStateChangeRequestMutex.Lock()
	defer fake.submitTaskStateChangeRequestMutex.Unlock()
	fake.SubmitTaskStateChangeRequestStub = nil
	fake.submitTaskStateChangeRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.SubmitTaskStateChangeOutput
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitTaskStateChangeRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.SubmitTaskStateChangeOutput) {
	fake.submitTaskStateChangeRequestMutex.Lock()
	defer fake.submitTaskStateChangeRequestMutex.Unlock()
	fake.SubmitTaskStateChangeRequestStub = nil
	if fake.submitTaskStateChangeRequestReturnsOnCall == nil {
		fake.submitTaskStateChangeRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.SubmitTaskStateChangeOutput
		})
	}
	fake.submitTaskStateChangeRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.SubmitTaskStateChangeOutput
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitTaskStateChangeWithContext(arg1 context.Context, arg2 *ecs.SubmitTaskStateChangeInput, arg3 ...request.Option) (*ecs.SubmitTaskStateChangeOutput, error) {
	fake.submitTaskStateChangeWithContextMutex.Lock()
	ret, specificReturn := fake.submitTaskStateChangeWithContextReturnsOnCall[len(fake.submitTaskStateChangeWithContextArgsForCall)]
	fake.submitTaskStateChangeWithContextArgsForCall = append(fake.submitTaskStateChangeWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.SubmitTaskStateChangeInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("SubmitTaskStateChangeWithContext", []interface{}{arg1, arg2, arg3})
	fake.submitTaskStateChangeWithContextMutex.Unlock()
	if fake.SubmitTaskStateChangeWithContextStub != nil {
		return fake.SubmitTaskStateChangeWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.submitTaskStateChangeWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) SubmitTaskStateChangeWithContextCallCount() int {
	fake.submitTaskStateChangeWithContextMutex.RLock()
	defer fake.submitTaskStateChangeWithContextMutex.RUnlock()
	return len(fake.submitTaskStateChangeWithContextArgsForCall)
}

func (fake *FakeECSClient) SubmitTaskStateChangeWithContextCalls(stub func(context.Context, *ecs.SubmitTaskStateChangeInput, ...request.Option) (*ecs.SubmitTaskStateChangeOutput, error)) {
	fake.submitTaskStateChangeWithContextMutex.Lock()
	defer fake.submitTaskStateChangeWithContextMutex.Unlock()
	fake.SubmitTaskStateChangeWithContextStub = stub
}

func (fake *FakeECSClient) SubmitTaskStateChangeWithContextArgsForCall(i int) (context.Context, *ecs.SubmitTaskStateChangeInput, []request.Option) {
	fake.submitTaskStateChangeWithContextMutex.RLock()
	defer fake.submitTaskStateChangeWithContextMutex.RUnlock()
	argsForCall := fake.submitTaskStateChangeWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) SubmitTaskStateChangeWithContextReturns(result1 *ecs.SubmitTaskStateChangeOutput, result2 error) {
	fake.submitTaskStateChangeWithContextMutex.Lock()
	defer fake.submitTaskStateChangeWithContextMutex.Unlock()
	fake.SubmitTaskStateChangeWithContextStub = nil
	fake.submitTaskStateChangeWithContextReturns = struct {
		result1 *ecs.SubmitTaskStateChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) SubmitTaskStateChangeWithContextReturnsOnCall(i int, result1 *ecs.SubmitTaskStateChangeOutput, result2 error) {
	fake.submitTaskStateChangeWithContextMutex.Lock()
	defer fake.submitTaskStateChangeWithContextMutex.Unlock()
	fake.SubmitTaskStateChangeWithContextStub = nil
	if fake.submitTaskStateChangeWithContextReturnsOnCall == nil {
		fake.submitTaskStateChangeWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.SubmitTaskStateChangeOutput
			result2 error
		})
	}
	fake.submitTaskStateChangeWithContextReturnsOnCall[i] = struct {
		result1 *ecs.SubmitTaskStateChangeOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) TagResource(arg1 *ecs.TagResourceInput) (*ecs.TagResourceOutput, error) {
	fake.tagResourceMutex.Lock()
	ret, specificReturn := fake.tagResourceReturnsOnCall[len(fake.tagResourceArgsForCall)]
	fake.tagResourceArgsForCall = append(fake.tagResourceArgsForCall, struct {
		arg1 *ecs.TagResourceInput
	}{arg1})
	fake.recordInvocation("TagResource", []interface{}{arg1})
	fake.tagResourceMutex.Unlock()
	if fake.TagResourceStub != nil {
		return fake.TagResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagResourceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) TagResourceCallCount() int {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	return len(fake.tagResourceArgsForCall)
}

func (fake *FakeECSClient) TagResourceCalls(stub func(*ecs.TagResourceInput) (*ecs.TagResourceOutput, error)) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = stub
}

func (fake *FakeECSClient) TagResourceArgsForCall(i int) *ecs.TagResourceInput {
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	argsForCall := fake.tagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) TagResourceReturns(result1 *ecs.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	fake.tagResourceReturns = struct {
		result1 *ecs.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) TagResourceReturnsOnCall(i int, result1 *ecs.TagResourceOutput, result2 error) {
	fake.tagResourceMutex.Lock()
	defer fake.tagResourceMutex.Unlock()
	fake.TagResourceStub = nil
	if fake.tagResourceReturnsOnCall == nil {
		fake.tagResourceReturnsOnCall = make(map[int]struct {
			result1 *ecs.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceReturnsOnCall[i] = struct {
		result1 *ecs.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) TagResourceRequest(arg1 *ecs.TagResourceInput) (*request.Request, *ecs.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	ret, specificReturn := fake.tagResourceRequestReturnsOnCall[len(fake.tagResourceRequestArgsForCall)]
	fake.tagResourceRequestArgsForCall = append(fake.tagResourceRequestArgsForCall, struct {
		arg1 *ecs.TagResourceInput
	}{arg1})
	fake.recordInvocation("TagResourceRequest", []interface{}{arg1})
	fake.tagResourceRequestMutex.Unlock()
	if fake.TagResourceRequestStub != nil {
		return fake.TagResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagResourceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) TagResourceRequestCallCount() int {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	return len(fake.tagResourceRequestArgsForCall)
}

func (fake *FakeECSClient) TagResourceRequestCalls(stub func(*ecs.TagResourceInput) (*request.Request, *ecs.TagResourceOutput)) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = stub
}

func (fake *FakeECSClient) TagResourceRequestArgsForCall(i int) *ecs.TagResourceInput {
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	argsForCall := fake.tagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) TagResourceRequestReturns(result1 *request.Request, result2 *ecs.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	fake.tagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) TagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.TagResourceOutput) {
	fake.tagResourceRequestMutex.Lock()
	defer fake.tagResourceRequestMutex.Unlock()
	fake.TagResourceRequestStub = nil
	if fake.tagResourceRequestReturnsOnCall == nil {
		fake.tagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.TagResourceOutput
		})
	}
	fake.tagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.TagResourceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) TagResourceWithContext(arg1 context.Context, arg2 *ecs.TagResourceInput, arg3 ...request.Option) (*ecs.TagResourceOutput, error) {
	fake.tagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.tagResourceWithContextReturnsOnCall[len(fake.tagResourceWithContextArgsForCall)]
	fake.tagResourceWithContextArgsForCall = append(fake.tagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.TagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("TagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.tagResourceWithContextMutex.Unlock()
	if fake.TagResourceWithContextStub != nil {
		return fake.TagResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.tagResourceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) TagResourceWithContextCallCount() int {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	return len(fake.tagResourceWithContextArgsForCall)
}

func (fake *FakeECSClient) TagResourceWithContextCalls(stub func(context.Context, *ecs.TagResourceInput, ...request.Option) (*ecs.TagResourceOutput, error)) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = stub
}

func (fake *FakeECSClient) TagResourceWithContextArgsForCall(i int) (context.Context, *ecs.TagResourceInput, []request.Option) {
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	argsForCall := fake.tagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) TagResourceWithContextReturns(result1 *ecs.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	fake.tagResourceWithContextReturns = struct {
		result1 *ecs.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) TagResourceWithContextReturnsOnCall(i int, result1 *ecs.TagResourceOutput, result2 error) {
	fake.tagResourceWithContextMutex.Lock()
	defer fake.tagResourceWithContextMutex.Unlock()
	fake.TagResourceWithContextStub = nil
	if fake.tagResourceWithContextReturnsOnCall == nil {
		fake.tagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.TagResourceOutput
			result2 error
		})
	}
	fake.tagResourceWithContextReturnsOnCall[i] = struct {
		result1 *ecs.TagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UntagResource(arg1 *ecs.UntagResourceInput) (*ecs.UntagResourceOutput, error) {
	fake.untagResourceMutex.Lock()
	ret, specificReturn := fake.untagResourceReturnsOnCall[len(fake.untagResourceArgsForCall)]
	fake.untagResourceArgsForCall = append(fake.untagResourceArgsForCall, struct {
		arg1 *ecs.UntagResourceInput
	}{arg1})
	fake.recordInvocation("UntagResource", []interface{}{arg1})
	fake.untagResourceMutex.Unlock()
	if fake.UntagResourceStub != nil {
		return fake.UntagResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagResourceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UntagResourceCallCount() int {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	return len(fake.untagResourceArgsForCall)
}

func (fake *FakeECSClient) UntagResourceCalls(stub func(*ecs.UntagResourceInput) (*ecs.UntagResourceOutput, error)) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = stub
}

func (fake *FakeECSClient) UntagResourceArgsForCall(i int) *ecs.UntagResourceInput {
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	argsForCall := fake.untagResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UntagResourceReturns(result1 *ecs.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	fake.untagResourceReturns = struct {
		result1 *ecs.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UntagResourceReturnsOnCall(i int, result1 *ecs.UntagResourceOutput, result2 error) {
	fake.untagResourceMutex.Lock()
	defer fake.untagResourceMutex.Unlock()
	fake.UntagResourceStub = nil
	if fake.untagResourceReturnsOnCall == nil {
		fake.untagResourceReturnsOnCall = make(map[int]struct {
			result1 *ecs.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceReturnsOnCall[i] = struct {
		result1 *ecs.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UntagResourceRequest(arg1 *ecs.UntagResourceInput) (*request.Request, *ecs.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	ret, specificReturn := fake.untagResourceRequestReturnsOnCall[len(fake.untagResourceRequestArgsForCall)]
	fake.untagResourceRequestArgsForCall = append(fake.untagResourceRequestArgsForCall, struct {
		arg1 *ecs.UntagResourceInput
	}{arg1})
	fake.recordInvocation("UntagResourceRequest", []interface{}{arg1})
	fake.untagResourceRequestMutex.Unlock()
	if fake.UntagResourceRequestStub != nil {
		return fake.UntagResourceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagResourceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UntagResourceRequestCallCount() int {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	return len(fake.untagResourceRequestArgsForCall)
}

func (fake *FakeECSClient) UntagResourceRequestCalls(stub func(*ecs.UntagResourceInput) (*request.Request, *ecs.UntagResourceOutput)) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = stub
}

func (fake *FakeECSClient) UntagResourceRequestArgsForCall(i int) *ecs.UntagResourceInput {
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	argsForCall := fake.untagResourceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UntagResourceRequestReturns(result1 *request.Request, result2 *ecs.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	fake.untagResourceRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UntagResourceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.UntagResourceOutput) {
	fake.untagResourceRequestMutex.Lock()
	defer fake.untagResourceRequestMutex.Unlock()
	fake.UntagResourceRequestStub = nil
	if fake.untagResourceRequestReturnsOnCall == nil {
		fake.untagResourceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.UntagResourceOutput
		})
	}
	fake.untagResourceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.UntagResourceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UntagResourceWithContext(arg1 context.Context, arg2 *ecs.UntagResourceInput, arg3 ...request.Option) (*ecs.UntagResourceOutput, error) {
	fake.untagResourceWithContextMutex.Lock()
	ret, specificReturn := fake.untagResourceWithContextReturnsOnCall[len(fake.untagResourceWithContextArgsForCall)]
	fake.untagResourceWithContextArgsForCall = append(fake.untagResourceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.UntagResourceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UntagResourceWithContext", []interface{}{arg1, arg2, arg3})
	fake.untagResourceWithContextMutex.Unlock()
	if fake.UntagResourceWithContextStub != nil {
		return fake.UntagResourceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.untagResourceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UntagResourceWithContextCallCount() int {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	return len(fake.untagResourceWithContextArgsForCall)
}

func (fake *FakeECSClient) UntagResourceWithContextCalls(stub func(context.Context, *ecs.UntagResourceInput, ...request.Option) (*ecs.UntagResourceOutput, error)) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = stub
}

func (fake *FakeECSClient) UntagResourceWithContextArgsForCall(i int) (context.Context, *ecs.UntagResourceInput, []request.Option) {
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	argsForCall := fake.untagResourceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) UntagResourceWithContextReturns(result1 *ecs.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	fake.untagResourceWithContextReturns = struct {
		result1 *ecs.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UntagResourceWithContextReturnsOnCall(i int, result1 *ecs.UntagResourceOutput, result2 error) {
	fake.untagResourceWithContextMutex.Lock()
	defer fake.untagResourceWithContextMutex.Unlock()
	fake.UntagResourceWithContextStub = nil
	if fake.untagResourceWithContextReturnsOnCall == nil {
		fake.untagResourceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.UntagResourceOutput
			result2 error
		})
	}
	fake.untagResourceWithContextReturnsOnCall[i] = struct {
		result1 *ecs.UntagResourceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateCapacityProvider(arg1 *ecs.UpdateCapacityProviderInput) (*ecs.UpdateCapacityProviderOutput, error) {
	fake.updateCapacityProviderMutex.Lock()
	ret, specificReturn := fake.updateCapacityProviderReturnsOnCall[len(fake.updateCapacityProviderArgsForCall)]
	fake.updateCapacityProviderArgsForCall = append(fake.updateCapacityProviderArgsForCall, struct {
		arg1 *ecs.UpdateCapacityProviderInput
	}{arg1})
	fake.recordInvocation("UpdateCapacityProvider", []interface{}{arg1})
	fake.updateCapacityProviderMutex.Unlock()
	if fake.UpdateCapacityProviderStub != nil {
		return fake.UpdateCapacityProviderStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateCapacityProviderReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateCapacityProviderCallCount() int {
	fake.updateCapacityProviderMutex.RLock()
	defer fake.updateCapacityProviderMutex.RUnlock()
	return len(fake.updateCapacityProviderArgsForCall)
}

func (fake *FakeECSClient) UpdateCapacityProviderCalls(stub func(*ecs.UpdateCapacityProviderInput) (*ecs.UpdateCapacityProviderOutput, error)) {
	fake.updateCapacityProviderMutex.Lock()
	defer fake.updateCapacityProviderMutex.Unlock()
	fake.UpdateCapacityProviderStub = stub
}

func (fake *FakeECSClient) UpdateCapacityProviderArgsForCall(i int) *ecs.UpdateCapacityProviderInput {
	fake.updateCapacityProviderMutex.RLock()
	defer fake.updateCapacityProviderMutex.RUnlock()
	argsForCall := fake.updateCapacityProviderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateCapacityProviderReturns(result1 *ecs.UpdateCapacityProviderOutput, result2 error) {
	fake.updateCapacityProviderMutex.Lock()
	defer fake.updateCapacityProviderMutex.Unlock()
	fake.UpdateCapacityProviderStub = nil
	fake.updateCapacityProviderReturns = struct {
		result1 *ecs.UpdateCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateCapacityProviderReturnsOnCall(i int, result1 *ecs.UpdateCapacityProviderOutput, result2 error) {
	fake.updateCapacityProviderMutex.Lock()
	defer fake.updateCapacityProviderMutex.Unlock()
	fake.UpdateCapacityProviderStub = nil
	if fake.updateCapacityProviderReturnsOnCall == nil {
		fake.updateCapacityProviderReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateCapacityProviderOutput
			result2 error
		})
	}
	fake.updateCapacityProviderReturnsOnCall[i] = struct {
		result1 *ecs.UpdateCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateCapacityProviderRequest(arg1 *ecs.UpdateCapacityProviderInput) (*request.Request, *ecs.UpdateCapacityProviderOutput) {
	fake.updateCapacityProviderRequestMutex.Lock()
	ret, specificReturn := fake.updateCapacityProviderRequestReturnsOnCall[len(fake.updateCapacityProviderRequestArgsForCall)]
	fake.updateCapacityProviderRequestArgsForCall = append(fake.updateCapacityProviderRequestArgsForCall, struct {
		arg1 *ecs.UpdateCapacityProviderInput
	}{arg1})
	fake.recordInvocation("UpdateCapacityProviderRequest", []interface{}{arg1})
	fake.updateCapacityProviderRequestMutex.Unlock()
	if fake.UpdateCapacityProviderRequestStub != nil {
		return fake.UpdateCapacityProviderRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateCapacityProviderRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateCapacityProviderRequestCallCount() int {
	fake.updateCapacityProviderRequestMutex.RLock()
	defer fake.updateCapacityProviderRequestMutex.RUnlock()
	return len(fake.updateCapacityProviderRequestArgsForCall)
}

func (fake *FakeECSClient) UpdateCapacityProviderRequestCalls(stub func(*ecs.UpdateCapacityProviderInput) (*request.Request, *ecs.UpdateCapacityProviderOutput)) {
	fake.updateCapacityProviderRequestMutex.Lock()
	defer fake.updateCapacityProviderRequestMutex.Unlock()
	fake.UpdateCapacityProviderRequestStub = stub
}

func (fake *FakeECSClient) UpdateCapacityProviderRequestArgsForCall(i int) *ecs.UpdateCapacityProviderInput {
	fake.updateCapacityProviderRequestMutex.RLock()
	defer fake.updateCapacityProviderRequestMutex.RUnlock()
	argsForCall := fake.updateCapacityProviderRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateCapacityProviderRequestReturns(result1 *request.Request, result2 *ecs.UpdateCapacityProviderOutput) {
	fake.updateCapacityProviderRequestMutex.Lock()
	defer fake.updateCapacityProviderRequestMutex.Unlock()
	fake.UpdateCapacityProviderRequestStub = nil
	fake.updateCapacityProviderRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.UpdateCapacityProviderOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateCapacityProviderRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.UpdateCapacityProviderOutput) {
	fake.updateCapacityProviderRequestMutex.Lock()
	defer fake.updateCapacityProviderRequestMutex.Unlock()
	fake.UpdateCapacityProviderRequestStub = nil
	if fake.updateCapacityProviderRequestReturnsOnCall == nil {
		fake.updateCapacityProviderRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.UpdateCapacityProviderOutput
		})
	}
	fake.updateCapacityProviderRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.UpdateCapacityProviderOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateCapacityProviderWithContext(arg1 context.Context, arg2 *ecs.UpdateCapacityProviderInput, arg3 ...request.Option) (*ecs.UpdateCapacityProviderOutput, error) {
	fake.updateCapacityProviderWithContextMutex.Lock()
	ret, specificReturn := fake.updateCapacityProviderWithContextReturnsOnCall[len(fake.updateCapacityProviderWithContextArgsForCall)]
	fake.updateCapacityProviderWithContextArgsForCall = append(fake.updateCapacityProviderWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.UpdateCapacityProviderInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateCapacityProviderWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateCapacityProviderWithContextMutex.Unlock()
	if fake.UpdateCapacityProviderWithContextStub != nil {
		return fake.UpdateCapacityProviderWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateCapacityProviderWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateCapacityProviderWithContextCallCount() int {
	fake.updateCapacityProviderWithContextMutex.RLock()
	defer fake.updateCapacityProviderWithContextMutex.RUnlock()
	return len(fake.updateCapacityProviderWithContextArgsForCall)
}

func (fake *FakeECSClient) UpdateCapacityProviderWithContextCalls(stub func(context.Context, *ecs.UpdateCapacityProviderInput, ...request.Option) (*ecs.UpdateCapacityProviderOutput, error)) {
	fake.updateCapacityProviderWithContextMutex.Lock()
	defer fake.updateCapacityProviderWithContextMutex.Unlock()
	fake.UpdateCapacityProviderWithContextStub = stub
}

func (fake *FakeECSClient) UpdateCapacityProviderWithContextArgsForCall(i int) (context.Context, *ecs.UpdateCapacityProviderInput, []request.Option) {
	fake.updateCapacityProviderWithContextMutex.RLock()
	defer fake.updateCapacityProviderWithContextMutex.RUnlock()
	argsForCall := fake.updateCapacityProviderWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) UpdateCapacityProviderWithContextReturns(result1 *ecs.UpdateCapacityProviderOutput, result2 error) {
	fake.updateCapacityProviderWithContextMutex.Lock()
	defer fake.updateCapacityProviderWithContextMutex.Unlock()
	fake.UpdateCapacityProviderWithContextStub = nil
	fake.updateCapacityProviderWithContextReturns = struct {
		result1 *ecs.UpdateCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateCapacityProviderWithContextReturnsOnCall(i int, result1 *ecs.UpdateCapacityProviderOutput, result2 error) {
	fake.updateCapacityProviderWithContextMutex.Lock()
	defer fake.updateCapacityProviderWithContextMutex.Unlock()
	fake.UpdateCapacityProviderWithContextStub = nil
	if fake.updateCapacityProviderWithContextReturnsOnCall == nil {
		fake.updateCapacityProviderWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateCapacityProviderOutput
			result2 error
		})
	}
	fake.updateCapacityProviderWithContextReturnsOnCall[i] = struct {
		result1 *ecs.UpdateCapacityProviderOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateClusterSettings(arg1 *ecs.UpdateClusterSettingsInput) (*ecs.UpdateClusterSettingsOutput, error) {
	fake.updateClusterSettingsMutex.Lock()
	ret, specificReturn := fake.updateClusterSettingsReturnsOnCall[len(fake.updateClusterSettingsArgsForCall)]
	fake.updateClusterSettingsArgsForCall = append(fake.updateClusterSettingsArgsForCall, struct {
		arg1 *ecs.UpdateClusterSettingsInput
	}{arg1})
	fake.recordInvocation("UpdateClusterSettings", []interface{}{arg1})
	fake.updateClusterSettingsMutex.Unlock()
	if fake.UpdateClusterSettingsStub != nil {
		return fake.UpdateClusterSettingsStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateClusterSettingsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateClusterSettingsCallCount() int {
	fake.updateClusterSettingsMutex.RLock()
	defer fake.updateClusterSettingsMutex.RUnlock()
	return len(fake.updateClusterSettingsArgsForCall)
}

func (fake *FakeECSClient) UpdateClusterSettingsCalls(stub func(*ecs.UpdateClusterSettingsInput) (*ecs.UpdateClusterSettingsOutput, error)) {
	fake.updateClusterSettingsMutex.Lock()
	defer fake.updateClusterSettingsMutex.Unlock()
	fake.UpdateClusterSettingsStub = stub
}

func (fake *FakeECSClient) UpdateClusterSettingsArgsForCall(i int) *ecs.UpdateClusterSettingsInput {
	fake.updateClusterSettingsMutex.RLock()
	defer fake.updateClusterSettingsMutex.RUnlock()
	argsForCall := fake.updateClusterSettingsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateClusterSettingsReturns(result1 *ecs.UpdateClusterSettingsOutput, result2 error) {
	fake.updateClusterSettingsMutex.Lock()
	defer fake.updateClusterSettingsMutex.Unlock()
	fake.UpdateClusterSettingsStub = nil
	fake.updateClusterSettingsReturns = struct {
		result1 *ecs.UpdateClusterSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateClusterSettingsReturnsOnCall(i int, result1 *ecs.UpdateClusterSettingsOutput, result2 error) {
	fake.updateClusterSettingsMutex.Lock()
	defer fake.updateClusterSettingsMutex.Unlock()
	fake.UpdateClusterSettingsStub = nil
	if fake.updateClusterSettingsReturnsOnCall == nil {
		fake.updateClusterSettingsReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateClusterSettingsOutput
			result2 error
		})
	}
	fake.updateClusterSettingsReturnsOnCall[i] = struct {
		result1 *ecs.UpdateClusterSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateClusterSettingsRequest(arg1 *ecs.UpdateClusterSettingsInput) (*request.Request, *ecs.UpdateClusterSettingsOutput) {
	fake.updateClusterSettingsRequestMutex.Lock()
	ret, specificReturn := fake.updateClusterSettingsRequestReturnsOnCall[len(fake.updateClusterSettingsRequestArgsForCall)]
	fake.updateClusterSettingsRequestArgsForCall = append(fake.updateClusterSettingsRequestArgsForCall, struct {
		arg1 *ecs.UpdateClusterSettingsInput
	}{arg1})
	fake.recordInvocation("UpdateClusterSettingsRequest", []interface{}{arg1})
	fake.updateClusterSettingsRequestMutex.Unlock()
	if fake.UpdateClusterSettingsRequestStub != nil {
		return fake.UpdateClusterSettingsRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateClusterSettingsRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateClusterSettingsRequestCallCount() int {
	fake.updateClusterSettingsRequestMutex.RLock()
	defer fake.updateClusterSettingsRequestMutex.RUnlock()
	return len(fake.updateClusterSettingsRequestArgsForCall)
}

func (fake *FakeECSClient) UpdateClusterSettingsRequestCalls(stub func(*ecs.UpdateClusterSettingsInput) (*request.Request, *ecs.UpdateClusterSettingsOutput)) {
	fake.updateClusterSettingsRequestMutex.Lock()
	defer fake.updateClusterSettingsRequestMutex.Unlock()
	fake.UpdateClusterSettingsRequestStub = stub
}

func (fake *FakeECSClient) UpdateClusterSettingsRequestArgsForCall(i int) *ecs.UpdateClusterSettingsInput {
	fake.updateClusterSettingsRequestMutex.RLock()
	defer fake.updateClusterSettingsRequestMutex.RUnlock()
	argsForCall := fake.updateClusterSettingsRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateClusterSettingsRequestReturns(result1 *request.Request, result2 *ecs.UpdateClusterSettingsOutput) {
	fake.updateClusterSettingsRequestMutex.Lock()
	defer fake.updateClusterSettingsRequestMutex.Unlock()
	fake.UpdateClusterSettingsRequestStub = nil
	fake.updateClusterSettingsRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.UpdateClusterSettingsOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateClusterSettingsRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.UpdateClusterSettingsOutput) {
	fake.updateClusterSettingsRequestMutex.Lock()
	defer fake.updateClusterSettingsRequestMutex.Unlock()
	fake.UpdateClusterSettingsRequestStub = nil
	if fake.updateClusterSettingsRequestReturnsOnCall == nil {
		fake.updateClusterSettingsRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.UpdateClusterSettingsOutput
		})
	}
	fake.updateClusterSettingsRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.UpdateClusterSettingsOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateClusterSettingsWithContext(arg1 context.Context, arg2 *ecs.UpdateClusterSettingsInput, arg3 ...request.Option) (*ecs.UpdateClusterSettingsOutput, error) {
	fake.updateClusterSettingsWithContextMutex.Lock()
	ret, specificReturn := fake.updateClusterSettingsWithContextReturnsOnCall[len(fake.updateClusterSettingsWithContextArgsForCall)]
	fake.updateClusterSettingsWithContextArgsForCall = append(fake.updateClusterSettingsWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.UpdateClusterSettingsInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateClusterSettingsWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateClusterSettingsWithContextMutex.Unlock()
	if fake.UpdateClusterSettingsWithContextStub != nil {
		return fake.UpdateClusterSettingsWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateClusterSettingsWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateClusterSettingsWithContextCallCount() int {
	fake.updateClusterSettingsWithContextMutex.RLock()
	defer fake.updateClusterSettingsWithContextMutex.RUnlock()
	return len(fake.updateClusterSettingsWithContextArgsForCall)
}

func (fake *FakeECSClient) UpdateClusterSettingsWithContextCalls(stub func(context.Context, *ecs.UpdateClusterSettingsInput, ...request.Option) (*ecs.UpdateClusterSettingsOutput, error)) {
	fake.updateClusterSettingsWithContextMutex.Lock()
	defer fake.updateClusterSettingsWithContextMutex.Unlock()
	fake.UpdateClusterSettingsWithContextStub = stub
}

func (fake *FakeECSClient) UpdateClusterSettingsWithContextArgsForCall(i int) (context.Context, *ecs.UpdateClusterSettingsInput, []request.Option) {
	fake.updateClusterSettingsWithContextMutex.RLock()
	defer fake.updateClusterSettingsWithContextMutex.RUnlock()
	argsForCall := fake.updateClusterSettingsWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) UpdateClusterSettingsWithContextReturns(result1 *ecs.UpdateClusterSettingsOutput, result2 error) {
	fake.updateClusterSettingsWithContextMutex.Lock()
	defer fake.updateClusterSettingsWithContextMutex.Unlock()
	fake.UpdateClusterSettingsWithContextStub = nil
	fake.updateClusterSettingsWithContextReturns = struct {
		result1 *ecs.UpdateClusterSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateClusterSettingsWithContextReturnsOnCall(i int, result1 *ecs.UpdateClusterSettingsOutput, result2 error) {
	fake.updateClusterSettingsWithContextMutex.Lock()
	defer fake.updateClusterSettingsWithContextMutex.Unlock()
	fake.UpdateClusterSettingsWithContextStub = nil
	if fake.updateClusterSettingsWithContextReturnsOnCall == nil {
		fake.updateClusterSettingsWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateClusterSettingsOutput
			result2 error
		})
	}
	fake.updateClusterSettingsWithContextReturnsOnCall[i] = struct {
		result1 *ecs.UpdateClusterSettingsOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerAgent(arg1 *ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error) {
	fake.updateContainerAgentMutex.Lock()
	ret, specificReturn := fake.updateContainerAgentReturnsOnCall[len(fake.updateContainerAgentArgsForCall)]
	fake.updateContainerAgentArgsForCall = append(fake.updateContainerAgentArgsForCall, struct {
		arg1 *ecs.UpdateContainerAgentInput
	}{arg1})
	fake.recordInvocation("UpdateContainerAgent", []interface{}{arg1})
	fake.updateContainerAgentMutex.Unlock()
	if fake.UpdateContainerAgentStub != nil {
		return fake.UpdateContainerAgentStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateContainerAgentReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateContainerAgentCallCount() int {
	fake.updateContainerAgentMutex.RLock()
	defer fake.updateContainerAgentMutex.RUnlock()
	return len(fake.updateContainerAgentArgsForCall)
}

func (fake *FakeECSClient) UpdateContainerAgentCalls(stub func(*ecs.UpdateContainerAgentInput) (*ecs.UpdateContainerAgentOutput, error)) {
	fake.updateContainerAgentMutex.Lock()
	defer fake.updateContainerAgentMutex.Unlock()
	fake.UpdateContainerAgentStub = stub
}

func (fake *FakeECSClient) UpdateContainerAgentArgsForCall(i int) *ecs.UpdateContainerAgentInput {
	fake.updateContainerAgentMutex.RLock()
	defer fake.updateContainerAgentMutex.RUnlock()
	argsForCall := fake.updateContainerAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateContainerAgentReturns(result1 *ecs.UpdateContainerAgentOutput, result2 error) {
	fake.updateContainerAgentMutex.Lock()
	defer fake.updateContainerAgentMutex.Unlock()
	fake.UpdateContainerAgentStub = nil
	fake.updateContainerAgentReturns = struct {
		result1 *ecs.UpdateContainerAgentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerAgentReturnsOnCall(i int, result1 *ecs.UpdateContainerAgentOutput, result2 error) {
	fake.updateContainerAgentMutex.Lock()
	defer fake.updateContainerAgentMutex.Unlock()
	fake.UpdateContainerAgentStub = nil
	if fake.updateContainerAgentReturnsOnCall == nil {
		fake.updateContainerAgentReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateContainerAgentOutput
			result2 error
		})
	}
	fake.updateContainerAgentReturnsOnCall[i] = struct {
		result1 *ecs.UpdateContainerAgentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerAgentRequest(arg1 *ecs.UpdateContainerAgentInput) (*request.Request, *ecs.UpdateContainerAgentOutput) {
	fake.updateContainerAgentRequestMutex.Lock()
	ret, specificReturn := fake.updateContainerAgentRequestReturnsOnCall[len(fake.updateContainerAgentRequestArgsForCall)]
	fake.updateContainerAgentRequestArgsForCall = append(fake.updateContainerAgentRequestArgsForCall, struct {
		arg1 *ecs.UpdateContainerAgentInput
	}{arg1})
	fake.recordInvocation("UpdateContainerAgentRequest", []interface{}{arg1})
	fake.updateContainerAgentRequestMutex.Unlock()
	if fake.UpdateContainerAgentRequestStub != nil {
		return fake.UpdateContainerAgentRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateContainerAgentRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateContainerAgentRequestCallCount() int {
	fake.updateContainerAgentRequestMutex.RLock()
	defer fake.updateContainerAgentRequestMutex.RUnlock()
	return len(fake.updateContainerAgentRequestArgsForCall)
}

func (fake *FakeECSClient) UpdateContainerAgentRequestCalls(stub func(*ecs.UpdateContainerAgentInput) (*request.Request, *ecs.UpdateContainerAgentOutput)) {
	fake.updateContainerAgentRequestMutex.Lock()
	defer fake.updateContainerAgentRequestMutex.Unlock()
	fake.UpdateContainerAgentRequestStub = stub
}

func (fake *FakeECSClient) UpdateContainerAgentRequestArgsForCall(i int) *ecs.UpdateContainerAgentInput {
	fake.updateContainerAgentRequestMutex.RLock()
	defer fake.updateContainerAgentRequestMutex.RUnlock()
	argsForCall := fake.updateContainerAgentRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateContainerAgentRequestReturns(result1 *request.Request, result2 *ecs.UpdateContainerAgentOutput) {
	fake.updateContainerAgentRequestMutex.Lock()
	defer fake.updateContainerAgentRequestMutex.Unlock()
	fake.UpdateContainerAgentRequestStub = nil
	fake.updateContainerAgentRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.UpdateContainerAgentOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerAgentRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.UpdateContainerAgentOutput) {
	fake.updateContainerAgentRequestMutex.Lock()
	defer fake.updateContainerAgentRequestMutex.Unlock()
	fake.UpdateContainerAgentRequestStub = nil
	if fake.updateContainerAgentRequestReturnsOnCall == nil {
		fake.updateContainerAgentRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.UpdateContainerAgentOutput
		})
	}
	fake.updateContainerAgentRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.UpdateContainerAgentOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerAgentWithContext(arg1 context.Context, arg2 *ecs.UpdateContainerAgentInput, arg3 ...request.Option) (*ecs.UpdateContainerAgentOutput, error) {
	fake.updateContainerAgentWithContextMutex.Lock()
	ret, specificReturn := fake.updateContainerAgentWithContextReturnsOnCall[len(fake.updateContainerAgentWithContextArgsForCall)]
	fake.updateContainerAgentWithContextArgsForCall = append(fake.updateContainerAgentWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.UpdateContainerAgentInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateContainerAgentWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateContainerAgentWithContextMutex.Unlock()
	if fake.UpdateContainerAgentWithContextStub != nil {
		return fake.UpdateContainerAgentWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateContainerAgentWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateContainerAgentWithContextCallCount() int {
	fake.updateContainerAgentWithContextMutex.RLock()
	defer fake.updateContainerAgentWithContextMutex.RUnlock()
	return len(fake.updateContainerAgentWithContextArgsForCall)
}

func (fake *FakeECSClient) UpdateContainerAgentWithContextCalls(stub func(context.Context, *ecs.UpdateContainerAgentInput, ...request.Option) (*ecs.UpdateContainerAgentOutput, error)) {
	fake.updateContainerAgentWithContextMutex.Lock()
	defer fake.updateContainerAgentWithContextMutex.Unlock()
	fake.UpdateContainerAgentWithContextStub = stub
}

func (fake *FakeECSClient) UpdateContainerAgentWithContextArgsForCall(i int) (context.Context, *ecs.UpdateContainerAgentInput, []request.Option) {
	fake.updateContainerAgentWithContextMutex.RLock()
	defer fake.updateContainerAgentWithContextMutex.RUnlock()
	argsForCall := fake.updateContainerAgentWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) UpdateContainerAgentWithContextReturns(result1 *ecs.UpdateContainerAgentOutput, result2 error) {
	fake.updateContainerAgentWithContextMutex.Lock()
	defer fake.updateContainerAgentWithContextMutex.Unlock()
	fake.UpdateContainerAgentWithContextStub = nil
	fake.updateContainerAgentWithContextReturns = struct {
		result1 *ecs.UpdateContainerAgentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerAgentWithContextReturnsOnCall(i int, result1 *ecs.UpdateContainerAgentOutput, result2 error) {
	fake.updateContainerAgentWithContextMutex.Lock()
	defer fake.updateContainerAgentWithContextMutex.Unlock()
	fake.UpdateContainerAgentWithContextStub = nil
	if fake.updateContainerAgentWithContextReturnsOnCall == nil {
		fake.updateContainerAgentWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateContainerAgentOutput
			result2 error
		})
	}
	fake.updateContainerAgentWithContextReturnsOnCall[i] = struct {
		result1 *ecs.UpdateContainerAgentOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerInstancesState(arg1 *ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error) {
	fake.updateContainerInstancesStateMutex.Lock()
	ret, specificReturn := fake.updateContainerInstancesStateReturnsOnCall[len(fake.updateContainerInstancesStateArgsForCall)]
	fake.updateContainerInstancesStateArgsForCall = append(fake.updateContainerInstancesStateArgsForCall, struct {
		arg1 *ecs.UpdateContainerInstancesStateInput
	}{arg1})
	fake.recordInvocation("UpdateContainerInstancesState", []interface{}{arg1})
	fake.updateContainerInstancesStateMutex.Unlock()
	if fake.UpdateContainerInstancesStateStub != nil {
		return fake.UpdateContainerInstancesStateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateContainerInstancesStateReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateContainerInstancesStateCallCount() int {
	fake.updateContainerInstancesStateMutex.RLock()
	defer fake.updateContainerInstancesStateMutex.RUnlock()
	return len(fake.updateContainerInstancesStateArgsForCall)
}

func (fake *FakeECSClient) UpdateContainerInstancesStateCalls(stub func(*ecs.UpdateContainerInstancesStateInput) (*ecs.UpdateContainerInstancesStateOutput, error)) {
	fake.updateContainerInstancesStateMutex.Lock()
	defer fake.updateContainerInstancesStateMutex.Unlock()
	fake.UpdateContainerInstancesStateStub = stub
}

func (fake *FakeECSClient) UpdateContainerInstancesStateArgsForCall(i int) *ecs.UpdateContainerInstancesStateInput {
	fake.updateContainerInstancesStateMutex.RLock()
	defer fake.updateContainerInstancesStateMutex.RUnlock()
	argsForCall := fake.updateContainerInstancesStateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateContainerInstancesStateReturns(result1 *ecs.UpdateContainerInstancesStateOutput, result2 error) {
	fake.updateContainerInstancesStateMutex.Lock()
	defer fake.updateContainerInstancesStateMutex.Unlock()
	fake.UpdateContainerInstancesStateStub = nil
	fake.updateContainerInstancesStateReturns = struct {
		result1 *ecs.UpdateContainerInstancesStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerInstancesStateReturnsOnCall(i int, result1 *ecs.UpdateContainerInstancesStateOutput, result2 error) {
	fake.updateContainerInstancesStateMutex.Lock()
	defer fake.updateContainerInstancesStateMutex.Unlock()
	fake.UpdateContainerInstancesStateStub = nil
	if fake.updateContainerInstancesStateReturnsOnCall == nil {
		fake.updateContainerInstancesStateReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateContainerInstancesStateOutput
			result2 error
		})
	}
	fake.updateContainerInstancesStateReturnsOnCall[i] = struct {
		result1 *ecs.UpdateContainerInstancesStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerInstancesStateRequest(arg1 *ecs.UpdateContainerInstancesStateInput) (*request.Request, *ecs.UpdateContainerInstancesStateOutput) {
	fake.updateContainerInstancesStateRequestMutex.Lock()
	ret, specificReturn := fake.updateContainerInstancesStateRequestReturnsOnCall[len(fake.updateContainerInstancesStateRequestArgsForCall)]
	fake.updateContainerInstancesStateRequestArgsForCall = append(fake.updateContainerInstancesStateRequestArgsForCall, struct {
		arg1 *ecs.UpdateContainerInstancesStateInput
	}{arg1})
	fake.recordInvocation("UpdateContainerInstancesStateRequest", []interface{}{arg1})
	fake.updateContainerInstancesStateRequestMutex.Unlock()
	if fake.UpdateContainerInstancesStateRequestStub != nil {
		return fake.UpdateContainerInstancesStateRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateContainerInstancesStateRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateContainerInstancesStateRequestCallCount() int {
	fake.updateContainerInstancesStateRequestMutex.RLock()
	defer fake.updateContainerInstancesStateRequestMutex.RUnlock()
	return len(fake.updateContainerInstancesStateRequestArgsForCall)
}

func (fake *FakeECSClient) UpdateContainerInstancesStateRequestCalls(stub func(*ecs.UpdateContainerInstancesStateInput) (*request.Request, *ecs.UpdateContainerInstancesStateOutput)) {
	fake.updateContainerInstancesStateRequestMutex.Lock()
	defer fake.updateContainerInstancesStateRequestMutex.Unlock()
	fake.UpdateContainerInstancesStateRequestStub = stub
}

func (fake *FakeECSClient) UpdateContainerInstancesStateRequestArgsForCall(i int) *ecs.UpdateContainerInstancesStateInput {
	fake.updateContainerInstancesStateRequestMutex.RLock()
	defer fake.updateContainerInstancesStateRequestMutex.RUnlock()
	argsForCall := fake.updateContainerInstancesStateRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateContainerInstancesStateRequestReturns(result1 *request.Request, result2 *ecs.UpdateContainerInstancesStateOutput) {
	fake.updateContainerInstancesStateRequestMutex.Lock()
	defer fake.updateContainerInstancesStateRequestMutex.Unlock()
	fake.UpdateContainerInstancesStateRequestStub = nil
	fake.updateContainerInstancesStateRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.UpdateContainerInstancesStateOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerInstancesStateRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.UpdateContainerInstancesStateOutput) {
	fake.updateContainerInstancesStateRequestMutex.Lock()
	defer fake.updateContainerInstancesStateRequestMutex.Unlock()
	fake.UpdateContainerInstancesStateRequestStub = nil
	if fake.updateContainerInstancesStateRequestReturnsOnCall == nil {
		fake.updateContainerInstancesStateRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.UpdateContainerInstancesStateOutput
		})
	}
	fake.updateContainerInstancesStateRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.UpdateContainerInstancesStateOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerInstancesStateWithContext(arg1 context.Context, arg2 *ecs.UpdateContainerInstancesStateInput, arg3 ...request.Option) (*ecs.UpdateContainerInstancesStateOutput, error) {
	fake.updateContainerInstancesStateWithContextMutex.Lock()
	ret, specificReturn := fake.updateContainerInstancesStateWithContextReturnsOnCall[len(fake.updateContainerInstancesStateWithContextArgsForCall)]
	fake.updateContainerInstancesStateWithContextArgsForCall = append(fake.updateContainerInstancesStateWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.UpdateContainerInstancesStateInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateContainerInstancesStateWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateContainerInstancesStateWithContextMutex.Unlock()
	if fake.UpdateContainerInstancesStateWithContextStub != nil {
		return fake.UpdateContainerInstancesStateWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateContainerInstancesStateWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateContainerInstancesStateWithContextCallCount() int {
	fake.updateContainerInstancesStateWithContextMutex.RLock()
	defer fake.updateContainerInstancesStateWithContextMutex.RUnlock()
	return len(fake.updateContainerInstancesStateWithContextArgsForCall)
}

func (fake *FakeECSClient) UpdateContainerInstancesStateWithContextCalls(stub func(context.Context, *ecs.UpdateContainerInstancesStateInput, ...request.Option) (*ecs.UpdateContainerInstancesStateOutput, error)) {
	fake.updateContainerInstancesStateWithContextMutex.Lock()
	defer fake.updateContainerInstancesStateWithContextMutex.Unlock()
	fake.UpdateContainerInstancesStateWithContextStub = stub
}

func (fake *FakeECSClient) UpdateContainerInstancesStateWithContextArgsForCall(i int) (context.Context, *ecs.UpdateContainerInstancesStateInput, []request.Option) {
	fake.updateContainerInstancesStateWithContextMutex.RLock()
	defer fake.updateContainerInstancesStateWithContextMutex.RUnlock()
	argsForCall := fake.updateContainerInstancesStateWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) UpdateContainerInstancesStateWithContextReturns(result1 *ecs.UpdateContainerInstancesStateOutput, result2 error) {
	fake.updateContainerInstancesStateWithContextMutex.Lock()
	defer fake.updateContainerInstancesStateWithContextMutex.Unlock()
	fake.UpdateContainerInstancesStateWithContextStub = nil
	fake.updateContainerInstancesStateWithContextReturns = struct {
		result1 *ecs.UpdateContainerInstancesStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateContainerInstancesStateWithContextReturnsOnCall(i int, result1 *ecs.UpdateContainerInstancesStateOutput, result2 error) {
	fake.updateContainerInstancesStateWithContextMutex.Lock()
	defer fake.updateContainerInstancesStateWithContextMutex.Unlock()
	fake.UpdateContainerInstancesStateWithContextStub = nil
	if fake.updateContainerInstancesStateWithContextReturnsOnCall == nil {
		fake.updateContainerInstancesStateWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateContainerInstancesStateOutput
			result2 error
		})
	}
	fake.updateContainerInstancesStateWithContextReturnsOnCall[i] = struct {
		result1 *ecs.UpdateContainerInstancesStateOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateService(arg1 *ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error) {
	fake.updateServiceMutex.Lock()
	ret, specificReturn := fake.updateServiceReturnsOnCall[len(fake.updateServiceArgsForCall)]
	fake.updateServiceArgsForCall = append(fake.updateServiceArgsForCall, struct {
		arg1 *ecs.UpdateServiceInput
	}{arg1})
	fake.recordInvocation("UpdateService", []interface{}{arg1})
	fake.updateServiceMutex.Unlock()
	if fake.UpdateServiceStub != nil {
		return fake.UpdateServiceStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateServiceCallCount() int {
	fake.updateServiceMutex.RLock()
	defer fake.updateServiceMutex.RUnlock()
	return len(fake.updateServiceArgsForCall)
}

func (fake *FakeECSClient) UpdateServiceCalls(stub func(*ecs.UpdateServiceInput) (*ecs.UpdateServiceOutput, error)) {
	fake.updateServiceMutex.Lock()
	defer fake.updateServiceMutex.Unlock()
	fake.UpdateServiceStub = stub
}

func (fake *FakeECSClient) UpdateServiceArgsForCall(i int) *ecs.UpdateServiceInput {
	fake.updateServiceMutex.RLock()
	defer fake.updateServiceMutex.RUnlock()
	argsForCall := fake.updateServiceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateServiceReturns(result1 *ecs.UpdateServiceOutput, result2 error) {
	fake.updateServiceMutex.Lock()
	defer fake.updateServiceMutex.Unlock()
	fake.UpdateServiceStub = nil
	fake.updateServiceReturns = struct {
		result1 *ecs.UpdateServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServiceReturnsOnCall(i int, result1 *ecs.UpdateServiceOutput, result2 error) {
	fake.updateServiceMutex.Lock()
	defer fake.updateServiceMutex.Unlock()
	fake.UpdateServiceStub = nil
	if fake.updateServiceReturnsOnCall == nil {
		fake.updateServiceReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateServiceOutput
			result2 error
		})
	}
	fake.updateServiceReturnsOnCall[i] = struct {
		result1 *ecs.UpdateServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSet(arg1 *ecs.UpdateServicePrimaryTaskSetInput) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	fake.updateServicePrimaryTaskSetMutex.Lock()
	ret, specificReturn := fake.updateServicePrimaryTaskSetReturnsOnCall[len(fake.updateServicePrimaryTaskSetArgsForCall)]
	fake.updateServicePrimaryTaskSetArgsForCall = append(fake.updateServicePrimaryTaskSetArgsForCall, struct {
		arg1 *ecs.UpdateServicePrimaryTaskSetInput
	}{arg1})
	fake.recordInvocation("UpdateServicePrimaryTaskSet", []interface{}{arg1})
	fake.updateServicePrimaryTaskSetMutex.Unlock()
	if fake.UpdateServicePrimaryTaskSetStub != nil {
		return fake.UpdateServicePrimaryTaskSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServicePrimaryTaskSetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetCallCount() int {
	fake.updateServicePrimaryTaskSetMutex.RLock()
	defer fake.updateServicePrimaryTaskSetMutex.RUnlock()
	return len(fake.updateServicePrimaryTaskSetArgsForCall)
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetCalls(stub func(*ecs.UpdateServicePrimaryTaskSetInput) (*ecs.UpdateServicePrimaryTaskSetOutput, error)) {
	fake.updateServicePrimaryTaskSetMutex.Lock()
	defer fake.updateServicePrimaryTaskSetMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetStub = stub
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetArgsForCall(i int) *ecs.UpdateServicePrimaryTaskSetInput {
	fake.updateServicePrimaryTaskSetMutex.RLock()
	defer fake.updateServicePrimaryTaskSetMutex.RUnlock()
	argsForCall := fake.updateServicePrimaryTaskSetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetReturns(result1 *ecs.UpdateServicePrimaryTaskSetOutput, result2 error) {
	fake.updateServicePrimaryTaskSetMutex.Lock()
	defer fake.updateServicePrimaryTaskSetMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetStub = nil
	fake.updateServicePrimaryTaskSetReturns = struct {
		result1 *ecs.UpdateServicePrimaryTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetReturnsOnCall(i int, result1 *ecs.UpdateServicePrimaryTaskSetOutput, result2 error) {
	fake.updateServicePrimaryTaskSetMutex.Lock()
	defer fake.updateServicePrimaryTaskSetMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetStub = nil
	if fake.updateServicePrimaryTaskSetReturnsOnCall == nil {
		fake.updateServicePrimaryTaskSetReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateServicePrimaryTaskSetOutput
			result2 error
		})
	}
	fake.updateServicePrimaryTaskSetReturnsOnCall[i] = struct {
		result1 *ecs.UpdateServicePrimaryTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetRequest(arg1 *ecs.UpdateServicePrimaryTaskSetInput) (*request.Request, *ecs.UpdateServicePrimaryTaskSetOutput) {
	fake.updateServicePrimaryTaskSetRequestMutex.Lock()
	ret, specificReturn := fake.updateServicePrimaryTaskSetRequestReturnsOnCall[len(fake.updateServicePrimaryTaskSetRequestArgsForCall)]
	fake.updateServicePrimaryTaskSetRequestArgsForCall = append(fake.updateServicePrimaryTaskSetRequestArgsForCall, struct {
		arg1 *ecs.UpdateServicePrimaryTaskSetInput
	}{arg1})
	fake.recordInvocation("UpdateServicePrimaryTaskSetRequest", []interface{}{arg1})
	fake.updateServicePrimaryTaskSetRequestMutex.Unlock()
	if fake.UpdateServicePrimaryTaskSetRequestStub != nil {
		return fake.UpdateServicePrimaryTaskSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServicePrimaryTaskSetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetRequestCallCount() int {
	fake.updateServicePrimaryTaskSetRequestMutex.RLock()
	defer fake.updateServicePrimaryTaskSetRequestMutex.RUnlock()
	return len(fake.updateServicePrimaryTaskSetRequestArgsForCall)
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetRequestCalls(stub func(*ecs.UpdateServicePrimaryTaskSetInput) (*request.Request, *ecs.UpdateServicePrimaryTaskSetOutput)) {
	fake.updateServicePrimaryTaskSetRequestMutex.Lock()
	defer fake.updateServicePrimaryTaskSetRequestMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetRequestStub = stub
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetRequestArgsForCall(i int) *ecs.UpdateServicePrimaryTaskSetInput {
	fake.updateServicePrimaryTaskSetRequestMutex.RLock()
	defer fake.updateServicePrimaryTaskSetRequestMutex.RUnlock()
	argsForCall := fake.updateServicePrimaryTaskSetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetRequestReturns(result1 *request.Request, result2 *ecs.UpdateServicePrimaryTaskSetOutput) {
	fake.updateServicePrimaryTaskSetRequestMutex.Lock()
	defer fake.updateServicePrimaryTaskSetRequestMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetRequestStub = nil
	fake.updateServicePrimaryTaskSetRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.UpdateServicePrimaryTaskSetOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.UpdateServicePrimaryTaskSetOutput) {
	fake.updateServicePrimaryTaskSetRequestMutex.Lock()
	defer fake.updateServicePrimaryTaskSetRequestMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetRequestStub = nil
	if fake.updateServicePrimaryTaskSetRequestReturnsOnCall == nil {
		fake.updateServicePrimaryTaskSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.UpdateServicePrimaryTaskSetOutput
		})
	}
	fake.updateServicePrimaryTaskSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.UpdateServicePrimaryTaskSetOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetWithContext(arg1 context.Context, arg2 *ecs.UpdateServicePrimaryTaskSetInput, arg3 ...request.Option) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	fake.updateServicePrimaryTaskSetWithContextMutex.Lock()
	ret, specificReturn := fake.updateServicePrimaryTaskSetWithContextReturnsOnCall[len(fake.updateServicePrimaryTaskSetWithContextArgsForCall)]
	fake.updateServicePrimaryTaskSetWithContextArgsForCall = append(fake.updateServicePrimaryTaskSetWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.UpdateServicePrimaryTaskSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateServicePrimaryTaskSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateServicePrimaryTaskSetWithContextMutex.Unlock()
	if fake.UpdateServicePrimaryTaskSetWithContextStub != nil {
		return fake.UpdateServicePrimaryTaskSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServicePrimaryTaskSetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetWithContextCallCount() int {
	fake.updateServicePrimaryTaskSetWithContextMutex.RLock()
	defer fake.updateServicePrimaryTaskSetWithContextMutex.RUnlock()
	return len(fake.updateServicePrimaryTaskSetWithContextArgsForCall)
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetWithContextCalls(stub func(context.Context, *ecs.UpdateServicePrimaryTaskSetInput, ...request.Option) (*ecs.UpdateServicePrimaryTaskSetOutput, error)) {
	fake.updateServicePrimaryTaskSetWithContextMutex.Lock()
	defer fake.updateServicePrimaryTaskSetWithContextMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetWithContextStub = stub
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetWithContextArgsForCall(i int) (context.Context, *ecs.UpdateServicePrimaryTaskSetInput, []request.Option) {
	fake.updateServicePrimaryTaskSetWithContextMutex.RLock()
	defer fake.updateServicePrimaryTaskSetWithContextMutex.RUnlock()
	argsForCall := fake.updateServicePrimaryTaskSetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetWithContextReturns(result1 *ecs.UpdateServicePrimaryTaskSetOutput, result2 error) {
	fake.updateServicePrimaryTaskSetWithContextMutex.Lock()
	defer fake.updateServicePrimaryTaskSetWithContextMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetWithContextStub = nil
	fake.updateServicePrimaryTaskSetWithContextReturns = struct {
		result1 *ecs.UpdateServicePrimaryTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServicePrimaryTaskSetWithContextReturnsOnCall(i int, result1 *ecs.UpdateServicePrimaryTaskSetOutput, result2 error) {
	fake.updateServicePrimaryTaskSetWithContextMutex.Lock()
	defer fake.updateServicePrimaryTaskSetWithContextMutex.Unlock()
	fake.UpdateServicePrimaryTaskSetWithContextStub = nil
	if fake.updateServicePrimaryTaskSetWithContextReturnsOnCall == nil {
		fake.updateServicePrimaryTaskSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateServicePrimaryTaskSetOutput
			result2 error
		})
	}
	fake.updateServicePrimaryTaskSetWithContextReturnsOnCall[i] = struct {
		result1 *ecs.UpdateServicePrimaryTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServiceRequest(arg1 *ecs.UpdateServiceInput) (*request.Request, *ecs.UpdateServiceOutput) {
	fake.updateServiceRequestMutex.Lock()
	ret, specificReturn := fake.updateServiceRequestReturnsOnCall[len(fake.updateServiceRequestArgsForCall)]
	fake.updateServiceRequestArgsForCall = append(fake.updateServiceRequestArgsForCall, struct {
		arg1 *ecs.UpdateServiceInput
	}{arg1})
	fake.recordInvocation("UpdateServiceRequest", []interface{}{arg1})
	fake.updateServiceRequestMutex.Unlock()
	if fake.UpdateServiceRequestStub != nil {
		return fake.UpdateServiceRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateServiceRequestCallCount() int {
	fake.updateServiceRequestMutex.RLock()
	defer fake.updateServiceRequestMutex.RUnlock()
	return len(fake.updateServiceRequestArgsForCall)
}

func (fake *FakeECSClient) UpdateServiceRequestCalls(stub func(*ecs.UpdateServiceInput) (*request.Request, *ecs.UpdateServiceOutput)) {
	fake.updateServiceRequestMutex.Lock()
	defer fake.updateServiceRequestMutex.Unlock()
	fake.UpdateServiceRequestStub = stub
}

func (fake *FakeECSClient) UpdateServiceRequestArgsForCall(i int) *ecs.UpdateServiceInput {
	fake.updateServiceRequestMutex.RLock()
	defer fake.updateServiceRequestMutex.RUnlock()
	argsForCall := fake.updateServiceRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateServiceRequestReturns(result1 *request.Request, result2 *ecs.UpdateServiceOutput) {
	fake.updateServiceRequestMutex.Lock()
	defer fake.updateServiceRequestMutex.Unlock()
	fake.UpdateServiceRequestStub = nil
	fake.updateServiceRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.UpdateServiceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServiceRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.UpdateServiceOutput) {
	fake.updateServiceRequestMutex.Lock()
	defer fake.updateServiceRequestMutex.Unlock()
	fake.UpdateServiceRequestStub = nil
	if fake.updateServiceRequestReturnsOnCall == nil {
		fake.updateServiceRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.UpdateServiceOutput
		})
	}
	fake.updateServiceRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.UpdateServiceOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServiceWithContext(arg1 context.Context, arg2 *ecs.UpdateServiceInput, arg3 ...request.Option) (*ecs.UpdateServiceOutput, error) {
	fake.updateServiceWithContextMutex.Lock()
	ret, specificReturn := fake.updateServiceWithContextReturnsOnCall[len(fake.updateServiceWithContextArgsForCall)]
	fake.updateServiceWithContextArgsForCall = append(fake.updateServiceWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.UpdateServiceInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateServiceWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateServiceWithContextMutex.Unlock()
	if fake.UpdateServiceWithContextStub != nil {
		return fake.UpdateServiceWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateServiceWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateServiceWithContextCallCount() int {
	fake.updateServiceWithContextMutex.RLock()
	defer fake.updateServiceWithContextMutex.RUnlock()
	return len(fake.updateServiceWithContextArgsForCall)
}

func (fake *FakeECSClient) UpdateServiceWithContextCalls(stub func(context.Context, *ecs.UpdateServiceInput, ...request.Option) (*ecs.UpdateServiceOutput, error)) {
	fake.updateServiceWithContextMutex.Lock()
	defer fake.updateServiceWithContextMutex.Unlock()
	fake.UpdateServiceWithContextStub = stub
}

func (fake *FakeECSClient) UpdateServiceWithContextArgsForCall(i int) (context.Context, *ecs.UpdateServiceInput, []request.Option) {
	fake.updateServiceWithContextMutex.RLock()
	defer fake.updateServiceWithContextMutex.RUnlock()
	argsForCall := fake.updateServiceWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) UpdateServiceWithContextReturns(result1 *ecs.UpdateServiceOutput, result2 error) {
	fake.updateServiceWithContextMutex.Lock()
	defer fake.updateServiceWithContextMutex.Unlock()
	fake.UpdateServiceWithContextStub = nil
	fake.updateServiceWithContextReturns = struct {
		result1 *ecs.UpdateServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateServiceWithContextReturnsOnCall(i int, result1 *ecs.UpdateServiceOutput, result2 error) {
	fake.updateServiceWithContextMutex.Lock()
	defer fake.updateServiceWithContextMutex.Unlock()
	fake.UpdateServiceWithContextStub = nil
	if fake.updateServiceWithContextReturnsOnCall == nil {
		fake.updateServiceWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateServiceOutput
			result2 error
		})
	}
	fake.updateServiceWithContextReturnsOnCall[i] = struct {
		result1 *ecs.UpdateServiceOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateTaskSet(arg1 *ecs.UpdateTaskSetInput) (*ecs.UpdateTaskSetOutput, error) {
	fake.updateTaskSetMutex.Lock()
	ret, specificReturn := fake.updateTaskSetReturnsOnCall[len(fake.updateTaskSetArgsForCall)]
	fake.updateTaskSetArgsForCall = append(fake.updateTaskSetArgsForCall, struct {
		arg1 *ecs.UpdateTaskSetInput
	}{arg1})
	fake.recordInvocation("UpdateTaskSet", []interface{}{arg1})
	fake.updateTaskSetMutex.Unlock()
	if fake.UpdateTaskSetStub != nil {
		return fake.UpdateTaskSetStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateTaskSetReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateTaskSetCallCount() int {
	fake.updateTaskSetMutex.RLock()
	defer fake.updateTaskSetMutex.RUnlock()
	return len(fake.updateTaskSetArgsForCall)
}

func (fake *FakeECSClient) UpdateTaskSetCalls(stub func(*ecs.UpdateTaskSetInput) (*ecs.UpdateTaskSetOutput, error)) {
	fake.updateTaskSetMutex.Lock()
	defer fake.updateTaskSetMutex.Unlock()
	fake.UpdateTaskSetStub = stub
}

func (fake *FakeECSClient) UpdateTaskSetArgsForCall(i int) *ecs.UpdateTaskSetInput {
	fake.updateTaskSetMutex.RLock()
	defer fake.updateTaskSetMutex.RUnlock()
	argsForCall := fake.updateTaskSetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateTaskSetReturns(result1 *ecs.UpdateTaskSetOutput, result2 error) {
	fake.updateTaskSetMutex.Lock()
	defer fake.updateTaskSetMutex.Unlock()
	fake.UpdateTaskSetStub = nil
	fake.updateTaskSetReturns = struct {
		result1 *ecs.UpdateTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateTaskSetReturnsOnCall(i int, result1 *ecs.UpdateTaskSetOutput, result2 error) {
	fake.updateTaskSetMutex.Lock()
	defer fake.updateTaskSetMutex.Unlock()
	fake.UpdateTaskSetStub = nil
	if fake.updateTaskSetReturnsOnCall == nil {
		fake.updateTaskSetReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateTaskSetOutput
			result2 error
		})
	}
	fake.updateTaskSetReturnsOnCall[i] = struct {
		result1 *ecs.UpdateTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateTaskSetRequest(arg1 *ecs.UpdateTaskSetInput) (*request.Request, *ecs.UpdateTaskSetOutput) {
	fake.updateTaskSetRequestMutex.Lock()
	ret, specificReturn := fake.updateTaskSetRequestReturnsOnCall[len(fake.updateTaskSetRequestArgsForCall)]
	fake.updateTaskSetRequestArgsForCall = append(fake.updateTaskSetRequestArgsForCall, struct {
		arg1 *ecs.UpdateTaskSetInput
	}{arg1})
	fake.recordInvocation("UpdateTaskSetRequest", []interface{}{arg1})
	fake.updateTaskSetRequestMutex.Unlock()
	if fake.UpdateTaskSetRequestStub != nil {
		return fake.UpdateTaskSetRequestStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateTaskSetRequestReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateTaskSetRequestCallCount() int {
	fake.updateTaskSetRequestMutex.RLock()
	defer fake.updateTaskSetRequestMutex.RUnlock()
	return len(fake.updateTaskSetRequestArgsForCall)
}

func (fake *FakeECSClient) UpdateTaskSetRequestCalls(stub func(*ecs.UpdateTaskSetInput) (*request.Request, *ecs.UpdateTaskSetOutput)) {
	fake.updateTaskSetRequestMutex.Lock()
	defer fake.updateTaskSetRequestMutex.Unlock()
	fake.UpdateTaskSetRequestStub = stub
}

func (fake *FakeECSClient) UpdateTaskSetRequestArgsForCall(i int) *ecs.UpdateTaskSetInput {
	fake.updateTaskSetRequestMutex.RLock()
	defer fake.updateTaskSetRequestMutex.RUnlock()
	argsForCall := fake.updateTaskSetRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) UpdateTaskSetRequestReturns(result1 *request.Request, result2 *ecs.UpdateTaskSetOutput) {
	fake.updateTaskSetRequestMutex.Lock()
	defer fake.updateTaskSetRequestMutex.Unlock()
	fake.UpdateTaskSetRequestStub = nil
	fake.updateTaskSetRequestReturns = struct {
		result1 *request.Request
		result2 *ecs.UpdateTaskSetOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateTaskSetRequestReturnsOnCall(i int, result1 *request.Request, result2 *ecs.UpdateTaskSetOutput) {
	fake.updateTaskSetRequestMutex.Lock()
	defer fake.updateTaskSetRequestMutex.Unlock()
	fake.UpdateTaskSetRequestStub = nil
	if fake.updateTaskSetRequestReturnsOnCall == nil {
		fake.updateTaskSetRequestReturnsOnCall = make(map[int]struct {
			result1 *request.Request
			result2 *ecs.UpdateTaskSetOutput
		})
	}
	fake.updateTaskSetRequestReturnsOnCall[i] = struct {
		result1 *request.Request
		result2 *ecs.UpdateTaskSetOutput
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateTaskSetWithContext(arg1 context.Context, arg2 *ecs.UpdateTaskSetInput, arg3 ...request.Option) (*ecs.UpdateTaskSetOutput, error) {
	fake.updateTaskSetWithContextMutex.Lock()
	ret, specificReturn := fake.updateTaskSetWithContextReturnsOnCall[len(fake.updateTaskSetWithContextArgsForCall)]
	fake.updateTaskSetWithContextArgsForCall = append(fake.updateTaskSetWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.UpdateTaskSetInput
		arg3 []request.Option
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpdateTaskSetWithContext", []interface{}{arg1, arg2, arg3})
	fake.updateTaskSetWithContextMutex.Unlock()
	if fake.UpdateTaskSetWithContextStub != nil {
		return fake.UpdateTaskSetWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.updateTaskSetWithContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeECSClient) UpdateTaskSetWithContextCallCount() int {
	fake.updateTaskSetWithContextMutex.RLock()
	defer fake.updateTaskSetWithContextMutex.RUnlock()
	return len(fake.updateTaskSetWithContextArgsForCall)
}

func (fake *FakeECSClient) UpdateTaskSetWithContextCalls(stub func(context.Context, *ecs.UpdateTaskSetInput, ...request.Option) (*ecs.UpdateTaskSetOutput, error)) {
	fake.updateTaskSetWithContextMutex.Lock()
	defer fake.updateTaskSetWithContextMutex.Unlock()
	fake.UpdateTaskSetWithContextStub = stub
}

func (fake *FakeECSClient) UpdateTaskSetWithContextArgsForCall(i int) (context.Context, *ecs.UpdateTaskSetInput, []request.Option) {
	fake.updateTaskSetWithContextMutex.RLock()
	defer fake.updateTaskSetWithContextMutex.RUnlock()
	argsForCall := fake.updateTaskSetWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) UpdateTaskSetWithContextReturns(result1 *ecs.UpdateTaskSetOutput, result2 error) {
	fake.updateTaskSetWithContextMutex.Lock()
	defer fake.updateTaskSetWithContextMutex.Unlock()
	fake.UpdateTaskSetWithContextStub = nil
	fake.updateTaskSetWithContextReturns = struct {
		result1 *ecs.UpdateTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) UpdateTaskSetWithContextReturnsOnCall(i int, result1 *ecs.UpdateTaskSetOutput, result2 error) {
	fake.updateTaskSetWithContextMutex.Lock()
	defer fake.updateTaskSetWithContextMutex.Unlock()
	fake.UpdateTaskSetWithContextStub = nil
	if fake.updateTaskSetWithContextReturnsOnCall == nil {
		fake.updateTaskSetWithContextReturnsOnCall = make(map[int]struct {
			result1 *ecs.UpdateTaskSetOutput
			result2 error
		})
	}
	fake.updateTaskSetWithContextReturnsOnCall[i] = struct {
		result1 *ecs.UpdateTaskSetOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeECSClient) WaitUntilServicesInactive(arg1 *ecs.DescribeServicesInput) error {
	fake.waitUntilServicesInactiveMutex.Lock()
	ret, specificReturn := fake.waitUntilServicesInactiveReturnsOnCall[len(fake.waitUntilServicesInactiveArgsForCall)]
	fake.waitUntilServicesInactiveArgsForCall = append(fake.waitUntilServicesInactiveArgsForCall, struct {
		arg1 *ecs.DescribeServicesInput
	}{arg1})
	fake.recordInvocation("WaitUntilServicesInactive", []interface{}{arg1})
	fake.waitUntilServicesInactiveMutex.Unlock()
	if fake.WaitUntilServicesInactiveStub != nil {
		return fake.WaitUntilServicesInactiveStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilServicesInactiveReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) WaitUntilServicesInactiveCallCount() int {
	fake.waitUntilServicesInactiveMutex.RLock()
	defer fake.waitUntilServicesInactiveMutex.RUnlock()
	return len(fake.waitUntilServicesInactiveArgsForCall)
}

func (fake *FakeECSClient) WaitUntilServicesInactiveCalls(stub func(*ecs.DescribeServicesInput) error) {
	fake.waitUntilServicesInactiveMutex.Lock()
	defer fake.waitUntilServicesInactiveMutex.Unlock()
	fake.WaitUntilServicesInactiveStub = stub
}

func (fake *FakeECSClient) WaitUntilServicesInactiveArgsForCall(i int) *ecs.DescribeServicesInput {
	fake.waitUntilServicesInactiveMutex.RLock()
	defer fake.waitUntilServicesInactiveMutex.RUnlock()
	argsForCall := fake.waitUntilServicesInactiveArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) WaitUntilServicesInactiveReturns(result1 error) {
	fake.waitUntilServicesInactiveMutex.Lock()
	defer fake.waitUntilServicesInactiveMutex.Unlock()
	fake.WaitUntilServicesInactiveStub = nil
	fake.waitUntilServicesInactiveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilServicesInactiveReturnsOnCall(i int, result1 error) {
	fake.waitUntilServicesInactiveMutex.Lock()
	defer fake.waitUntilServicesInactiveMutex.Unlock()
	fake.WaitUntilServicesInactiveStub = nil
	if fake.waitUntilServicesInactiveReturnsOnCall == nil {
		fake.waitUntilServicesInactiveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilServicesInactiveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilServicesInactiveWithContext(arg1 context.Context, arg2 *ecs.DescribeServicesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilServicesInactiveWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilServicesInactiveWithContextReturnsOnCall[len(fake.waitUntilServicesInactiveWithContextArgsForCall)]
	fake.waitUntilServicesInactiveWithContextArgsForCall = append(fake.waitUntilServicesInactiveWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeServicesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilServicesInactiveWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilServicesInactiveWithContextMutex.Unlock()
	if fake.WaitUntilServicesInactiveWithContextStub != nil {
		return fake.WaitUntilServicesInactiveWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilServicesInactiveWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) WaitUntilServicesInactiveWithContextCallCount() int {
	fake.waitUntilServicesInactiveWithContextMutex.RLock()
	defer fake.waitUntilServicesInactiveWithContextMutex.RUnlock()
	return len(fake.waitUntilServicesInactiveWithContextArgsForCall)
}

func (fake *FakeECSClient) WaitUntilServicesInactiveWithContextCalls(stub func(context.Context, *ecs.DescribeServicesInput, ...request.WaiterOption) error) {
	fake.waitUntilServicesInactiveWithContextMutex.Lock()
	defer fake.waitUntilServicesInactiveWithContextMutex.Unlock()
	fake.WaitUntilServicesInactiveWithContextStub = stub
}

func (fake *FakeECSClient) WaitUntilServicesInactiveWithContextArgsForCall(i int) (context.Context, *ecs.DescribeServicesInput, []request.WaiterOption) {
	fake.waitUntilServicesInactiveWithContextMutex.RLock()
	defer fake.waitUntilServicesInactiveWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilServicesInactiveWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) WaitUntilServicesInactiveWithContextReturns(result1 error) {
	fake.waitUntilServicesInactiveWithContextMutex.Lock()
	defer fake.waitUntilServicesInactiveWithContextMutex.Unlock()
	fake.WaitUntilServicesInactiveWithContextStub = nil
	fake.waitUntilServicesInactiveWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilServicesInactiveWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilServicesInactiveWithContextMutex.Lock()
	defer fake.waitUntilServicesInactiveWithContextMutex.Unlock()
	fake.WaitUntilServicesInactiveWithContextStub = nil
	if fake.waitUntilServicesInactiveWithContextReturnsOnCall == nil {
		fake.waitUntilServicesInactiveWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilServicesInactiveWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilServicesStable(arg1 *ecs.DescribeServicesInput) error {
	fake.waitUntilServicesStableMutex.Lock()
	ret, specificReturn := fake.waitUntilServicesStableReturnsOnCall[len(fake.waitUntilServicesStableArgsForCall)]
	fake.waitUntilServicesStableArgsForCall = append(fake.waitUntilServicesStableArgsForCall, struct {
		arg1 *ecs.DescribeServicesInput
	}{arg1})
	fake.recordInvocation("WaitUntilServicesStable", []interface{}{arg1})
	fake.waitUntilServicesStableMutex.Unlock()
	if fake.WaitUntilServicesStableStub != nil {
		return fake.WaitUntilServicesStableStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilServicesStableReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) WaitUntilServicesStableCallCount() int {
	fake.waitUntilServicesStableMutex.RLock()
	defer fake.waitUntilServicesStableMutex.RUnlock()
	return len(fake.waitUntilServicesStableArgsForCall)
}

func (fake *FakeECSClient) WaitUntilServicesStableCalls(stub func(*ecs.DescribeServicesInput) error) {
	fake.waitUntilServicesStableMutex.Lock()
	defer fake.waitUntilServicesStableMutex.Unlock()
	fake.WaitUntilServicesStableStub = stub
}

func (fake *FakeECSClient) WaitUntilServicesStableArgsForCall(i int) *ecs.DescribeServicesInput {
	fake.waitUntilServicesStableMutex.RLock()
	defer fake.waitUntilServicesStableMutex.RUnlock()
	argsForCall := fake.waitUntilServicesStableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) WaitUntilServicesStableReturns(result1 error) {
	fake.waitUntilServicesStableMutex.Lock()
	defer fake.waitUntilServicesStableMutex.Unlock()
	fake.WaitUntilServicesStableStub = nil
	fake.waitUntilServicesStableReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilServicesStableReturnsOnCall(i int, result1 error) {
	fake.waitUntilServicesStableMutex.Lock()
	defer fake.waitUntilServicesStableMutex.Unlock()
	fake.WaitUntilServicesStableStub = nil
	if fake.waitUntilServicesStableReturnsOnCall == nil {
		fake.waitUntilServicesStableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilServicesStableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilServicesStableWithContext(arg1 context.Context, arg2 *ecs.DescribeServicesInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilServicesStableWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilServicesStableWithContextReturnsOnCall[len(fake.waitUntilServicesStableWithContextArgsForCall)]
	fake.waitUntilServicesStableWithContextArgsForCall = append(fake.waitUntilServicesStableWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeServicesInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilServicesStableWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilServicesStableWithContextMutex.Unlock()
	if fake.WaitUntilServicesStableWithContextStub != nil {
		return fake.WaitUntilServicesStableWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilServicesStableWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) WaitUntilServicesStableWithContextCallCount() int {
	fake.waitUntilServicesStableWithContextMutex.RLock()
	defer fake.waitUntilServicesStableWithContextMutex.RUnlock()
	return len(fake.waitUntilServicesStableWithContextArgsForCall)
}

func (fake *FakeECSClient) WaitUntilServicesStableWithContextCalls(stub func(context.Context, *ecs.DescribeServicesInput, ...request.WaiterOption) error) {
	fake.waitUntilServicesStableWithContextMutex.Lock()
	defer fake.waitUntilServicesStableWithContextMutex.Unlock()
	fake.WaitUntilServicesStableWithContextStub = stub
}

func (fake *FakeECSClient) WaitUntilServicesStableWithContextArgsForCall(i int) (context.Context, *ecs.DescribeServicesInput, []request.WaiterOption) {
	fake.waitUntilServicesStableWithContextMutex.RLock()
	defer fake.waitUntilServicesStableWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilServicesStableWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) WaitUntilServicesStableWithContextReturns(result1 error) {
	fake.waitUntilServicesStableWithContextMutex.Lock()
	defer fake.waitUntilServicesStableWithContextMutex.Unlock()
	fake.WaitUntilServicesStableWithContextStub = nil
	fake.waitUntilServicesStableWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilServicesStableWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilServicesStableWithContextMutex.Lock()
	defer fake.waitUntilServicesStableWithContextMutex.Unlock()
	fake.WaitUntilServicesStableWithContextStub = nil
	if fake.waitUntilServicesStableWithContextReturnsOnCall == nil {
		fake.waitUntilServicesStableWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilServicesStableWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilTasksRunning(arg1 *ecs.DescribeTasksInput) error {
	fake.waitUntilTasksRunningMutex.Lock()
	ret, specificReturn := fake.waitUntilTasksRunningReturnsOnCall[len(fake.waitUntilTasksRunningArgsForCall)]
	fake.waitUntilTasksRunningArgsForCall = append(fake.waitUntilTasksRunningArgsForCall, struct {
		arg1 *ecs.DescribeTasksInput
	}{arg1})
	fake.recordInvocation("WaitUntilTasksRunning", []interface{}{arg1})
	fake.waitUntilTasksRunningMutex.Unlock()
	if fake.WaitUntilTasksRunningStub != nil {
		return fake.WaitUntilTasksRunningStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilTasksRunningReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) WaitUntilTasksRunningCallCount() int {
	fake.waitUntilTasksRunningMutex.RLock()
	defer fake.waitUntilTasksRunningMutex.RUnlock()
	return len(fake.waitUntilTasksRunningArgsForCall)
}

func (fake *FakeECSClient) WaitUntilTasksRunningCalls(stub func(*ecs.DescribeTasksInput) error) {
	fake.waitUntilTasksRunningMutex.Lock()
	defer fake.waitUntilTasksRunningMutex.Unlock()
	fake.WaitUntilTasksRunningStub = stub
}

func (fake *FakeECSClient) WaitUntilTasksRunningArgsForCall(i int) *ecs.DescribeTasksInput {
	fake.waitUntilTasksRunningMutex.RLock()
	defer fake.waitUntilTasksRunningMutex.RUnlock()
	argsForCall := fake.waitUntilTasksRunningArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) WaitUntilTasksRunningReturns(result1 error) {
	fake.waitUntilTasksRunningMutex.Lock()
	defer fake.waitUntilTasksRunningMutex.Unlock()
	fake.WaitUntilTasksRunningStub = nil
	fake.waitUntilTasksRunningReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilTasksRunningReturnsOnCall(i int, result1 error) {
	fake.waitUntilTasksRunningMutex.Lock()
	defer fake.waitUntilTasksRunningMutex.Unlock()
	fake.WaitUntilTasksRunningStub = nil
	if fake.waitUntilTasksRunningReturnsOnCall == nil {
		fake.waitUntilTasksRunningReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilTasksRunningReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilTasksRunningWithContext(arg1 context.Context, arg2 *ecs.DescribeTasksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilTasksRunningWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilTasksRunningWithContextReturnsOnCall[len(fake.waitUntilTasksRunningWithContextArgsForCall)]
	fake.waitUntilTasksRunningWithContextArgsForCall = append(fake.waitUntilTasksRunningWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeTasksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilTasksRunningWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilTasksRunningWithContextMutex.Unlock()
	if fake.WaitUntilTasksRunningWithContextStub != nil {
		return fake.WaitUntilTasksRunningWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilTasksRunningWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) WaitUntilTasksRunningWithContextCallCount() int {
	fake.waitUntilTasksRunningWithContextMutex.RLock()
	defer fake.waitUntilTasksRunningWithContextMutex.RUnlock()
	return len(fake.waitUntilTasksRunningWithContextArgsForCall)
}

func (fake *FakeECSClient) WaitUntilTasksRunningWithContextCalls(stub func(context.Context, *ecs.DescribeTasksInput, ...request.WaiterOption) error) {
	fake.waitUntilTasksRunningWithContextMutex.Lock()
	defer fake.waitUntilTasksRunningWithContextMutex.Unlock()
	fake.WaitUntilTasksRunningWithContextStub = stub
}

func (fake *FakeECSClient) WaitUntilTasksRunningWithContextArgsForCall(i int) (context.Context, *ecs.DescribeTasksInput, []request.WaiterOption) {
	fake.waitUntilTasksRunningWithContextMutex.RLock()
	defer fake.waitUntilTasksRunningWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilTasksRunningWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) WaitUntilTasksRunningWithContextReturns(result1 error) {
	fake.waitUntilTasksRunningWithContextMutex.Lock()
	defer fake.waitUntilTasksRunningWithContextMutex.Unlock()
	fake.WaitUntilTasksRunningWithContextStub = nil
	fake.waitUntilTasksRunningWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilTasksRunningWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilTasksRunningWithContextMutex.Lock()
	defer fake.waitUntilTasksRunningWithContextMutex.Unlock()
	fake.WaitUntilTasksRunningWithContextStub = nil
	if fake.waitUntilTasksRunningWithContextReturnsOnCall == nil {
		fake.waitUntilTasksRunningWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilTasksRunningWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilTasksStopped(arg1 *ecs.DescribeTasksInput) error {
	fake.waitUntilTasksStoppedMutex.Lock()
	ret, specificReturn := fake.waitUntilTasksStoppedReturnsOnCall[len(fake.waitUntilTasksStoppedArgsForCall)]
	fake.waitUntilTasksStoppedArgsForCall = append(fake.waitUntilTasksStoppedArgsForCall, struct {
		arg1 *ecs.DescribeTasksInput
	}{arg1})
	fake.recordInvocation("WaitUntilTasksStopped", []interface{}{arg1})
	fake.waitUntilTasksStoppedMutex.Unlock()
	if fake.WaitUntilTasksStoppedStub != nil {
		return fake.WaitUntilTasksStoppedStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilTasksStoppedReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) WaitUntilTasksStoppedCallCount() int {
	fake.waitUntilTasksStoppedMutex.RLock()
	defer fake.waitUntilTasksStoppedMutex.RUnlock()
	return len(fake.waitUntilTasksStoppedArgsForCall)
}

func (fake *FakeECSClient) WaitUntilTasksStoppedCalls(stub func(*ecs.DescribeTasksInput) error) {
	fake.waitUntilTasksStoppedMutex.Lock()
	defer fake.waitUntilTasksStoppedMutex.Unlock()
	fake.WaitUntilTasksStoppedStub = stub
}

func (fake *FakeECSClient) WaitUntilTasksStoppedArgsForCall(i int) *ecs.DescribeTasksInput {
	fake.waitUntilTasksStoppedMutex.RLock()
	defer fake.waitUntilTasksStoppedMutex.RUnlock()
	argsForCall := fake.waitUntilTasksStoppedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeECSClient) WaitUntilTasksStoppedReturns(result1 error) {
	fake.waitUntilTasksStoppedMutex.Lock()
	defer fake.waitUntilTasksStoppedMutex.Unlock()
	fake.WaitUntilTasksStoppedStub = nil
	fake.waitUntilTasksStoppedReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilTasksStoppedReturnsOnCall(i int, result1 error) {
	fake.waitUntilTasksStoppedMutex.Lock()
	defer fake.waitUntilTasksStoppedMutex.Unlock()
	fake.WaitUntilTasksStoppedStub = nil
	if fake.waitUntilTasksStoppedReturnsOnCall == nil {
		fake.waitUntilTasksStoppedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilTasksStoppedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilTasksStoppedWithContext(arg1 context.Context, arg2 *ecs.DescribeTasksInput, arg3 ...request.WaiterOption) error {
	fake.waitUntilTasksStoppedWithContextMutex.Lock()
	ret, specificReturn := fake.waitUntilTasksStoppedWithContextReturnsOnCall[len(fake.waitUntilTasksStoppedWithContextArgsForCall)]
	fake.waitUntilTasksStoppedWithContextArgsForCall = append(fake.waitUntilTasksStoppedWithContextArgsForCall, struct {
		arg1 context.Context
		arg2 *ecs.DescribeTasksInput
		arg3 []request.WaiterOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitUntilTasksStoppedWithContext", []interface{}{arg1, arg2, arg3})
	fake.waitUntilTasksStoppedWithContextMutex.Unlock()
	if fake.WaitUntilTasksStoppedWithContextStub != nil {
		return fake.WaitUntilTasksStoppedWithContextStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitUntilTasksStoppedWithContextReturns
	return fakeReturns.result1
}

func (fake *FakeECSClient) WaitUntilTasksStoppedWithContextCallCount() int {
	fake.waitUntilTasksStoppedWithContextMutex.RLock()
	defer fake.waitUntilTasksStoppedWithContextMutex.RUnlock()
	return len(fake.waitUntilTasksStoppedWithContextArgsForCall)
}

func (fake *FakeECSClient) WaitUntilTasksStoppedWithContextCalls(stub func(context.Context, *ecs.DescribeTasksInput, ...request.WaiterOption) error) {
	fake.waitUntilTasksStoppedWithContextMutex.Lock()
	defer fake.waitUntilTasksStoppedWithContextMutex.Unlock()
	fake.WaitUntilTasksStoppedWithContextStub = stub
}

func (fake *FakeECSClient) WaitUntilTasksStoppedWithContextArgsForCall(i int) (context.Context, *ecs.DescribeTasksInput, []request.WaiterOption) {
	fake.waitUntilTasksStoppedWithContextMutex.RLock()
	defer fake.waitUntilTasksStoppedWithContextMutex.RUnlock()
	argsForCall := fake.waitUntilTasksStoppedWithContextArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeECSClient) WaitUntilTasksStoppedWithContextReturns(result1 error) {
	fake.waitUntilTasksStoppedWithContextMutex.Lock()
	defer fake.waitUntilTasksStoppedWithContextMutex.Unlock()
	fake.WaitUntilTasksStoppedWithContextStub = nil
	fake.waitUntilTasksStoppedWithContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) WaitUntilTasksStoppedWithContextReturnsOnCall(i int, result1 error) {
	fake.waitUntilTasksStoppedWithContextMutex.Lock()
	defer fake.waitUntilTasksStoppedWithContextMutex.Unlock()
	fake.WaitUntilTasksStoppedWithContextStub = nil
	if fake.waitUntilTasksStoppedWithContextReturnsOnCall == nil {
		fake.waitUntilTasksStoppedWithContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitUntilTasksStoppedWithContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeECSClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCapacityProviderMutex.RLock()
	defer fake.createCapacityProviderMutex.RUnlock()
	fake.createCapacityProviderRequestMutex.RLock()
	defer fake.createCapacityProviderRequestMutex.RUnlock()
	fake.createCapacityProviderWithContextMutex.RLock()
	defer fake.createCapacityProviderWithContextMutex.RUnlock()
	fake.createClusterMutex.RLock()
	defer fake.createClusterMutex.RUnlock()
	fake.createClusterRequestMutex.RLock()
	defer fake.createClusterRequestMutex.RUnlock()
	fake.createClusterWithContextMutex.RLock()
	defer fake.createClusterWithContextMutex.RUnlock()
	fake.createServiceMutex.RLock()
	defer fake.createServiceMutex.RUnlock()
	fake.createServiceRequestMutex.RLock()
	defer fake.createServiceRequestMutex.RUnlock()
	fake.createServiceWithContextMutex.RLock()
	defer fake.createServiceWithContextMutex.RUnlock()
	fake.createTaskSetMutex.RLock()
	defer fake.createTaskSetMutex.RUnlock()
	fake.createTaskSetRequestMutex.RLock()
	defer fake.createTaskSetRequestMutex.RUnlock()
	fake.createTaskSetWithContextMutex.RLock()
	defer fake.createTaskSetWithContextMutex.RUnlock()
	fake.deleteAccountSettingMutex.RLock()
	defer fake.deleteAccountSettingMutex.RUnlock()
	fake.deleteAccountSettingRequestMutex.RLock()
	defer fake.deleteAccountSettingRequestMutex.RUnlock()
	fake.deleteAccountSettingWithContextMutex.RLock()
	defer fake.deleteAccountSettingWithContextMutex.RUnlock()
	fake.deleteAttributesMutex.RLock()
	defer fake.deleteAttributesMutex.RUnlock()
	fake.deleteAttributesRequestMutex.RLock()
	defer fake.deleteAttributesRequestMutex.RUnlock()
	fake.deleteAttributesWithContextMutex.RLock()
	defer fake.deleteAttributesWithContextMutex.RUnlock()
	fake.deleteCapacityProviderMutex.RLock()
	defer fake.deleteCapacityProviderMutex.RUnlock()
	fake.deleteCapacityProviderRequestMutex.RLock()
	defer fake.deleteCapacityProviderRequestMutex.RUnlock()
	fake.deleteCapacityProviderWithContextMutex.RLock()
	defer fake.deleteCapacityProviderWithContextMutex.RUnlock()
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	fake.deleteClusterRequestMutex.RLock()
	defer fake.deleteClusterRequestMutex.RUnlock()
	fake.deleteClusterWithContextMutex.RLock()
	defer fake.deleteClusterWithContextMutex.RUnlock()
	fake.deleteServiceMutex.RLock()
	defer fake.deleteServiceMutex.RUnlock()
	fake.deleteServiceRequestMutex.RLock()
	defer fake.deleteServiceRequestMutex.RUnlock()
	fake.deleteServiceWithContextMutex.RLock()
	defer fake.deleteServiceWithContextMutex.RUnlock()
	fake.deleteTaskSetMutex.RLock()
	defer fake.deleteTaskSetMutex.RUnlock()
	fake.deleteTaskSetRequestMutex.RLock()
	defer fake.deleteTaskSetRequestMutex.RUnlock()
	fake.deleteTaskSetWithContextMutex.RLock()
	defer fake.deleteTaskSetWithContextMutex.RUnlock()
	fake.deregisterContainerInstanceMutex.RLock()
	defer fake.deregisterContainerInstanceMutex.RUnlock()
	fake.deregisterContainerInstanceRequestMutex.RLock()
	defer fake.deregisterContainerInstanceRequestMutex.RUnlock()
	fake.deregisterContainerInstanceWithContextMutex.RLock()
	defer fake.deregisterContainerInstanceWithContextMutex.RUnlock()
	fake.deregisterTaskDefinitionMutex.RLock()
	defer fake.deregisterTaskDefinitionMutex.RUnlock()
	fake.deregisterTaskDefinitionRequestMutex.RLock()
	defer fake.deregisterTaskDefinitionRequestMutex.RUnlock()
	fake.deregisterTaskDefinitionWithContextMutex.RLock()
	defer fake.deregisterTaskDefinitionWithContextMutex.RUnlock()
	fake.describeCapacityProvidersMutex.RLock()
	defer fake.describeCapacityProvidersMutex.RUnlock()
	fake.describeCapacityProvidersRequestMutex.RLock()
	defer fake.describeCapacityProvidersRequestMutex.RUnlock()
	fake.describeCapacityProvidersWithContextMutex.RLock()
	defer fake.describeCapacityProvidersWithContextMutex.RUnlock()
	fake.describeClustersMutex.RLock()
	defer fake.describeClustersMutex.RUnlock()
	fake.describeClustersRequestMutex.RLock()
	defer fake.describeClustersRequestMutex.RUnlock()
	fake.describeClustersWithContextMutex.RLock()
	defer fake.describeClustersWithContextMutex.RUnlock()
	fake.describeContainerInstancesMutex.RLock()
	defer fake.describeContainerInstancesMutex.RUnlock()
	fake.describeContainerInstancesRequestMutex.RLock()
	defer fake.describeContainerInstancesRequestMutex.RUnlock()
	fake.describeContainerInstancesWithContextMutex.RLock()
	defer fake.describeContainerInstancesWithContextMutex.RUnlock()
	fake.describeServicesMutex.RLock()
	defer fake.describeServicesMutex.RUnlock()
	fake.describeServicesRequestMutex.RLock()
	defer fake.describeServicesRequestMutex.RUnlock()
	fake.describeServicesWithContextMutex.RLock()
	defer fake.describeServicesWithContextMutex.RUnlock()
	fake.describeTaskDefinitionMutex.RLock()
	defer fake.describeTaskDefinitionMutex.RUnlock()
	fake.describeTaskDefinitionRequestMutex.RLock()
	defer fake.describeTaskDefinitionRequestMutex.RUnlock()
	fake.describeTaskDefinitionWithContextMutex.RLock()
	defer fake.describeTaskDefinitionWithContextMutex.RUnlock()
	fake.describeTaskSetsMutex.RLock()
	defer fake.describeTaskSetsMutex.RUnlock()
	fake.describeTaskSetsRequestMutex.RLock()
	defer fake.describeTaskSetsRequestMutex.RUnlock()
	fake.describeTaskSetsWithContextMutex.RLock()
	defer fake.describeTaskSetsWithContextMutex.RUnlock()
	fake.describeTasksMutex.RLock()
	defer fake.describeTasksMutex.RUnlock()
	fake.describeTasksRequestMutex.RLock()
	defer fake.describeTasksRequestMutex.RUnlock()
	fake.describeTasksWithContextMutex.RLock()
	defer fake.describeTasksWithContextMutex.RUnlock()
	fake.discoverPollEndpointMutex.RLock()
	defer fake.discoverPollEndpointMutex.RUnlock()
	fake.discoverPollEndpointRequestMutex.RLock()
	defer fake.discoverPollEndpointRequestMutex.RUnlock()
	fake.discoverPollEndpointWithContextMutex.RLock()
	defer fake.discoverPollEndpointWithContextMutex.RUnlock()
	fake.listAccountSettingsMutex.RLock()
	defer fake.listAccountSettingsMutex.RUnlock()
	fake.listAccountSettingsPagesMutex.RLock()
	defer fake.listAccountSettingsPagesMutex.RUnlock()
	fake.listAccountSettingsPagesWithContextMutex.RLock()
	defer fake.listAccountSettingsPagesWithContextMutex.RUnlock()
	fake.listAccountSettingsRequestMutex.RLock()
	defer fake.listAccountSettingsRequestMutex.RUnlock()
	fake.listAccountSettingsWithContextMutex.RLock()
	defer fake.listAccountSettingsWithContextMutex.RUnlock()
	fake.listAttributesMutex.RLock()
	defer fake.listAttributesMutex.RUnlock()
	fake.listAttributesPagesMutex.RLock()
	defer fake.listAttributesPagesMutex.RUnlock()
	fake.listAttributesPagesWithContextMutex.RLock()
	defer fake.listAttributesPagesWithContextMutex.RUnlock()
	fake.listAttributesRequestMutex.RLock()
	defer fake.listAttributesRequestMutex.RUnlock()
	fake.listAttributesWithContextMutex.RLock()
	defer fake.listAttributesWithContextMutex.RUnlock()
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	fake.listClustersPagesMutex.RLock()
	defer fake.listClustersPagesMutex.RUnlock()
	fake.listClustersPagesWithContextMutex.RLock()
	defer fake.listClustersPagesWithContextMutex.RUnlock()
	fake.listClustersRequestMutex.RLock()
	defer fake.listClustersRequestMutex.RUnlock()
	fake.listClustersWithContextMutex.RLock()
	defer fake.listClustersWithContextMutex.RUnlock()
	fake.listContainerInstancesMutex.RLock()
	defer fake.listContainerInstancesMutex.RUnlock()
	fake.listContainerInstancesPagesMutex.RLock()
	defer fake.listContainerInstancesPagesMutex.RUnlock()
	fake.listContainerInstancesPagesWithContextMutex.RLock()
	defer fake.listContainerInstancesPagesWithContextMutex.RUnlock()
	fake.listContainerInstancesRequestMutex.RLock()
	defer fake.listContainerInstancesRequestMutex.RUnlock()
	fake.listContainerInstancesWithContextMutex.RLock()
	defer fake.listContainerInstancesWithContextMutex.RUnlock()
	fake.listServicesMutex.RLock()
	defer fake.listServicesMutex.RUnlock()
	fake.listServicesPagesMutex.RLock()
	defer fake.listServicesPagesMutex.RUnlock()
	fake.listServicesPagesWithContextMutex.RLock()
	defer fake.listServicesPagesWithContextMutex.RUnlock()
	fake.listServicesRequestMutex.RLock()
	defer fake.listServicesRequestMutex.RUnlock()
	fake.listServicesWithContextMutex.RLock()
	defer fake.listServicesWithContextMutex.RUnlock()
	fake.listTagsForResourceMutex.RLock()
	defer fake.listTagsForResourceMutex.RUnlock()
	fake.listTagsForResourceRequestMutex.RLock()
	defer fake.listTagsForResourceRequestMutex.RUnlock()
	fake.listTagsForResourceWithContextMutex.RLock()
	defer fake.listTagsForResourceWithContextMutex.RUnlock()
	fake.listTaskDefinitionFamiliesMutex.RLock()
	defer fake.listTaskDefinitionFamiliesMutex.RUnlock()
	fake.listTaskDefinitionFamiliesPagesMutex.RLock()
	defer fake.listTaskDefinitionFamiliesPagesMutex.RUnlock()
	fake.listTaskDefinitionFamiliesPagesWithContextMutex.RLock()
	defer fake.listTaskDefinitionFamiliesPagesWithContextMutex.RUnlock()
	fake.listTaskDefinitionFamiliesRequestMutex.RLock()
	defer fake.listTaskDefinitionFamiliesRequestMutex.RUnlock()
	fake.listTaskDefinitionFamiliesWithContextMutex.RLock()
	defer fake.listTaskDefinitionFamiliesWithContextMutex.RUnlock()
	fake.listTaskDefinitionsMutex.RLock()
	defer fake.listTaskDefinitionsMutex.RUnlock()
	fake.listTaskDefinitionsPagesMutex.RLock()
	defer fake.listTaskDefinitionsPagesMutex.RUnlock()
	fake.listTaskDefinitionsPagesWithContextMutex.RLock()
	defer fake.listTaskDefinitionsPagesWithContextMutex.RUnlock()
	fake.listTaskDefinitionsRequestMutex.RLock()
	defer fake.listTaskDefinitionsRequestMutex.RUnlock()
	fake.listTaskDefinitionsWithContextMutex.RLock()
	defer fake.listTaskDefinitionsWithContextMutex.RUnlock()
	fake.listTasksMutex.RLock()
	defer fake.listTasksMutex.RUnlock()
	fake.listTasksPagesMutex.RLock()
	defer fake.listTasksPagesMutex.RUnlock()
	fake.listTasksPagesWithContextMutex.RLock()
	defer fake.listTasksPagesWithContextMutex.RUnlock()
	fake.listTasksRequestMutex.RLock()
	defer fake.listTasksRequestMutex.RUnlock()
	fake.listTasksWithContextMutex.RLock()
	defer fake.listTasksWithContextMutex.RUnlock()
	fake.putAccountSettingMutex.RLock()
	defer fake.putAccountSettingMutex.RUnlock()
	fake.putAccountSettingDefaultMutex.RLock()
	defer fake.putAccountSettingDefaultMutex.RUnlock()
	fake.putAccountSettingDefaultRequestMutex.RLock()
	defer fake.putAccountSettingDefaultRequestMutex.RUnlock()
	fake.putAccountSettingDefaultWithContextMutex.RLock()
	defer fake.putAccountSettingDefaultWithContextMutex.RUnlock()
	fake.putAccountSettingRequestMutex.RLock()
	defer fake.putAccountSettingRequestMutex.RUnlock()
	fake.putAccountSettingWithContextMutex.RLock()
	defer fake.putAccountSettingWithContextMutex.RUnlock()
	fake.putAttributesMutex.RLock()
	defer fake.putAttributesMutex.RUnlock()
	fake.putAttributesRequestMutex.RLock()
	defer fake.putAttributesRequestMutex.RUnlock()
	fake.putAttributesWithContextMutex.RLock()
	defer fake.putAttributesWithContextMutex.RUnlock()
	fake.putClusterCapacityProvidersMutex.RLock()
	defer fake.putClusterCapacityProvidersMutex.RUnlock()
	fake.putClusterCapacityProvidersRequestMutex.RLock()
	defer fake.putClusterCapacityProvidersRequestMutex.RUnlock()
	fake.putClusterCapacityProvidersWithContextMutex.RLock()
	defer fake.putClusterCapacityProvidersWithContextMutex.RUnlock()
	fake.registerContainerInstanceMutex.RLock()
	defer fake.registerContainerInstanceMutex.RUnlock()
	fake.registerContainerInstanceRequestMutex.RLock()
	defer fake.registerContainerInstanceRequestMutex.RUnlock()
	fake.registerContainerInstanceWithContextMutex.RLock()
	defer fake.registerContainerInstanceWithContextMutex.RUnlock()
	fake.registerTaskDefinitionMutex.RLock()
	defer fake.registerTaskDefinitionMutex.RUnlock()
	fake.registerTaskDefinitionRequestMutex.RLock()
	defer fake.registerTaskDefinitionRequestMutex.RUnlock()
	fake.registerTaskDefinitionWithContextMutex.RLock()
	defer fake.registerTaskDefinitionWithContextMutex.RUnlock()
	fake.runTaskMutex.RLock()
	defer fake.runTaskMutex.RUnlock()
	fake.runTaskRequestMutex.RLock()
	defer fake.runTaskRequestMutex.RUnlock()
	fake.runTaskWithContextMutex.RLock()
	defer fake.runTaskWithContextMutex.RUnlock()
	fake.startTaskMutex.RLock()
	defer fake.startTaskMutex.RUnlock()
	fake.startTaskRequestMutex.RLock()
	defer fake.startTaskRequestMutex.RUnlock()
	fake.startTaskWithContextMutex.RLock()
	defer fake.startTaskWithContextMutex.RUnlock()
	fake.stopTaskMutex.RLock()
	defer fake.stopTaskMutex.RUnlock()
	fake.stopTaskRequestMutex.RLock()
	defer fake.stopTaskRequestMutex.RUnlock()
	fake.stopTaskWithContextMutex.RLock()
	defer fake.stopTaskWithContextMutex.RUnlock()
	fake.submitAttachmentStateChangesMutex.RLock()
	defer fake.submitAttachmentStateChangesMutex.RUnlock()
	fake.submitAttachmentStateChangesRequestMutex.RLock()
	defer fake.submitAttachmentStateChangesRequestMutex.RUnlock()
	fake.submitAttachmentStateChangesWithContextMutex.RLock()
	defer fake.submitAttachmentStateChangesWithContextMutex.RUnlock()
	fake.submitContainerStateChangeMutex.RLock()
	defer fake.submitContainerStateChangeMutex.RUnlock()
	fake.submitContainerStateChangeRequestMutex.RLock()
	defer fake.submitContainerStateChangeRequestMutex.RUnlock()
	fake.submitContainerStateChangeWithContextMutex.RLock()
	defer fake.submitContainerStateChangeWithContextMutex.RUnlock()
	fake.submitTaskStateChangeMutex.RLock()
	defer fake.submitTaskStateChangeMutex.RUnlock()
	fake.submitTaskStateChangeRequestMutex.RLock()
	defer fake.submitTaskStateChangeRequestMutex.RUnlock()
	fake.submitTaskStateChangeWithContextMutex.RLock()
	defer fake.submitTaskStateChangeWithContextMutex.RUnlock()
	fake.tagResourceMutex.RLock()
	defer fake.tagResourceMutex.RUnlock()
	fake.tagResourceRequestMutex.RLock()
	defer fake.tagResourceRequestMutex.RUnlock()
	fake.tagResourceWithContextMutex.RLock()
	defer fake.tagResourceWithContextMutex.RUnlock()
	fake.untagResourceMutex.RLock()
	defer fake.untagResourceMutex.RUnlock()
	fake.untagResourceRequestMutex.RLock()
	defer fake.untagResourceRequestMutex.RUnlock()
	fake.untagResourceWithContextMutex.RLock()
	defer fake.untagResourceWithContextMutex.RUnlock()
	fake.updateCapacityProviderMutex.RLock()
	defer fake.updateCapacityProviderMutex.RUnlock()
	fake.updateCapacityProviderRequestMutex.RLock()
	defer fake.updateCapacityProviderRequestMutex.RUnlock()
	fake.updateCapacityProviderWithContextMutex.RLock()
	defer fake.updateCapacityProviderWithContextMutex.RUnlock()
	fake.updateClusterSettingsMutex.RLock()
	defer fake.updateClusterSettingsMutex.RUnlock()
	fake.updateClusterSettingsRequestMutex.RLock()
	defer fake.updateClusterSettingsRequestMutex.RUnlock()
	fake.updateClusterSettingsWithContextMutex.RLock()
	defer fake.updateClusterSettingsWithContextMutex.RUnlock()
	fake.updateContainerAgentMutex.RLock()
	defer fake.updateContainerAgentMutex.RUnlock()
	fake.updateContainerAgentRequestMutex.RLock()
	defer fake.updateContainerAgentRequestMutex.RUnlock()
	fake.updateContainerAgentWithContextMutex.RLock()
	defer fake.updateContainerAgentWithContextMutex.RUnlock()
	fake.updateContainerInstancesStateMutex.RLock()
	defer fake.updateContainerInstancesStateMutex.RUnlock()
	fake.updateContainerInstancesStateRequestMutex.RLock()
	defer fake.updateContainerInstancesStateRequestMutex.RUnlock()
	fake.updateContainerInstancesStateWithContextMutex.RLock()
	defer fake.updateContainerInstancesStateWithContextMutex.RUnlock()
	fake.updateServiceMutex.RLock()
	defer fake.updateServiceMutex.RUnlock()
	fake.updateServicePrimaryTaskSetMutex.RLock()
	defer fake.updateServicePrimaryTaskSetMutex.RUnlock()
	fake.updateServicePrimaryTaskSetRequestMutex.RLock()
	defer fake.updateServicePrimaryTaskSetRequestMutex.RUnlock()
	fake.updateServicePrimaryTaskSetWithContextMutex.RLock()
	defer fake.updateServicePrimaryTaskSetWithContextMutex.RUnlock()
	fake.updateServiceRequestMutex.RLock()
	defer fake.updateServiceRequestMutex.RUnlock()
	fake.updateServiceWithContextMutex.RLock()
	defer fake.updateServiceWithContextMutex.RUnlock()
	fake.updateTaskSetMutex.RLock()
	defer fake.updateTaskSetMutex.RUnlock()
	fake.updateTaskSetRequestMutex.RLock()
	defer fake.updateTaskSetRequestMutex.RUnlock()
	fake.updateTaskSetWithContextMutex.RLock()
	defer fake.updateTaskSetWithContextMutex.RUnlock()
	fake.waitUntilServicesInactiveMutex.RLock()
	defer fake.waitUntilServicesInactiveMutex.RUnlock()
	fake.waitUntilServicesInactiveWithContextMutex.RLock()
	defer fake.waitUntilServicesInactiveWithContextMutex.RUnlock()
	fake.waitUntilServicesStableMutex.RLock()
	defer fake.waitUntilServicesStableMutex.RUnlock()
	fake.waitUntilServicesStableWithContextMutex.RLock()
	defer fake.waitUntilServicesStableWithContextMutex.RUnlock()
	fake.waitUntilTasksRunningMutex.RLock()
	defer fake.waitUntilTasksRunningMutex.RUnlock()
	fake.waitUntilTasksRunningWithContextMutex.RLock()
	defer fake.waitUntilTasksRunningWithContextMutex.RUnlock()
	fake.waitUntilTasksStoppedMutex.RLock()
	defer fake.waitUntilTasksStoppedMutex.RUnlock()
	fake.waitUntilTasksStoppedWithContextMutex.RLock()
	defer fake.waitUntilTasksStoppedWithContextMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeECSClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ ledger.ECSClient = new(FakeECSClient)
